const o={get_database_format:(t=null)=>t?t.provider?t.provider==="postgresql"?"postgresql":"mongodb":typeof t.collection=="function"?"mongodb":typeof t.query=="function"?"postgresql":"mongodb":"mongodb",get_iso_string:(t=new Date)=>t.toISOString(),get_current_time:(t={})=>{const s=new Date;return t?.format==="mongodb"?s:(t?.format==="postgresql",s.toISOString())},get_mongodb_date:(t=new Date)=>t,get_postgresql_date:(t=new Date)=>t.toISOString(),normalize_date:(t,s={})=>{if(t==null){const e=new Date;return s?.format==="mongodb"?e:(s?.format==="postgresql",e.toISOString())}let r;return t instanceof Date?r=t:typeof t=="string"?(r=new Date(t),isNaN(r.getTime())&&(r=new Date)):typeof t=="number"?(r=new Date(t),isNaN(r.getTime())&&(r=new Date)):r=new Date,s?.format==="mongodb"?r:(s?.format==="postgresql",r.toISOString())},get_future_time:(t="",s=0,r={})=>{const e=r?.start_from?new Date(r?.start_from):new Date;switch(t){case"seconds":e.setSeconds(e.getSeconds()+s);break;case"minutes":e.setMinutes(e.getMinutes()+s);break;case"hours":e.setHours(e.getHours()+s);break;case"days":e.setHours(e.getHours()+s*24);break}return r?.format==="mongodb"?e:(r?.format==="postgresql",e.toISOString())},get_past_time:(t="",s=0,r={})=>{const e=r?.start_from?new Date(r?.start_from):new Date;switch(t){case"seconds":e.setSeconds(e.getSeconds()-s);break;case"minutes":e.setMinutes(e.getMinutes()-s);break;case"hours":e.setHours(e.getHours()-s);break;case"days":e.setHours(e.getHours()-s*24);break}return r?.format==="mongodb"?e:(r?.format==="postgresql",e.toISOString())}};var n=o;export{n as default};
