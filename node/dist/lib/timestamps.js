const n={get_database_format:(e=null)=>e?e.provider?e.provider==="postgresql"?"postgresql":e.provider==="redis"?"redis":"mongodb":e.client&&typeof e.client.set=="function"?"redis":typeof e.collection=="function"?"mongodb":typeof e.query=="function"?"postgresql":"mongodb":"mongodb",get_iso_string:(e=new Date)=>e.toISOString(),get_current_time:(e={})=>{const s=new Date;return e?.format==="mongodb"?s:(e?.format==="postgresql"||e?.format==="redis",s.toISOString())},get_mongodb_date:(e=new Date)=>e,get_postgresql_date:(e=new Date)=>e.toISOString(),get_redis_date:(e=new Date)=>e.toISOString(),normalize_date:(e,s={})=>{if(e==null){const r=new Date;return s?.format==="mongodb"?r:(s?.format==="postgresql"||s?.format==="redis",r.toISOString())}let t;return e instanceof Date?t=e:typeof e=="string"?(t=new Date(e),isNaN(t.getTime())&&(t=new Date)):typeof e=="number"?(t=new Date(e),isNaN(t.getTime())&&(t=new Date)):t=new Date,s?.format==="mongodb"?t:(s?.format==="postgresql"||s?.format==="redis",t.toISOString())},get_future_time:(e="",s=0,t={})=>{const r=t?.start_from?new Date(t?.start_from):new Date;switch(e){case"seconds":r.setSeconds(r.getSeconds()+s);break;case"minutes":r.setMinutes(r.getMinutes()+s);break;case"hours":r.setHours(r.getHours()+s);break;case"days":r.setHours(r.getHours()+s*24);break}return t?.format==="mongodb"?r:(t?.format==="postgresql"||t?.format==="redis",r.toISOString())},get_past_time:(e="",s=0,t={})=>{const r=t?.start_from?new Date(t?.start_from):new Date;switch(e){case"seconds":r.setSeconds(r.getSeconds()-s);break;case"minutes":r.setMinutes(r.getMinutes()-s);break;case"hours":r.setHours(r.getHours()-s);break;case"days":r.setHours(r.getHours()-s*24);break}return t?.format==="mongodb"?r:(t?.format==="postgresql"||t?.format==="redis",r.toISOString())}};var o=n;export{o as default};
