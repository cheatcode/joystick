import b from"ws";import q from"./lib/generate_id.js";const v=(k={},w=null)=>{const{url:u,query:g,options:{logging:t=!1,auto_reconnect:y=!0,reconnect_attempts:f=12,reconnect_delay_in_seconds:$=5,max_sends_per_second:h=20}={},events:d={}}=k,S=g?`?${new URLSearchParams(g).toString()}`:"",I=`${u}${S}`;let i=0,c=null,a=[],s=[];const m=()=>{const o=new b(I),l={_id:q(8),client:o,send:(e={})=>{const n=Date.now();s=s.filter(_=>n-_<1e3);const r=s.length>=h;if(o?.readyState===b.OPEN&&!r)try{o.send(JSON.stringify(e)),s.push(n)}catch(_){t&&console.error("[websockets] Failed to send message:",e,_)}else a.push(e),t&&r?console.warn("[websockets] Throttled message (rate limit hit):",e):t&&console.warn("[websockets] Queued message (socket not open):",e)}},p=()=>{o.removeAllListeners(),c&&(clearInterval(c),c=null)};return o.on("open",()=>{if(t&&console.log(`[websockets] Connected to ${u}`),d.on_open?.(l),i=0,w&&w(l),a.length>0){t&&console.log(`[websockets] Flushing ${a.length} queued message(s)...`);const e=Date.now();a.forEach(n=>{if(s=s.filter(r=>e-r<1e3),s.length<h)try{o.send(JSON.stringify(n)),s.push(Date.now())}catch(r){t&&console.error("[websockets] Failed to send queued message:",n,r)}else t&&console.warn("[websockets] Dropped queued message (throttled):",n)}),a=[]}}),o.on("message",e=>{const n=typeof e=="string"?JSON.parse(e):{};d.on_message?.(n,l)}),o.on("error",e=>{t&&console.error(`[websockets] Error from ${u}`,e),p(),d.on_error?.(e,l)}),o.on("close",(e,n)=>{p(),t&&console.log(`[websockets] Disconnected from ${u}`),d.on_close?.(e,n,l);const r=[1e3,1001].includes(e);y&&!r&&!c&&(c=setInterval(()=>{f===1/0||i<f?(i+=1,t&&console.log(`[websockets] Attempting to reconnect (${i}${f===1/0?"":`/${f}`})...`),p(),m()):(clearInterval(c),c=null)},Math.min($*1e3*Math.pow(2,i),3e4)))}),process.once("SIGINT",()=>o.close(1e3)),process.once("SIGTERM",()=>o.close(1e3)),l};return m()};var E=v;export{E as default};
