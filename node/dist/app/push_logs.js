import r from"winston";import n from"fs";import a from"../lib/path_exists.js";import i from"../lib/push_encrypt.js";const{mkdir:c}=n.promises,p=r.format(s=>{if(s.message){console.log("Original message:",s.message);const t=typeof s.message=="string"?s.message:JSON.stringify(s.message);s.message=i(t,process.env.PUSH_INSTANCE_TOKEN),console.log("Encrypted message:",s.message)}return s}),g=async()=>{await a("/root/push/logs")||await c("/root/push/logs",{recursive:!0}),console.log("Encryption key:",process.env.PUSH_INSTANCE_TOKEN);const s=r.createLogger({format:r.format.combine(r.format.timestamp(),p(),r.format.json()),transports:[new r.transports.File({filename:"/root/push/logs/app.log",maxsize:1024*1024*5,maxFiles:1,tailable:!0})]}),t=process.stdout.write,o=process.stderr.write;process.stdout.write=e=>(s.info(e),t.call(process.stdout,e)),process.stderr.write=e=>(s.error(e),o.call(process.stderr,e)),process.on("uncaughtException",e=>{s.error(e instanceof Error?e?.toString():e)}),process.on("unhandledRejection",e=>{s.error(e instanceof Error?e?.toString():e)})};var d=g;export{d as default};
