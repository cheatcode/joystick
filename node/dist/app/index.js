import m from"./api/accounts/authenticated.js";import h from"./api/accounts/login.js";import g from"./api/accounts/logout.js";import d from"./api/accounts/recover_password.js";import f from"./api/accounts/reset_password.js";import l from"./api/accounts/signup.js";import b from"./api/accounts/user.js";import x from"./api/accounts/verify_email.js";import y from"./api/push/health.js";import j from"./api/test/accounts/delete.js";import w from"./api/test/accounts/signup.js";import k from"./api/test/bootstrap.js";import v from"./api/test/process.js";import q from"./api/test/queues.js";import O from"./databases/mongodb/create_indexes.js";import E from"./databases/postgresql/create_indexes.js";import R from"./databases/postgresql/create_tables.js";import D from"../lib/dynamic_import.js";import N from"./generate_machine_id.js";import S from"./generate_process_id.js";import I from"../lib/get_joystick_build_path.js";import c from"./databases/get_target_database_connection.js";import P from"./handle_process_errors.js";import $ from"./settings/load.js";import A from"../lib/parse_route_pattern.js";import J from"../lib/path_exists.js";import L from"./queues/index.js";import T from"./register_app_options.js";import U from"./cron_jobs/register.js";import B from"./databases/register_database.js";import C from"./api/register_getters.js";import V from"./routes/register_route_from_function.js";import z from"./routes/register_route_from_object.js";import H from"./api/register_setters.js";import Q from"./uploaders/register.js";import Y from"./websockets/register.js";import F from"./start_express.js";import G from"./start_node_as_cluster.js";import K from"../lib/strip_preceeding_slash.js";import p from"../lib/types.js";import M from"./push_logs.js";const W=$();process.env.NODE_ENV!=="development"&&process.env.IS_PUSH_DEPLOYED&&M();class X{constructor(s={}){P(s?.events),T(this,s),this.generate_machine_id(),this.generate_process_id(),process.title=process.env.NODE_ENV==="test"?"joystick_test_app":"joystick_app",process.joystick={app_options:s,external_process_ids:[],track_external_process:(t="")=>{process.send({external_process_id:t}),process.joystick.external_process_ids.push(t)}}}async connect_databases(){const s=W?.config?.databases;for(let t=0;t<s?.length;t+=1){const e=s[t],r=parseInt(process.env.PORT,10)+10+t,o=s?.filter(n=>e?.provider===n?.provider)?.length>1;await B(e,r,o)}if(s?.length>0){const t=c("queues"),e=c("sessions"),r=c("users");process.databases._queues=t?.connection,process.databases._sessions=e?.connection,process.databases._users=r?.connection;const o=[t,e,r],n=o?.filter(i=>i?.provider==="mongodb")?.map(i=>i?.database_type);await O(n);const _=o?.filter(i=>i?.provider==="postgresql")?.map(i=>i?.database_type);await R(_),await E(_)}}async generate_machine_id(){this.joystick_machine_id=await N()}async generate_process_id(){this.joystick_process_id=await S()}on_after_start_server(s={}){process.on("message",t=>{if(typeof t=="string"){const e=JSON.parse(t);["RESTART"].includes(e?.type),e?.type==="BUILD_ERROR"&&(process.BUILD_ERROR=JSON.parse(t))}}),console.log(`App running at: http://localhost:${s.port}`)}register_accounts(){this.express.app.get("/api/_accounts/authenticated",m),this.express.app.post("/api/_accounts/user",b),this.express.app.post("/api/_accounts/login",h),this.express.app.post("/api/_accounts/logout",g),this.express.app.post("/api/_accounts/recover-password",d),this.express.app.post("/api/_accounts/reset-password",f),this.express.app.post("/api/_accounts/signup",l),this.express.app.get("/api/_accounts/verify-email",x)}register_api(){const s=this?.options?.api?.getters,t=this?.options?.api?.setters,e=this?.options?.api?.options,r=this?.options?.api?.context;s&&p.is_object(s)&&Object.keys(s||{}).length>0&&C(this.express.app,Object.entries(s||{}),r,e),t&&p.is_object(t)&&Object.keys(t||{}).length>0&&H(this.express.app,Object.entries(t||{}),r,e)}register_caches(){process.caches={},p.is_function(this.options.caches)&&this.options.caches()}register_cron_jobs(){U(this.options.cronJobs||this.options.cron_jobs)}register_dynamic_pages(){this.express.app.post("/_joystick/dynamic_page/data",async(s={},t={})=>{const e=I(),r=K(s?.body?.path),o=`${e}/${r}`;if(!s?.body?.path||!await J(o))return handle_api_error("joystick.dynamic_pages.load",new Error(`Component not found at ${o}.`),t);const n=await D(o);if(n){const _=A(s?.body?.route_pattern||"",s?.body?.path),i=await ssr({is_dynamic_page_render:!0,component_to_render:n,api_schema:this?.options?.api,component_options:{props:s?.body?.props},req:get_browser_safe_request({params:_?.params||{},query:s?.body?.query_params||{},url:s?.body?.path,headers:s?.headers,context:s?.context})});return t.status(200).send({data:i})}return t.status(200).send({})})}register_fixtures(){p.is_function(this.options.fixtures)&&this.options.fixtures()}register_indexes(){p.is_function(this.options.indexes)&&this.options.indexes()}register_push(){this.express.app.get("/api/_push/health",y)}register_queues(){if(p.is_object(this.options.queues)){const s=Object.entries(this.options.queues||{});for(let t=0;t<s.length;t+=1){const[e,r]=s[t];process.queues={...process.queues||{},[e]:new L(e,r)}}}}register_routes(){const s=Object.entries(this?.options?.routes||{});for(let t=0;t<s?.length;t+=1){const[e,r]=s[t],o=p.is_object(r);p.is_function(r)&&V(this.express.app,e,r),o&&z(this.express.app,e,r)}}register_tests(){this.express.app.get("/api/_test/bootstrap",(s={},t={})=>k(s,t,this)),this.express.app.get("/api/_test/process",v),this.express.app.delete("/api/_test/accounts",j),this.express.app.post("/api/_test/accounts/signup",w),this.express.app.post("/api/_test/queues",(s={},t={})=>q(s,t,this))}register_uploaders(){Q(this.options.uploaders,this)}register_websockets(){Y(this.options.websockets,this)}async start(){await this.connect_databases(),this.register_caches(),this.register_cron_jobs(),this.register_queues(),this.start_express(),this.register_tests(),this.register_accounts(),this.register_push(),this.register_api(),this.register_routes(),this.register_dynamic_pages(),this.register_websockets(),this.register_uploaders(),this.register_fixtures(),this.register_indexes()}start_express(){this.express=F(this.on_after_start_server,this)}}const u=async(a={})=>{const s=new X(a);return await s.start(a),s},Z=(a={})=>new Promise(async s=>{if(a?.cluster)G(async()=>{const t=await u(a);return s(t.express)});else{const t=await u(a);return s(t.express)}});var Cs=Z;export{Cs as default};
