import h from"http";import g from"./api/accounts/authenticated.js";import f from"./api/accounts/login.js";import d from"./api/accounts/logout.js";import l from"./api/accounts/recover_password.js";import b from"./api/accounts/reset_password.js";import y from"./api/accounts/signup.js";import x from"./api/accounts/user.js";import w from"./api/accounts/verify_email.js";import"./api/push/health.js";import j from"./api/test/accounts/delete.js";import k from"./api/test/accounts/signup.js";import v from"./api/test/bootstrap.js";import q from"./api/test/process.js";import O from"./api/test/queues.js";import E from"./databases/mongodb/create_indexes.js";import R from"./databases/postgresql/create_indexes.js";import D from"./databases/postgresql/create_tables.js";import S from"../lib/dynamic_import.js";import A from"./generate_machine_id.js";import N from"./generate_process_id.js";import T from"../lib/get_browser_safe_request.js";import I from"../lib/get_joystick_build_path.js";import c from"./databases/get_target_database_connection.js";import P from"./handle_process_errors.js";import $ from"./settings/load.js";import B from"../lib/parse_route_pattern.js";import J from"../lib/path_exists.js";import L from"./push/index.js";import U from"./push/logger.js";import C from"./queues/index.js";import V from"./register_app_options.js";import z from"./cron_jobs/register.js";import F from"./databases/register_database.js";import H from"./api/register_getters.js";import Q from"./routes/register_route_from_function.js";import Y from"./routes/register_route_from_object.js";import G from"./api/register_setters.js";import K from"./uploaders/register.js";import M from"./websockets/register.js";import W from"./ssr/index.js";import X from"./start_express.js";import Z from"./start_node_as_cluster.js";import ss from"../lib/strip_preceeding_slash.js";import a from"../lib/types.js";const ts=$();class es{constructor(s={}){h.globalAgent.maxSockets=1/0,P(s?.events),V(this,s),this.generate_machine_id(),this.generate_process_id(),process.title=process.env.NODE_ENV==="test"?"joystick_test_app":"joystick_app",process.joystick={app_options:s,external_process_ids:[],track_external_process:(t="")=>{process.send({external_process_id:t}),process.joystick.external_process_ids.push(t)}}}async connect_databases(){try{const s=ts?.config?.databases;for(let t=0;t<s?.length;t+=1){const e=s[t],o=parseInt(process.env.PORT,10)+10+t,r=s?.filter(n=>e?.provider===n?.provider)?.length>1;await F(e,o,r)}if(s?.length>0){const t=c("queues"),e=c("sessions"),o=c("users");process.databases._queues=t?.connection,process.databases._sessions=e?.connection,process.databases._users=o?.connection;const r=[t,e,o],n=r?.filter(i=>i?.provider==="mongodb")?.map(i=>i?.database_type);await E(n);const _=r?.filter(i=>i?.provider==="postgresql")?.map(i=>i?.database_type);await D(_),await R(_)}}catch(s){console.warn(s)}}async generate_machine_id(){this.joystick_machine_id=await A()}async generate_process_id(){this.joystick_process_id=await N()}on_after_start_server(s={}){process.on("message",t=>{if(typeof t=="string"){const e=JSON.parse(t);["RESTART"].includes(e?.type),e?.type==="BUILD_ERROR"&&(process.BUILD_ERROR=JSON.parse(t))}}),console.log(`App running at: http://localhost:${s.port}`)}register_accounts(){this.express.app.get("/api/_accounts/authenticated",g),this.express.app.post("/api/_accounts/user",x),this.express.app.post("/api/_accounts/login",f),this.express.app.post("/api/_accounts/logout",d),this.express.app.post("/api/_accounts/recover-password",l),this.express.app.post("/api/_accounts/reset-password",b),this.express.app.post("/api/_accounts/signup",y),this.express.app.get("/api/_accounts/verify-email",w)}register_api(){const s=this?.options?.api?.getters,t=this?.options?.api?.setters,e=this?.options?.api?.options,o=this?.options?.api?.context;s&&a.is_object(s)&&Object.keys(s||{}).length>0&&H(this.express.app,Object.entries(s||{}),o,e),t&&a.is_object(t)&&Object.keys(t||{}).length>0&&G(this.express.app,Object.entries(t||{}),o,e)}register_caches(){process.caches={},a.is_function(this.options.caches)&&this.options.caches()}register_cron_jobs(){z(this.options.cronJobs||this.options.cron_jobs)}register_dynamic_pages(){this.express.app.post("/_joystick/dynamic_page/data",async(s={},t={})=>{const e=I(),o=ss(s?.body?.page),r=`${e}/${o}`;if(!s?.body?.page||!await J(r))return handle_api_error("joystick.dynamic_pages.load",new Error(`Component not found at ${r}.`),t);const n=await S(r);if(n){const _=B(s?.body?.route_pattern||"",s?.body?.path),i=T({params:_?.params||{},query:s?.body?.query_params||{},url:s?.body?.path,headers:s?.headers,context:s?.context}),m=await W({is_dynamic_page_render:!0,component_to_render:n,api_schema:this?.options?.api,component_options:{props:s?.body?.props},req:i});return t.status(200).send({data:m,req:i,url:{params:_?.params||{},query:s?.body?.query_params||{},path:s?.body?.path,route:s?.body?.route_pattern||s?.body?.path}})}return t.status(200).send({})})}register_fixtures(){a.is_function(this.options.fixtures)&&this.options.fixtures()}register_indexes(){a.is_function(this.options.indexes)&&this.options.indexes()}async register_push(){process.env.NODE_ENV!=="development"&&process.env.IS_PUSH_DEPLOYED&&(await U(),await L())}register_queues(){if(a.is_object(this.options.queues)){const s=Object.entries(this.options.queues||{});for(let t=0;t<s.length;t+=1){const[e,o]=s[t];process.queues={...process.queues||{},[e]:new C(e,o)}}}}register_routes(){const s=Object.entries(this?.options?.routes||{});for(let t=0;t<s?.length;t+=1){const[e,o]=s[t],r=a.is_object(o);a.is_function(o)&&Q(this.express.app,e,o),r&&Y(this.express.app,e,o)}}register_tests(){this.express.app.get("/api/_test/bootstrap",(s={},t={})=>v(s,t,this)),this.express.app.get("/api/_test/process",q),this.express.app.delete("/api/_test/accounts",j),this.express.app.post("/api/_test/accounts/signup",k),this.express.app.post("/api/_test/queues",(s={},t={})=>O(s,t,this))}register_uploaders(){K(this.options.uploaders,this)}register_websockets(){M(this.options.websockets,this)}async start(){this.register_push(),await this.connect_databases(),console.log("AFTER DB START"),this.register_caches(),this.register_cron_jobs(),this.register_queues(),this.start_express(),this.register_tests(),this.register_accounts(),this.register_api(),this.register_routes(),this.register_dynamic_pages(),this.register_websockets(),this.register_uploaders(),this.register_fixtures(),this.register_indexes()}start_express(){this.express=X(this.on_after_start_server,this)}}const u=async(p={})=>{const s=new es(p);return await s.start(p),s},os=(p={})=>new Promise(async s=>{if(p?.cluster)Z(async()=>{const t=await u(p);return s(t.express)});else{const t=await u(p);return s(t.express)}});var Ms=os;export{Ms as default};
