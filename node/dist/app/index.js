import v from"http";import $ from"fs";import q from"./api/accounts/authenticated.js";import O from"./api/accounts/login.js";import E from"./api/accounts/logout.js";import F from"./api/accounts/recover_password.js";import N from"./api/accounts/reset_password.js";import R from"./api/accounts/signup.js";import S from"./api/accounts/user.js";import D from"./api/accounts/verify_email.js";import I from"./api/test/accounts/delete.js";import A from"./api/test/accounts/signup.js";import T from"./api/test/bootstrap.js";import P from"./api/test/process.js";import W from"./api/test/queues.js";import U from"./databases/mongodb/create_indexes.js";import C from"./databases/postgresql/create_indexes.js";import J from"./databases/postgresql/create_tables.js";import f from"../lib/dynamic_import.js";import L from"./generate_machine_id.js";import B from"./generate_process_id.js";import H from"../lib/get_browser_safe_request.js";import d from"../lib/get_joystick_build_path.js";import b from"./databases/get_target_database_connection.js";import V from"../lib/get_translations.js";import Y from"./handle_process_errors.js";import z from"./settings/load.js";import K from"../lib/parse_route_pattern.js";import p from"../lib/path_exists.js";import Q from"./push/index.js";import G from"./push/logger.js";import M from"./queues/index.js";import h from"../lib/read_mod_component_css.js";import j from"../lib/read_mod_global_css.js";import X from"./register_app_options.js";import Z from"./cron_jobs/register.js";import tt from"./databases/register_database.js";import st from"./api/register_getters.js";import et from"./routes/register_route_from_function.js";import ot from"./routes/register_route_from_object.js";import it from"./api/register_setters.js";import at from"./uploaders/register.js";import rt from"./websockets/register.js";import nt from"./ssr/index.js";import pt from"./start_express.js";import ct from"./start_node_as_cluster.js";import _t from"../lib/strip_preceeding_slash.js";import m from"../lib/types.js";import mt from"../lib/websocket_client.js";const{readFile:_,readdir:g}=$.promises,lt=z();class dt{constructor(t={}){v.globalAgent.maxSockets=1/0,Y(t?.events),X(this,t),this.generate_machine_id(),this.generate_process_id(),process.title=process.env.NODE_ENV==="test"?"joystick_test_app":"joystick_app",process.joystick={app_options:t,external_process_ids:[],track_external_process:(s="")=>{process.send({external_process_id:s}),process.joystick.external_process_ids.push(s)}}}async connect_databases(){const t=lt?.config?.databases;for(let s=0;s<t?.length;s+=1){const o=t[s],e=parseInt(process.env.PORT,10)+10+s,r=t?.filter(i=>o?.provider===i?.provider)?.length>1;await tt(o,e,r)}if(t?.length>0){const s=b("queues"),o=b("users");process.databases._queues=s?.connection,process.databases._users=o?.connection;const e=[s,o],r=e?.filter(a=>a?.provider==="mongodb")?.map(a=>a?.database_type);await U(r);const i=e?.filter(a=>a?.provider==="postgresql")?.map(a=>a?.database_type);await J(i),await C(i)}}async generate_machine_id(){this.joystick_machine_id=await L()}async generate_process_id(){this.joystick_process_id=await B()}async load_translations(){const t=d();if(!await p(t))return;process._joystick_translations={normal:{files:[],path:`${t}i18n`,cache:{}},email:{files:[],path:`${t}i18n/email`,cache:{}}};const s=async o=>{const e=process._joystick_translations[o];if(await p(e.path))try{const r=await g(e.path);e.files=r.filter(i=>i.endsWith(".js"));for(const i of e.files){const a=`${e.path}/${i}`;try{const n=await f(a);e.cache[i]=n}catch(n){console.warn(`Failed to load translation file: ${a}`,n.message)}}}catch(r){console.warn(`Failed to scan translation directory: ${e.path}`,r.message)}};await s("normal"),await s("email")}async load_email_templates(){const s=`${d()}email`;if(await p(s)){process._joystick_email_templates={},process._joystick_email_base_files={};try{const o=await g(s),e=o.filter(i=>i.endsWith(".js"));for(const i of e){const a=`${s}/${i}`,n=i.replace(".js","");try{const c=await f(a);process._joystick_email_templates[n]=c}catch(c){console.warn(`Failed to load email template: ${a}`,c.message)}}const r=o.filter(i=>i.startsWith("base")&&(i.endsWith(".html")||i.endsWith(".css")));for(const i of r){const a=`${s}/${i}`;try{const n=await _(a,"utf-8");process._joystick_email_base_files[i]=n}catch(n){console.warn(`Failed to load email base file: ${a}`,n.message)}}}catch(o){console.warn(`Failed to scan email templates directory: ${s}`,o.message)}}}async load_ui(){const t=d();if(!await p(t))return;process._joystick_html=await _("index.html","utf-8"),process._joystick_components={};const s=async e=>{try{const r=await g(e,{withFileTypes:!0});for(const i of r)if(i.isDirectory()){const n=`${`${e}/${i.name}`}/index.js`;if(await p(n))try{const c=await f(n),u=n.replace(`${t}`,"");process._joystick_components[u]=c}catch(c){console.warn(`Failed to load component: ${n}`,c.message)}}}catch(r){console.warn(`Failed to scan directory: ${e}`,r.message)}},o=[`${t}ui/components`,`${t}ui/layouts`,`${t}ui/pages`];for(const e of o)await p(e)&&await s(e)}on_after_start_server(t={}){process.on("message",s=>{if(typeof s=="string"){const o=JSON.parse(s);["RESTART"].includes(o?.type),o?.type==="BUILD_ERROR"&&(process.BUILD_ERROR=JSON.parse(s))}}),console.log(`App running at: http://localhost:${t.port}`)}register_accounts(){this.express.app.get("/api/_accounts/authenticated",q),this.express.app.post("/api/_accounts/user",S),this.express.app.post("/api/_accounts/login",O),this.express.app.post("/api/_accounts/logout",E),this.express.app.post("/api/_accounts/recover-password",F),this.express.app.post("/api/_accounts/reset-password",N),this.express.app.post("/api/_accounts/signup",R),this.express.app.get("/api/_accounts/verify-email",D)}register_api(){const t=this?.options?.api?.getters,s=this?.options?.api?.setters,o=this?.options?.api?.options,e=this?.options?.api?.context;t&&m.is_object(t)&&Object.keys(t||{}).length>0&&st(this.express.app,Object.entries(t||{}),e,o),s&&m.is_object(s)&&Object.keys(s||{}).length>0&&it(this.express.app,Object.entries(s||{}),e,o)}register_caches(){process.caches={},m.is_function(this.options.caches)&&this.options.caches()}register_cron_jobs(){Z(this.options.cronJobs||this.options.cron_jobs)}register_dynamic_pages(){this.express.app.post("/_joystick/dynamic_page/data",async(t={},s={})=>{const o=d(),e=_t(t?.body?.page),r=`${o}/${e}`;if(!t?.body?.page||!await p(r))return handle_api_error("joystick.dynamic_pages.load",new Error(`Component not found at ${r}.`),s);const i=await f(r);if(i){const a=K(t?.body?.route_pattern||"",t?.body?.path),n=H({params:a?.params||{},query:t?.body?.query_params||{},url:t?.body?.path,headers:t?.headers,context:t?.context}),c=await nt({is_dynamic_page_render:!0,component_to_render:i,api_schema:this?.options?.api,component_options:{props:t?.body?.props},req:n});let u={};try{const k=`${d()}i18n`,w=process._joystick_translations?.normal?.files||[];w.length>0&&(u=await V({req:n,language_files_path:k,language_files:w,render_component_path:e}))}catch(y){console.warn("Failed to load translations for dynamic page:",y.message)}return s.status(200).send({data:c,req:n,url:{params:a?.params||{},query:t?.body?.query_params||{},path:t?.body?.path,route:t?.body?.route_pattern||t?.body?.path},i18n:u})}return s.status(200).send({})})}register_fixtures(){m.is_function(this.options.fixtures)&&this.options.fixtures()}register_indexes(){m.is_function(this.options.indexes)&&this.options.indexes()}async register_mod(){if(!await p("private/mod"))return;const s=await p("private/mod/mod_version.txt")&&(await _("private/mod/mod_version.txt","utf-8"))?.trim()||"free";let o,e,r,i={},a={};if(s==="plus"){o=await p("private/mod/mod-light-plus.min.css")&&await _("private/mod/mod-light-plus.min.css","utf-8")||"",e=await p("private/mod/mod-dark-plus.min.css")&&await _("private/mod/mod-dark-plus.min.css","utf-8")||"",r={esm:await p("lib/mod-plus.esm.min.js")&&await _("lib/mod-plus.esm.min.js","utf-8")||"",iife:await p("lib/mod-plus.iife.min.js")&&await _("lib/mod-plus.iife.min.js","utf-8")||""},i=await j();const n=await h("free"),c=await h("plus");a={...n||{},...c||{}}}else o=await p("private/mod/mod-light.min.css")&&await _("private/mod/mod-light.min.css","utf-8")||"",e=await p("private/mod/mod-dark.min.css")&&await _("private/mod/mod-dark.min.css","utf-8")||"",r={esm:await p("lib/mod.esm.min.js")&&await _("lib/mod.esm.min.js","utf-8")||"",iife:await p("lib/mod.iife.min.js")&&await _("lib/mod.iife.min.js","utf-8")||""},i=await j(),a={...await h("free")||{}};this.mod={version:s,css:{light:o,dark:e},js:r,globals:i,components:a}}async register_push(){process.env.NODE_ENV!=="development"&&process.env.IS_PUSH_DEPLOYED&&(this.express.app.get("/api/_push/health",async(t={},s={})=>t?.headers?.["x-push-instance-token"]!==process.env.PUSH_INSTANCE_TOKEN?s.status(403).send("403 - You are not allowed to access this endpoint."):s.status(200).send("ok")),process.push_instances_websocket=mt({url:"wss://push.cheatcode.co/api/_websockets/instances",options:{max_sends_per_second:10,logging:!1,auto_reconnect:!0,reconnect_attempts:1/0,reconnect_delay_in_seconds:10}}),await Q(),await G(),console.log("App running at http://localhost:2600"))}register_queues(){if(m.is_object(this.options.queues)){const t=Object.entries(this.options.queues||{});for(let s=0;s<t.length;s+=1){const[o,e]=t[s];process.queues={...process.queues||{},[o]:new M(o,e)}}}}register_routes(){const t=Object.entries(this?.options?.routes||{});for(let s=0;s<t?.length;s+=1){const[o,e]=t[s],r=m.is_object(e);m.is_function(e)&&et(this.express.app,o,e),r&&ot(this.express.app,o,e)}}register_tests(){this.express.app.get("/api/_test/bootstrap",(t={},s={})=>T(t,s,this)),this.express.app.get("/api/_test/process",P),this.express.app.delete("/api/_test/accounts",I),this.express.app.post("/api/_test/accounts/signup",A),this.express.app.post("/api/_test/queues",(t={},s={})=>W(t,s,this))}register_uploaders(){at(this.options.uploaders,this)}register_websockets(){rt(this.options.websockets,this)}async start(){await this.load_translations(),await this.load_email_templates(),await this.load_ui(),await this.connect_databases(),await this.register_mod(),this.register_caches(),this.register_cron_jobs(),this.register_queues(),this.start_express(),this.register_websockets(),this.register_tests(),this.register_push(),this.register_accounts(),this.register_api(),this.register_routes(),this.register_dynamic_pages(),this.register_uploaders(),this.register_fixtures(),this.register_indexes()}start_express(){this.express=pt(this.on_after_start_server,this)}}const x=async(l={})=>{const t=new dt(l);return await t.start(l),t},ut=(l={})=>new Promise(async t=>{if(l?.cluster)ct(async()=>{const s=await x(l);return t(s.express)});else{const s=await x(l);return t(s.express)}});var _s=ut;export{_s as default};
