import h from"./api/accounts/authenticated.js";import d from"./api/accounts/login.js";import g from"./api/accounts/logout.js";import f from"./api/accounts/recover_password.js";import l from"./api/accounts/reset_password.js";import b from"./api/accounts/signup.js";import y from"./api/accounts/user.js";import x from"./api/accounts/verify_email.js";import j from"./api/push/health.js";import w from"./api/test/accounts/delete.js";import q from"./api/test/accounts/signup.js";import k from"./api/test/bootstrap.js";import v from"./api/test/process.js";import O from"./api/test/queues.js";import E from"./databases/mongodb/create_indexes.js";import R from"./databases/postgresql/create_indexes.js";import D from"./databases/postgresql/create_tables.js";import N from"../lib/dynamic_import.js";import S from"./generate_machine_id.js";import I from"./generate_process_id.js";import P from"../lib/get_browser_safe_request.js";import $ from"../lib/get_joystick_build_path.js";import c from"./databases/get_target_database_connection.js";import A from"./handle_process_errors.js";import J from"./settings/load.js";import L from"../lib/parse_route_pattern.js";import T from"../lib/path_exists.js";import U from"./queues/index.js";import B from"./register_app_options.js";import C from"./cron_jobs/register.js";import V from"./databases/register_database.js";import z from"./api/register_getters.js";import H from"./routes/register_route_from_function.js";import Q from"./routes/register_route_from_object.js";import Y from"./api/register_setters.js";import F from"./uploaders/register.js";import G from"./websockets/register.js";import K from"./ssr/index.js";import M from"./start_express.js";import W from"./start_node_as_cluster.js";import X from"../lib/strip_preceeding_slash.js";import p from"../lib/types.js";import Z from"./push_logs.js";const ss=J();process.env.NODE_ENV!=="development"&&process.env.IS_PUSH_DEPLOYED&&Z();class ts{constructor(t={}){A(t?.events),B(this,t),this.generate_machine_id(),this.generate_process_id(),process.title=process.env.NODE_ENV==="test"?"joystick_test_app":"joystick_app",process.joystick={app_options:t,external_process_ids:[],track_external_process:(s="")=>{process.send({external_process_id:s}),process.joystick.external_process_ids.push(s)}}}async connect_databases(){const t=ss?.config?.databases;for(let s=0;s<t?.length;s+=1){const r=t[s],o=parseInt(process.env.PORT,10)+10+s,i=t?.filter(n=>r?.provider===n?.provider)?.length>1;await V(r,o,i)}if(t?.length>0){const s=c("queues"),r=c("sessions"),o=c("users");process.databases._queues=s?.connection,process.databases._sessions=r?.connection,process.databases._users=o?.connection;const i=[s,r,o],n=i?.filter(e=>e?.provider==="mongodb")?.map(e=>e?.database_type);await E(n);const _=i?.filter(e=>e?.provider==="postgresql")?.map(e=>e?.database_type);await D(_),await R(_)}}async generate_machine_id(){this.joystick_machine_id=await S()}async generate_process_id(){this.joystick_process_id=await I()}on_after_start_server(t={}){process.on("message",s=>{if(typeof s=="string"){const r=JSON.parse(s);["RESTART"].includes(r?.type),r?.type==="BUILD_ERROR"&&(process.BUILD_ERROR=JSON.parse(s))}}),console.log(`App running at: http://localhost:${t.port}`)}register_accounts(){this.express.app.get("/api/_accounts/authenticated",h),this.express.app.post("/api/_accounts/user",y),this.express.app.post("/api/_accounts/login",d),this.express.app.post("/api/_accounts/logout",g),this.express.app.post("/api/_accounts/recover-password",f),this.express.app.post("/api/_accounts/reset-password",l),this.express.app.post("/api/_accounts/signup",b),this.express.app.get("/api/_accounts/verify-email",x)}register_api(){const t=this?.options?.api?.getters,s=this?.options?.api?.setters,r=this?.options?.api?.options,o=this?.options?.api?.context;t&&p.is_object(t)&&Object.keys(t||{}).length>0&&z(this.express.app,Object.entries(t||{}),o,r),s&&p.is_object(s)&&Object.keys(s||{}).length>0&&Y(this.express.app,Object.entries(s||{}),o,r)}register_caches(){process.caches={},p.is_function(this.options.caches)&&this.options.caches()}register_cron_jobs(){C(this.options.cronJobs||this.options.cron_jobs)}register_dynamic_pages(){this.express.app.post("/_joystick/dynamic_page/data",async(t={},s={})=>{const r=$(),o=X(t?.body?.path),i=`${r}/${o}`;if(!t?.body?.path||!await T(i))return handle_api_error("joystick.dynamic_pages.load",new Error(`Component not found at ${i}.`),s);const n=await N(i);if(n){const _=L(e?.body?.route_pattern||"",e?.body?.path),e=P({params:_?.params||{},query:e?.body?.query_params||{},url:e?.body?.path,headers:e?.headers,context:e?.context}),m=await K({is_dynamic_page_render:!0,component_to_render:n,api_schema:this?.options?.api,component_options:{props:e?.body?.props},req:e});return s.status(200).send({data:m,req:e,url:{params:_?.params||{},query:e?.body?.query_params||{},path:e?.body?.path,route:e?.body?.route_pattern||e?.body?.path}})}return s.status(200).send({})})}register_fixtures(){p.is_function(this.options.fixtures)&&this.options.fixtures()}register_indexes(){p.is_function(this.options.indexes)&&this.options.indexes()}register_push(){this.express.app.get("/api/_push/health",j)}register_queues(){if(p.is_object(this.options.queues)){const t=Object.entries(this.options.queues||{});for(let s=0;s<t.length;s+=1){const[r,o]=t[s];process.queues={...process.queues||{},[r]:new U(r,o)}}}}register_routes(){const t=Object.entries(this?.options?.routes||{});for(let s=0;s<t?.length;s+=1){const[r,o]=t[s],i=p.is_object(o);p.is_function(o)&&H(this.express.app,r,o),i&&Q(this.express.app,r,o)}}register_tests(){this.express.app.get("/api/_test/bootstrap",(t={},s={})=>k(t,s,this)),this.express.app.get("/api/_test/process",v),this.express.app.delete("/api/_test/accounts",w),this.express.app.post("/api/_test/accounts/signup",q),this.express.app.post("/api/_test/queues",(t={},s={})=>O(t,s,this))}register_uploaders(){F(this.options.uploaders,this)}register_websockets(){G(this.options.websockets,this)}async start(){await this.connect_databases(),this.register_caches(),this.register_cron_jobs(),this.register_queues(),this.start_express(),this.register_tests(),this.register_accounts(),this.register_push(),this.register_api(),this.register_routes(),this.register_dynamic_pages(),this.register_websockets(),this.register_uploaders(),this.register_fixtures(),this.register_indexes()}start_express(){this.express=M(this.on_after_start_server,this)}}const u=async(a={})=>{const t=new ts(a);return await t.start(a),t},es=(a={})=>new Promise(async t=>{if(a?.cluster)W(async()=>{const s=await u(a);return t(s.express)});else{const s=await u(a);return t(s.express)}});var Ys=es;export{Ys as default};
