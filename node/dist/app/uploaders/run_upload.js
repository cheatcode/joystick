import c from"fs";import l from"path";import{S3Client as _}from"@aws-sdk/client-s3";import{Upload as f}from"@aws-sdk/lib-storage";import y from"../websockets/emit_event.js";import p from"../../lib/float_to_decimal_place.js";import g from"../../lib/path_exists.js";const{mkdir:h,writeFile:d}=c.promises,w=async(e={},t={},a={})=>new Promise(async(n,r)=>{try{const i=new f({client:new _({region:e?.s3?.region,credentials:{accessKeyId:e?.s3?.accessKeyId||e?.s3?.access_key_id,secretAccessKey:e?.s3?.secretAccessKey||e?.s3?.secret_access_key}}),params:{Bucket:e?.s3?.bucket,Key:e.file_name,Body:e.content,ContentType:e.mime_type},queueSize:4,partSize:5242880});let s=0;i.on("httpUploadProgress",m=>{a("s3",m?.loaded-s),s=m?.loaded});const o=await i.done();return n({id:t?.req?.headers["x-joystick-upload-id"],provider:"s3",url:o?.Location,size:e?.fileSize,file_name:e?.file_name,fileName:e?.file_name,original_file_name:e?.original_file_name,originalFileName:e?.original_file_name,mime_type:e?.mime_type,mimeType:e?.mime_type})}catch(i){r(i?.message||"There was an error uploading your file to Amazon S3. Check the server logs for more information.")}}),k=async(e={},t={})=>{if(e?.local?.path)return new Promise(async(a,n)=>{try{await g(e?.local?.path)||await h(e?.local?.path,{recursive:!0});const r=l.dirname(`${e?.local?.path}/${e?.file_name}`);c.existsSync(r)||c.mkdirSync(r,{recursive:!0});const i=`${e?.local?.path}/${e?.file_name}`||`_uploads/${e?.file_name}`;await d(i,e.content),a({id:t?.req?.headers["x-joystick-upload-id"],provider:"local",url:i,size:e?.file_size,file_name:e?.file_name,fileName:e?.file_name,original_file_name:e?.original_file_name,originalFileName:e?.original_file_name,mime_type:e?.mime_type,mimeType:e?.mime_type})}catch(r){n(r)}})},v=async(e={})=>{const t=[];let a=e?.existing_upload_progress;const n=(r="",i=0)=>{const s=a+i,o=p(s/e?.total_upload_size_all_providers*100);y(`uploaders_${e?.req?.headers["x-joystick-upload-id"]}`,"progress",{provider:r,progress:o}),a+=i};for(let r=0;r<e?.uploads?.length;r+=1){const i=e?.uploads[r];if(i?.providers?.includes("local")){const s=await k(i,e);t.push(s)}if(i?.providers?.includes("s3")){const s=await w(i,e,n);t.push(s)}}return t};var T=v;export{T as default};
