import h from"multer";import m from"../../lib/get_browser_safe_request.js";import p from"../api/handle_api_error.js";import v from"../../lib/is_valid_json.js";import w from"./local_upload_progress_middleware.js";import y from"./run_upload.js";import q from"../../lib/string_to_slug.js";import g from"../../test/track_function_call.js";import d from"../../lib/types.js";import x from"./validate_options.js";import $ from"./validate_uploads.js";const z=async(e={})=>{const r=parseInt(e?.req?.headers["content-length"],10),t=e?.uploader_options?.providers?.includes("local")?e?.uploader_options?.providers.length:e?.uploader_options?.providers?.length+1,s=r*t;return y({existing_upload_progress:r,total_upload_size_all_providers:s,uploads:e?.validated_uploads,input:e?.upload_input,req:e?.req})},B=async(e="",r=null,t={})=>{await r({input:t?.input,req:t?.req,uploads:t?.uploads}),g(`node.uploaders.${e}.on_after_upload`,[{input:t?.input,req:m(t?.req),uploads:t?.uploads}])},M=async(e="",r=null,t={})=>{await r({input:t?.input,req:t?.req,uploads:t?.uploads}),g(`node.uploaders.${e}.on_before_upload`,[{input:t?.input,req:m(t?.req),uploads:t?.uploads}])},S=(e="")=>e&&v(e)&&JSON.parse(e),U=async(e="",r={},t={},s={})=>{try{const a=S(t?.headers["x-joystick-upload-input"]),i=await $({files:t?.files,uploader_input:a,uploader_name:e,uploader_options:r});if(i?.errors)return p(`uploaders.${e}`,i,s);(d.is_function(r?.onBeforeUpload)||d.is_function(r?.on_before_upload))&&await M(e,r?.onBeforeUpload||r?.on_before_upload,{input:a,req:t,uploads:i});const l=await z({validated_uploads:i,uploader_input:a,uploader_options:r,req:t});return(d.is_function(r?.onAfterUpload)||d.is_function(r?.on_after_upload))&&await B(e,r?.onAfterUpload||r?.on_after_upload,{input:a,req:t,uploads:l}),s.status(200).send(JSON.stringify({uploads:l}))}catch(a){p(`uploaders.${e}`,a,s)}},b=(e="",r={},t={})=>{const s=q(e),a=r?.maxSizeInMegabytes||r?.max_size_in_megabytes,l=h({limits:{fileSize:`${a||10}MB`}}).array("files",10),_=r?.providers?.includes("local")?r?.providers?.length:r?.providers?.length+1;t.express.app.post(`/api/_uploaders/${s}`,(n,o,u)=>w(_,n,o,u),(n,o,u)=>l(n,o,c=>{if(c){let f=c;c?.message==="File too large"&&(f=new Error(`Max file size is ${a}MB.`)),p(`uploader.${e}`,f,o)}else u()}),(n={},o={})=>U(e,r,n,o))},j=(e=[])=>{if(e?.length>0)for(let r=0;r<e?.length;r+=1){const t=e[r];console.error(t)}},O=(e={},r={})=>{const t=Object.entries(e);for(let s=0;s<t?.length;s+=1){const[a,i]=t[s],l=x(i);j(l),l?.length===0&&b(a,i,r)}};var K=O;export{K as default};
