import _ from"../../lib/log.js";import l from"../../test/track_function_call.js";import a from"../../lib/types.js";const g=({uploader_name:n,max_size_in_megabytes:s,mime_types:e,original_file_name:m,file_size:i,mime_type:c})=>{const f=s*1024*1024,r=[];if(a.is_number(f)&&i&&i>f){const t=`The file ${m} is too big. Max file size is ${s}MB.`;_(t,{level:"danger",docs:"https://docs.cheatcode.co/joystick/node/uploaders"}),r.push({status:400,error:new Error(t),message:t,location:`uploaders.${n}`})}if(e?.length>0&&!e.includes(c)){const t=`The MIME type for the file ${m} is not supported by the uploader ${n} (only ${e?.join(", ")}).`;_(t,{level:"danger",docs:"https://docs.cheatcode.co/joystick/node/uploaders"}),r.push({status:400,error:new Error(t),message:t,location:`uploaders.${n}`})}return r},z=(n=[])=>n.flatMap((s={})=>g(s)),o=({files:n=[],uploader_name:s="",uploader_options:e={},uploader_input:m={}})=>Promise.all(n.map(async i=>{const c=i?.mimetype?.split("/").pop(),f=a.is_function(e?.fileName)||a.is_function(e?.file_name),r=a.is_function(e?.maxSizeInMegabytes)||a.is_function(e?.max_size_in_megabytes);f&&l(`node.uploaders.${s}.file_name`,[{uploader_input:m,file_name:i?.originalname,file_size:i?.size,file_extension:c,mime_type:i?.mimetype}]),r&&l(`node.uploaders.${s}.max_size_in_megabytes`,[{input:m,upload:i}]);const t=r?await(e?.maxSizeInMegabytes||e?.max_size_in_megabytes)({input:m,upload:i}):e?.maxSizeInMegabytes||e?.max_size_in_megabytes,y=f?(e.fileName||e?.file_name)({input:m,fileName:i?.originalname,file_name:i?.originalname,fileSize:i?.size,file_size:i?.size,fileExtension:c,file_extension:c,mimeType:i?.mimetype,mime_type:i?.mimetype}):i?.originalname;return{uploader_name:s,providers:e?.providers,local:e?.local,s3:e?.s3,maxSizeInMegabytes:t,max_size_in_megabytes:t,mimeTypes:e?.mimeTypes||e?.mime_types,mime_types:e?.mimeTypes||e?.mime_types,fileName:y,file_name:y,original_file_name:i?.originalname,originalFileName:i?.originalname,file_size:i?.size,fileSize:i?.size,mime_type:i?.mimetype,mimeType:i?.mimetype,content:i?.buffer}})),h=async(n={})=>{const s=await o(n),e=z(s);return e?.length>0?{errors:e}:s};var $=h;export{$ as default};
