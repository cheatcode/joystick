const a=["mimeTypes","mime_types","maxSizeInMegabytes","max_size_in_megabytes","fileName","file_name","providers","local","s3","onBeforeUpload","on_before_upload","onAfterUpload","on_after_upload"],t=["path"],n=["region","accessKeyId","access_key_id","secretAccessKey","secret_access_key","bucket","acl"],r=(e={})=>{const l=[],c=Object.keys(e||{});for(let s=0;s<c?.length;s+=1){const o=c[s];a.includes(o)||l.push(`${o} is not an allowed uploader option.`)}if(e?.providers?.includes("local")&&!e?.local&&l.push("If an uploader provider is 'local', local object must be specified in uploader_options with a storage path."),e?.providers?.includes("s3")&&!e?.s3&&l.push("If an uploader provider is 's3', s3 object must be specified with configuration."),e?.provider?.includes("local")&&e.local){const s=Object.keys(e?.local);for(let o=0;o<s?.length;o+=1){const i=s[o];t.includes(i)||l.push(`local.${i} is not an allowed uploader option.`)}}if(e?.provider?.includes("s3")&&e.s3){const s=Object.keys(e.s3||{});for(let o=0;o<s?.length;o+=1){const i=s[o];n.includes(i)||l.push(`local.${i} is not an allowed uploader option.`)}}return l};var d=r;export{d as default};
