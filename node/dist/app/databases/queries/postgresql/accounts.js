import _ from"../../../../lib/generate_id.js";import u from"../../../../lib/camel_pascal_to_snake.js";const i={add_password_reset_token:async(s={})=>{const[e]=await process.databases._users?.query("SELECT user_id FROM users WHERE email_address = $1;",[s?.email_address]);await process.databases._users?.query("INSERT INTO users_password_reset_tokens(user_id, token, requested_at) VALUES ($1, $2, $3);",[e?.user_id,s?.token,new Date().toISOString()])},add_role:async(s={})=>{const[e]=await process.databases._users?.query("SELECT * FROM roles WHERE role = $1;",[s?.role]);return!e&&s?.role?(await process.databases._users?.query("INSERT INTO roles(role) VALUES ($1);",[s?.role]),{_id:s?.user_id,action:"add",role:s?.role,ok:!0,error:null}):{action:"add",role:s?.role,ok:!1,error:s?.role?`Role already exists: ${s?.role}.`:"Must pass a name for role to add."}},add_session:async(s={})=>{await process.databases._users?.query("INSERT INTO users_sessions(user_id, token, token_expires_at) VALUES ($1, $2, $3);",[s?.user_id,s?.session?.token,s?.session?.token_expires_at])},create_email_verification_token:async(s={})=>{const e=_(16);return await process.databases._users?.query("INSERT INTO users_verify_email_tokens(user_id, token) VALUES ($1, $2);",[s?.user_id,e]),e},create_user:async(s={})=>{const e=_(16),r=["user_id",...Object.keys(s||{})||[]].map(o=>u(o))?.join(","),a=[e,...Object.values(s)||[]];return await process.databases._users?.query(`INSERT INTO users(${r}) VALUES (${a?.map((o,t)=>`$${t+1}`)});`,a),e},delete_old_sessions:async(s={})=>{await process.databases._users?.query("DELETE FROM users_sessions WHERE user_id = $1 AND token_expires_at::timestamp < NOW()",[s?.user_id])},delete_user:async(s={})=>{await process.databases._users?.query("DELETE FROM users WHERE user_id = $1",[s?.user_id])},existing_user:async(s={})=>{let e,r;if(s?.email_address){const[a]=await process.databases._users?.query("SELECT * FROM users WHERE email_address = $1;",[s?.email_address]);e=a}if(s?.username){const[a]=await process.databases._users?.query("SELECT * FROM users WHERE username = $1;",[s?.username]);r=a}return e||r?{existing_email_address:e?.email_address,existing_username:r?.username}:null},get_existing_session:async(s={})=>{const e=await process.databases._users?.query("SELECT * FROM users_sessions WHERE user_id = $1;",[s.user_id]);return e?.length>0?e.sort((a,o)=>a.token_expires_at>o.token_expires_at?-1:1).shift():null},get_password_reset_token:async(s={})=>{const[e]=await process.databases._users?.query("SELECT * FROM users_password_reset_tokens WHERE user_id = $1",[s?.user_id]);return e&&e?.token||null},grant_role:async(s={})=>{if(await process.databases._users?.query("SELECT * FROM users WHERE user_id = $1;",[s?.user_id])){await process.databases._users?.query("INSERT INTO users_roles(user_id, role) VALUES ($1, $2) ON CONFLICT DO NOTHING;",[s?.user_id,s?.role]);const[r]=await process.databases._users?.query("SELECT * FROM roles WHERE role = $1;",[s?.role]);return r||await process.databases._users?.query("INSERT INTO roles(role) VALUES ($1) ON CONFLICT DO NOTHING;",[s?.role]),{_id:s?.user_id,action:"grant",role:s?.role,ok:!0,error:null}}return{_id:s?.user_id,action:"grant",role:s?.role,ok:!1,error:`User not found with the _id ${s?.user_id}.`}},list_roles:async()=>(await process.databases._users?.query("SELECT * FROM roles;")||[]).map(({role:e})=>e),mark_email_verified_at:async(s={})=>{await process.databases._users?.query("UPDATE users SET email_verified = true, email_verified_at = $1 WHERE user_id = $2;",[new Date().toISOString(),s?.user_id]),await process.databases._users?.query("DELETE FROM users_verify_email_tokens WHERE token = $1",[s?.token])},remove_reset_token:async(s={})=>{await process.databases._users?.query("DELETE FROM users_password_reset_tokens WHERE user_id = $1 AND token = $2;",[s?.user_id,s?.token]);const[e]=await process.databases._users?.query("SELECT * FROM users WHERE user_id = $1;",[s?.user_id]);return e},remove_role:async(s={})=>{const[e]=await process.databases._users?.query("SELECT * FROM roles WHERE role = $1;",[s?.role]);return e?(await process.databases._users?.query("DELETE FROM users_roles WHERE role = $1;",[s?.role]),await process.databases._users?.query("DELETE FROM roles WHERE role = $1;",[s?.role]),{_id:s?.user_id,action:"remove",role:s?.role,ok:!0,error:null}):{action:"add",role:s?.role,ok:!1,error:`Could not find an existing role with the name ${s?.role}.`}},reset_user_sessions:async(s={})=>{await process.databases._users?.query("DELETE FROM users_sessions WHERE user_id = $1;",[s.user_id])},revoke_role:async(s={})=>await process.databases._users?.query("SELECT * FROM users WHERE user_id = $1;",[s?.user_id])?(await process.databases._users?.query("DELETE FROM users_roles WHERE user_id = $1 AND role = $2;",[s?.user_id,s?.role]),{_id:s?.user_id,action:"revoke",role:s?.role,ok:!0,error:null}):{_id:s?.user_id,action:"revoke",role:s?.role,ok:!1,error:`User not found with the _id ${s?.user_id}.`},set_new_password:async(s={})=>{await process.databases._users?.query("UPDATE users SET password = $1 WHERE user_id = $2;",[s?.hashed_password,s?.user_id])},user:async(s={})=>{if(s?.email_address){const[e]=await process.databases._users?.query("SELECT * FROM users WHERE email_address = $1;",[s?.email_address]);return e}if(s?.username){const[e]=await process.databases._users?.query("SELECT * FROM users WHERE username = $1;",[s?.username]);return e}if(s?._id){const[e]=await process.databases._users?.query("SELECT * FROM users WHERE user_id = $1;",[s?._id]);return e}return null},user_has_role:async(s={})=>{if(await process.databases._users?.query("SELECT * FROM users WHERE user_id = $1;",[s?.user_id])){const[r]=await process.databases._users?.query("SELECT * FROM users_roles WHERE user_id = $1 AND role = $2;",[s?.user_id,s?.role]);return!!r}return!1},user_with_login_token:async(s={})=>{const[e]=await process.databases._users?.query("SELECT user_id FROM users_sessions WHERE token = $1;",[s.token]),[r]=await process.databases._users?.query("SELECT * FROM users WHERE user_id = $1;",[e?.user_id]);return r},user_with_reset_token:async(s={})=>{const[e]=await process.databases._users?.query("SELECT user_id FROM users_password_reset_tokens WHERE token = $1;",[s["passwordResetTokens.token"]]),[r]=await process.databases._users?.query("SELECT * FROM users WHERE user_id = $1;",[e?.user_id]);return r},user_with_verify_email_token:async(s={})=>{const[e]=await process.databases._users?.query("SELECT user_id FROM users_verify_email_tokens WHERE token = $1;",[s.token]),[r]=await process.databases._users?.query("SELECT * FROM users WHERE user_id = $1;",[e?.user_id]);return r}};var n=i;export{n as default};
