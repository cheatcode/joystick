import d from"chalk";import h from"fs";import c from"os";import b from"../../lib/generate_id.js";import l from"../databases/get_target_database_connection.js";import f from"../databases/queries/map.js";import _ from"../../lib/timestamps.js";import i from"../../lib/types.js";import p from"../../test/track_function_call.js";class m{constructor(t="",e={}){this.init_database=this.init_database.bind(this),this.machine_id=h.readFileSync(`${c.homedir()}/.cheatcode/MACHINE_ID`,"utf-8")?.trim().replace(/\n/g,""),this.name=t,this.options={concurrent_jobs:1,...e},this.init_database(this?.options?.external,this?.options?.database?.provider)}async init_database(t=!1,e=null){const n=e||l("queues")?.provider,s=f[n]?.queues,o=this._get_database_connection();i.is_object(o)&&i.is_object(s)&&(this.db=Object.entries(s||{})?.reduce((a={},[r,u])=>(a[r]=u.bind({db:o,machine_id:this.machine_id,queue:{name:this.name,options:this.options}}),a),{_connection:o}),t||(await this.db.initialize_database(n),console.log("POST INIT",this.options),(this?.options?.runOnStartup||this?.options?.run_on_startup)&&this.run()))}_get_database_connection(){if(this?.options?.database){const{provider:t,name:e}=this?.options?.database,n=process.databases&&process.databases[t]&&process.databases[t][e];return n||console.warn(d.red(`Connection to database ${t}.${e} not found on process. Cannot start queue.`)),n||null}return process.databases._queues}async add(t={}){const e=(t?.nextRunAt||t?.next_run_at)==="now"||!t?.nextRunAt&&!t?.next_run_at?_.get_future_time():t?.nextRunAt||t?.next_run_at,n={_id:b(16),status:"pending",environment:process.env.NODE_ENV,next_run_at:e,job:t?.job,payload:t?.payload},s=this?.options?.jobs&&this?.options?.jobs[t?.job];if(s&&(i.is_function(s?.preflight?.onBeforeAdd)||i.is_function(s?.preflight?.on_before_add))&&!await(s?.preflight?.onBeforeAdd||s?.preflight?.on_before_add)(n,this.db._connection,`queue_${this.name}`))return null;this.db.add_job(n)}async _check_if_okay_to_run_jobs(){return await this._get_number_of_jobs_running()<(this.options.concurrentJobs||this.options.concurrent_jobs||1)}_get_number_of_jobs_running(){return this.db.count_jobs("running")}_handle_requeue_jobs_running_before_restart(){if(this.db)return!this.options.retryJobsRunningBeforeRestart&&!this.options.retry_jobs_running_before_restart?this.db.delete_incomplete_jobs_for_machine():this.db.set_jobs_for_machine_pending()}run(){this.db&&(process.env.NODE_ENV!=="test"&&console.log(`Starting ${this.name} queue...`),this._handle_requeue_jobs_running_before_restart().then(()=>{setInterval(async()=>{if(await this._check_if_okay_to_run_jobs()&&!process.env.HALT_QUEUES){const e=await this.db.get_next_job_to_run();this.handle_next_job(e)}},300)}))}async handle_next_job(t={}){const e=this.options.jobs[t?.job];if(t&&t?.job&&e&&i.is_function(e?.run))try{if((i.is_function(e?.preflight?.okayToRun)||i.is_function(e?.preflight?.okay_to_run))&&!await(e?.preflight?.okayToRun||e?.preflight?.okay_to_run)(t?.payload,t))return this._handle_requeue_job(t,_.get_future_time("seconds",e?.preflight?.requeueDelayInSeconds||e?.preflight?.requeue_delay_in_seconds||10));if((i.is_number(e?.maxAttempts)||i.is_number(e?.max_attempts))&&t?.attempts>=parseInt(e?.maxAttempts||e?.max_attempts,10))return(i.is_function(e?.onMaxAttemptsExhausted)||i.is_function(e?.on_max_attempts_exhausted))&&await(e.onMaxAttemptsExhausted||e.on_max_attempts_exhausted)(t),this._handle_delete_job(t?._id);await this._log_attempt(t?._id),p(`node.queues.${this?.name}.jobs.${t?.job}`,[t?.payload]),await e.run(t?.payload,{...t,queue:this,completed:()=>this._handle_job_completed(t?._id),failed:n=>this._handle_job_failed(t,e,n),delete:()=>this._handle_delete_job(t?._id),requeue:(n="")=>this._handle_requeue_job(t,n)})}catch(n){console.warn(n),this._handle_job_failed(t,e,n)}}_log_attempt(t=""){return this.db.log_attempt(t)}_handle_job_completed(t=""){return this.db.set_job_completed(t)}_handle_job_failed(t={},e={},n=""){return e?.requeueOnFailure||e?.requeue_on_failure?this._handle_requeue_job(t,_.get_future_time("seconds",10)):this.db.set_job_failed(t?._id,n)}_handle_delete_job(t=""){return this.db.delete_job(t)}_handle_requeue_job(t={},e=null){return this.db.requeue_job(t?._id,e||_.get_future_time())}list(t=""){const e={};return t&&(e.status=t),this.db.get_jobs(e)}}var I=m;export{I as default};
