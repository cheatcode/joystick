import d from"chalk";import l from"fs";import h from"os";import b from"../../lib/generate_id.js";import m from"../databases/get_target_database_connection.js";import p from"../databases/queries/map.js";import _ from"../../lib/timestamps.js";import i from"../../lib/types.js";import f from"../../test/track_function_call.js";class g{constructor(e="",t={}){this.init_database=this.init_database.bind(this),this.machine_id=l.readFileSync(`${h.homedir()}/.cheatcode/MACHINE_ID`,"utf-8")?.trim().replace(/\n/g,""),this.name=e,this.options={concurrent_jobs:1,...t},this.init_database(this?.options?.external,this?.options?.database?.provider)}async init_database(e=!1,t=null){const s=t||m("queues")?.provider,o=p[s]?.queues,n=this._get_database_connection();i.is_object(n)&&i.is_object(o)&&(this.db=Object.entries(o||{})?.reduce((r={},[c,a])=>(r[c]=a.bind({db:n,machine_id:this.machine_id,queue:{name:this.name,options:this.options}}),r),{connection:n}),e||(await this.db.initialize_database(s),(this?.options?.runOnStartup||this?.options?.run_on_startup)&&this.run()))}_get_database_connection(){if(this?.options?.database){const{provider:e,name:t}=this?.options?.database,s=process.databases&&process.databases[e]&&process.databases[e][t];return s||console.warn(d.red(`Connection to database ${e}.${t} not found on process. Cannot start queue.`)),s||null}return process.databases._queues}async add(e={}){const t=_.get_database_format(this?.db?._connection);let s;(e?.nextRunAt||e?.next_run_at)==="now"||!e?.nextRunAt&&!e?.next_run_at?s=_.get_future_time(null,0,{format:t}):s=_.normalize_date(e?.nextRunAt||e?.next_run_at,{format:t});const o={_id:b(16),status:"pending",environment:process.env.NODE_ENV,next_run_at:s,job:e?.job,payload:e?.payload},n=this?.options?.jobs&&this?.options?.jobs[e?.job];if(n&&(i.is_function(n?.preflight?.onBeforeAdd)||i.is_function(n?.preflight?.on_before_add))&&!await(n?.preflight?.onBeforeAdd||n?.preflight?.on_before_add)(o,this.db._connection,`queue_${this.name}`))return null;this.db.add_job(o)}async _check_if_okay_to_run_jobs(){return await this._get_number_of_jobs_running()<(this.options.concurrentJobs||this.options.concurrent_jobs||1)}_get_number_of_jobs_running(){return this.db.count_jobs("running")}_handle_requeue_jobs_running_before_restart(){if(this.db)return!this.options.retryJobsRunningBeforeRestart&&!this.options.retry_jobs_running_before_restart?this.db.delete_incomplete_jobs_for_machine():this.db.set_jobs_for_machine_pending()}run(){this.db&&(process.env.NODE_ENV!=="test"&&console.log(`Starting ${this.name} queue...`),this._handle_requeue_jobs_running_before_restart().then(()=>{this._start_queue_processor()}))}_start_queue_processor(){const e=this.db._connection?.constructor?.name?.toLowerCase()||this.db._connection?.client?.constructor?.name?.toLowerCase()||"unknown";e.includes("redis")?this._start_redis_event_driven_processor():e.includes("mongo")?this._start_mongodb_change_stream_processor():this._start_adaptive_polling_processor()}_start_redis_event_driven_processor(){const e=`queue_${this.name}_jobs`,t=this.db._connection.duplicate();t.subscribe(e),t.on("message",async(s,o)=>{s===e&&await this._process_available_jobs()}),this._process_available_jobs(),this._scheduled_job_interval=setInterval(()=>{this._process_available_jobs()},5e3)}_start_mongodb_change_stream_processor(){const e=this.db._connection.collection(`queue_${this.name}`),t=[{$match:{$or:[{operationType:"insert","fullDocument.status":"pending","fullDocument.environment":process.env.NODE_ENV},{operationType:"update","updateDescription.updatedFields.status":"pending","fullDocument.environment":process.env.NODE_ENV}]}}];this._change_stream=e.watch(t,{fullDocument:"updateLookup"}),this._change_stream.on("change",async s=>{await this._process_available_jobs()}),this._change_stream.on("error",s=>{console.warn(`MongoDB change stream error for queue ${this.name}:`,s),this._start_adaptive_polling_processor()}),this._process_available_jobs(),this._scheduled_job_interval=setInterval(()=>{this._process_available_jobs()},5e3)}_start_adaptive_polling_processor(){let e=100;const t=100,s=2e3,o=1.5,n=.8,r=async()=>{if(await this._check_if_okay_to_run_jobs()&&!process.env.HALT_QUEUES){const a=await this.db.get_next_job_to_run();a?(e=Math.max(t,e*n),this.handle_next_job(a)):e=Math.min(s,e*o)}else e=Math.min(s,e*o);this._poll_timeout=setTimeout(r,e)};r()}async _process_available_jobs(){if(await this._check_if_okay_to_run_jobs()&&!process.env.HALT_QUEUES){const t=await this.db.get_next_job_to_run();t&&(this.handle_next_job(t),setImmediate(()=>this._process_available_jobs()))}}async handle_next_job(e={}){const t=this.options.jobs[e?.job];if(e&&e?.job&&t&&i.is_function(t?.run))try{if((i.is_function(t?.preflight?.okayToRun)||i.is_function(t?.preflight?.okay_to_run))&&!await(t?.preflight?.okayToRun||t?.preflight?.okay_to_run)(e?.payload,e))return this._handle_requeue_job(e,_.get_future_time("seconds",t?.preflight?.requeueDelayInSeconds||t?.preflight?.requeue_delay_in_seconds||10));if((i.is_number(t?.maxAttempts)||i.is_number(t?.max_attempts))&&e?.attempts>=parseInt(t?.maxAttempts||t?.max_attempts,10))return(i.is_function(t?.onMaxAttemptsExhausted)||i.is_function(t?.on_max_attempts_exhausted))&&await(t.onMaxAttemptsExhausted||t.on_max_attempts_exhausted)(e),this._handle_delete_job(e?._id);await this._log_attempt(e?._id),f(`node.queues.${this?.name}.jobs.${e?.job}`,[e?.payload]),await t.run(e?.payload,{...e,queue:this,completed:()=>this._handle_job_completed(e?._id),failed:s=>this._handle_job_failed(e,t,s),delete:()=>this._handle_delete_job(e?._id),requeue:(s="")=>this._handle_requeue_job(e,s)})}catch(s){console.warn(s),this._handle_job_failed(e,t,s)}}_log_attempt(e=""){return this.db.log_attempt(e)}_handle_job_completed(e=""){return this.db.set_job_completed(e)}_handle_job_failed(e={},t={},s=""){const o=_.get_database_format(this?.db?._connection);return t?.requeueOnFailure||t?.requeue_on_failure?this._handle_requeue_job(e,_.get_future_time("seconds",10,{format:o})):this.db.set_job_failed(e?._id,s)}_handle_delete_job(e=""){return this.db.delete_job(e)}_handle_requeue_job(e={},t=null){let s;return t?s=this._normalize_date_for_db(t):s=this._normalize_date_for_db(new Date),this.db.requeue_job(e?._id,s)}_normalize_date_for_db(e){const t=_.get_database_format(this?.db?._connection);return _.normalize_date(e,{format:t})}stop(){this._scheduled_job_interval&&(clearInterval(this._scheduled_job_interval),this._scheduled_job_interval=null),this._poll_timeout&&(clearTimeout(this._poll_timeout),this._poll_timeout=null),this._change_stream&&(this._change_stream.close(),this._change_stream=null)}list(e=""){const t={};return e&&(t.status=e),this.db.get_jobs(t)}async normalize_job_dates(){if(!this.db)return{migrated:0,error:"No database connection available"};try{const e=_.get_database_format(this?.db?._connection)==="postgresql",t=await this.list();let s=0;for(const o of t){let n=!1;const r=["next_run_at","started_at","completed_at","failed_at"],c={};for(const a of r)if(o[a])try{e&&typeof o[a]!="string"?(c[a]=o[a].toISOString(),n=!0):!e&&typeof o[a]=="string"&&(c[a]=new Date(o[a]),n=!0)}catch(u){console.warn(`Could not normalize ${a} for job ${o._id}:`,u)}n&&(e?await this.db._connection.query(`
              UPDATE queue_${this.name}
              SET ${Object.keys(c).map((a,u)=>`${a} = $${u+2}`).join(", ")}
              WHERE _id = $1
            `,[o._id,...Object.values(c)]):await this.db._connection.collection(`queue_${this.name}`).updateOne({_id:o._id},{$set:c}),s++)}return{migrated:s,total:t.length}}catch(e){return console.error("Error normalizing job dates:",e),{migrated:0,error:e.message}}}}var A=g;export{A as default};
