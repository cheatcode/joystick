import f from"events";import j from"query-string";import*as g from"ws";import l from"../../test/track_function_call.js";import c from"../../lib/types.js";import p from"cluster";const m={};global.handle_websocket_message=t=>{const{emitter_name:r,event:e,payload:o}=t,s=joystick?.emitters[r];Array.isArray(s)&&s.forEach(n=>{n.emit(e,o)})};const S=(t={},r={})=>{t.on("upgrade",(e,o,s)=>{if(e?.url?.includes("/api/_websockets")){const n=(e?.url?.replace("/api/_websockets/","")?.split("?")||[])[0],a=r[n];a&&a.server.handleUpgrade(e,o,s,d=>{a.server.emit("connection",d,e)})}})},u=(t={},r={},e={})=>{const o=Object.assign(t,{params:r});(c.is_function(e?.onOpen)||c.is_function(e?.on_open))&&(e?.onOpen||e?.on_open)(o),t.on("message",s=>{const n=JSON.parse(s);c.is_function(e?.on_message)&&e?.on_message(n,t),v(n)}),t.on("close",(s=0,n="")=>{c.is_function(e?.on_close)&&e?.on_close(s,n?.toString(),t)})},E=(t="",r={},e={})=>{const o=new f,s=r?.id?`${t}_${r?.id}`:t;joystick?.emitters&&joystick?.emitters[s]?joystick.emitters[s].push(o):joystick.emitters={...joystick?.emitters||{},[s]:[o]},o.on("message",(n={})=>{e.send(JSON.stringify(n))}),o.on("progress",(n={})=>{e.send(JSON.stringify({type:"PROGRESS",...n}))})},$=(t={})=>{const[r,e]=t?.url?.split("?");return j.parse(e)},N=(t="",r={})=>{r?.server.on("connection",(e={},o={})=>{const s=$(o);E(t,s,e),u(e,s,r)})},i=(t="",r={},e=[])=>(l(`node.websockets.${t}.on_close`,e),r?.onClose||r?.on_close?(r?.onClose||r?.on_close)(...e):null),_=(t="",r={},e=[])=>(l(`node.websockets.${t}.on_message`,e),r?.onMessage||r?.on_message?(r?.onMessage||r?.on_message)(...e):null),y=(t="",r={},e=[])=>(l(`node.websockets.${t}.on_open`,e),r?.onOpen||r?.on_open?(r?.onOpen||r?.on_open)(...e):null),h=(t="")=>new g.WebSocketServer({noServer:!0,path:`/api/_websockets/${t}`}),J=(t={})=>({uploaders:{server:h("uploaders")},...Object.entries(t||{}).reduce((r={},[e,o])=>(r[e]={server:h(e),on_open:(...s)=>y(e,o,s),onOpen:(...s)=>y(e,o,s),on_message:(...s)=>_(e,o,s),onMessage:(...s)=>_(e,o,s),on_close:(...s)=>i(e,o,s),onClose:(...s)=>i(e,o,s)},r),{})}),v=(t,r=null)=>{const e={message:t,emitter_name:r};if(p.isPrimary){for(const o in p.workers)p.workers[o].send({type:"websocket_message",wrapped_message:e});O(e)}else process.send({type:"websocket_message",wrapped_message:e})},O=t=>{const{message:r,emitter_name:e}=t;if(Object.values(m).forEach(({server:o})=>{o.clients.forEach(s=>{s.readyState===g.OPEN&&s.send(JSON.stringify(r))})}),e){const o=joystick?.emitters[e];if(c.is_array(o))for(let s=0;s<o?.length;s+=1)o[s].emit("message",r)}},P=(t={},r={})=>{const e=J(t);Object.assign(m,e);const o=Object.entries(m);for(let s=0;s<o?.length;s+=1){const[n,a]=o[s];N(n,a)}S(r.express.server,m),p.isPrimary?p.on("message",(s,n)=>{n.type==="websocket_message"&&v(n.wrapped_message.message,n.wrapped_message.emitter_name)}):process.on("message",s=>{s.type==="websocket_message"&&O(s.wrapped_message)})};var W=P;export{W as default};
