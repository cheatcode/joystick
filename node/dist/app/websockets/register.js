import g from"events";import S from"query-string";import*as _ from"ws";import c from"../../test/track_function_call.js";import m from"../../lib/types.js";import p from"cluster";const l=new g,j=(n={},o={})=>{n.on("upgrade",(e,r,s)=>{if(e?.url?.includes("/api/_websockets")){const t=(e?.url?.replace("/api/_websockets/","")?.split("?")||[])[0],a=o[t];a&&a.server.handleUpgrade(e,r,s,i=>{a.server.emit("connection",i,e)})}})},d=(n={},o={},e={})=>{const r=Object.assign(n,{params:o});(m.is_function(e?.onOpen)||m.is_function(e?.on_open))&&(e?.onOpen||e?.on_open)(r),n.on("message",s=>{const t=JSON.parse(s);m.is_function(e?.on_message)&&e?.on_message(t,n),N(t)}),n.on("close",(s=0,t="")=>{m.is_function(e?.on_close)&&e?.on_close(s,t?.toString(),n)}),l.on("message",s=>{n.send(JSON.stringify(s))})},f=(n="",o={},e={})=>{const r=new g,s=o?.id?`${n}_${o?.id}`:n;joystick?.emitters&&joystick?.emitters[s]?joystick.emitters[s].push(r):joystick.emitters={...joystick?.emitters||{},[s]:[r]},r.on("message",(t={})=>{e.send(JSON.stringify(t))}),r.on("progress",(t={})=>{e.send(JSON.stringify({type:"PROGRESS",...t}))})},u=(n={})=>{const[o,e]=n?.url?.split("?");return S.parse(e)},$=(n="",o={})=>{o?.server.on("connection",(e={},r={})=>{const s=u(r);f(n,s,e),d(e,s,o)})},y=(n="",o={},e=[])=>(c(`node.websockets.${n}.on_close`,e),o?.onClose||o?.on_close?(o?.onClose||o?.on_close)(...e):null),v=(n="",o={},e=[])=>(c(`node.websockets.${n}.on_message`,e),o?.onMessage||o?.on_message?(o?.onMessage||o?.on_message)(...e):null),O=(n="",o={},e=[])=>(c(`node.websockets.${n}.on_open`,e),o?.onOpen||o?.on_open?(o?.onOpen||o?.on_open)(...e):null),h=(n="")=>new _.WebSocketServer({noServer:!0,path:`/api/_websockets/${n}`}),J=(n={})=>({uploaders:{server:h("uploaders")},...Object.entries(n||{}).reduce((o={},[e,r])=>(o[e]={server:h(e),on_open:(...s)=>O(e,r,s),onOpen:(...s)=>O(e,r,s),on_message:(...s)=>v(e,r,s),onMessage:(...s)=>v(e,r,s),on_close:(...s)=>y(e,r,s),onClose:(...s)=>y(e,r,s)},o),{})}),N=n=>{if(p.isPrimary){for(const o in p.workers)p.workers[o].send({type:"websocket_message",message:n});l.emit("message",n)}else process.send({type:"websocket_message",message:n})},C=(n={},o={})=>{const e=J(n),r=Object.entries(e);for(let s=0;s<r?.length;s+=1){const[t,a]=r[s];$(t,a)}j(o.express.server,e),p.isPrimary?p.on("message",(s,t)=>{t.type==="websocket_message"&&l.emit("message",t.message)}):process.on("message",s=>{s.type==="websocket_message"&&l.emit("message",s.message)})};var W=C;export{W as default};
