import m from"events";import h from"query-string";import*as O from"ws";import l from"../../test/track_function_call.js";import a from"../../lib/types.js";import p from"cluster";const g=new m,f=(r={},o={})=>{r.on("upgrade",(e,n,s)=>{if(e?.url?.includes("/api/_websockets")){const t=(e?.url?.replace("/api/_websockets/","")?.split("?")||[])[0],c=o[t];c&&c.server.handleUpgrade(e,n,s,$=>{c.server.emit("connection",$,e)})}})},P=(r={},o={},e={})=>{const n=Object.assign(r,{params:o});(a.is_function(e?.onOpen)||a.is_function(e?.on_open))&&(e?.onOpen||e?.on_open)(n),r.on("message",s=>{const t=JSON.parse(s);console.log(`[Process ${process.pid}] Received message:`,t),a.is_function(e?.on_message)&&e?.on_message(t,r),v(t)}),r.on("close",(s=0,t="")=>{a.is_function(e?.on_close)&&e?.on_close(s,t?.toString(),r)}),g.on("message",s=>{console.log(`[Process ${process.pid}] Sending shared message to WebSocket:`,s),r.send(JSON.stringify(s))})},j=(r="",o={},e={})=>{const n=new m,s=o?.id?`${r}_${o?.id}`:r;joystick?.emitters&&joystick?.emitters[s]?joystick.emitters[s].push(n):joystick.emitters={...joystick?.emitters||{},[s]:[n]},n.on("message",(t={})=>{e.send(JSON.stringify(t))}),n.on("progress",(t={})=>{e.send(JSON.stringify({type:"PROGRESS",...t}))})},u=(r={})=>{const[o,e]=r?.url?.split("?");return h.parse(e)},_=(r="",o={})=>{o?.server.on("connection",(e={},n={})=>{const s=u(n);j(r,s,e),P(e,s,o)})},i=(r="",o={},e=[])=>(l(`node.websockets.${r}.on_close`,e),o?.onClose||o?.on_close?(o?.onClose||o?.on_close)(...e):null),d=(r="",o={},e=[])=>(l(`node.websockets.${r}.on_message`,e),o?.onMessage||o?.on_message?(o?.onMessage||o?.on_message)(...e):null),y=(r="",o={},e=[])=>(l(`node.websockets.${r}.on_open`,e),o?.onOpen||o?.on_open?(o?.onOpen||o?.on_open)(...e):null),S=(r="")=>new O.WebSocketServer({noServer:!0,path:`/api/_websockets/${r}`}),W=(r={})=>({uploaders:{server:S("uploaders")},...Object.entries(r||{}).reduce((o={},[e,n])=>(o[e]={server:S(e),on_open:(...s)=>y(e,n,s),onOpen:(...s)=>y(e,n,s),on_message:(...s)=>d(e,n,s),onMessage:(...s)=>d(e,n,s),on_close:(...s)=>i(e,n,s),onClose:(...s)=>i(e,n,s)},o),{})}),v=r=>{if(console.log(`[Process ${process.pid}] Sharing message across cluster:`,r),p.isPrimary){for(const o in p.workers)console.log(`[Primary ${process.pid}] Sending message to worker ${o}`),p.workers[o].send({type:"websocket_message",message:r});g.emit("message",r)}else console.log(`[Worker ${process.pid}] Sending message to primary`),process.send({type:"websocket_message",message:r})},R=(r={},o={})=>{console.log(`[Process ${process.pid}] Registering WebSocket servers`);const e=W(r),n=Object.entries(e);for(let s=0;s<n?.length;s+=1){const[t,c]=n[s];_(t,c)}f(o.express.server,e),p.isPrimary?(console.log(`[Primary ${process.pid}] Setting up message handling for primary`),p.on("message",(s,t)=>{t.type==="websocket_message"&&(console.log(`[Primary ${process.pid}] Received message from worker ${s.id}:`,t.message),v(t.message))})):(console.log(`[Worker ${process.pid}] Setting up message handling for worker`),process.on("message",s=>{s.type==="websocket_message"&&(console.log(`[Worker ${process.pid}] Received message from primary:`,s.message),g.emit("message",s.message))}))};var x=R;export{x as default};
