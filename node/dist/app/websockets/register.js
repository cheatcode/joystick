import h from"events";import S from"query-string";import*as f from"ws";import a from"../../test/track_function_call.js";import p from"../../lib/types.js";import l from"cluster";const _=(r={},o={})=>{r.on("upgrade",(e,n,s)=>{if(e?.url?.includes("/api/_websockets")){const t=(e?.url?.replace("/api/_websockets/","")?.split("?")||[])[0],c=o[t];c&&c.server.handleUpgrade(e,n,s,v=>{c.server.emit("connection",v,e)})}})},P=(r={},o={},e={})=>{const n=Object.assign(r,{params:o});(p.is_function(e?.onOpen)||p.is_function(e?.on_open))&&(e?.onOpen||e?.on_open)(n),r.on("message",s=>{const t=JSON.parse(s);console.log(`[Process ${process.pid}] Received message:`,t),p.is_function(e?.on_message)&&e?.on_message(t,r),g(t)}),r.on("close",(s=0,t="")=>{p.is_function(e?.on_close)&&e?.on_close(s,t?.toString(),r)})},O=(r="",o={},e={})=>{const n=new h,s=o?.id?`${r}_${o?.id}`:r;joystick?.emitters&&joystick?.emitters[s]?joystick.emitters[s].push(n):joystick.emitters={...joystick?.emitters||{},[s]:[n]},n.on("message",(t={})=>{e.send(JSON.stringify(t))}),n.on("progress",(t={})=>{e.send(JSON.stringify({type:"PROGRESS",...t}))})},u=(r={})=>{const[o,e]=r?.url?.split("?");return S.parse(e)},j=(r="",o={})=>{o?.server.on("connection",(e={},n={})=>{const s=u(n);O(r,s,e),P(e,s,o)})},m=(r="",o={},e=[])=>(a(`node.websockets.${r}.on_close`,e),o?.onClose||o?.on_close?(o?.onClose||o?.on_close)(...e):null),i=(r="",o={},e=[])=>(a(`node.websockets.${r}.on_message`,e),o?.onMessage||o?.on_message?(o?.onMessage||o?.on_message)(...e):null),d=(r="",o={},e=[])=>(a(`node.websockets.${r}.on_open`,e),o?.onOpen||o?.on_open?(o?.onOpen||o?.on_open)(...e):null),$=(r="")=>new f.WebSocketServer({noServer:!0,path:`/api/_websockets/${r}`}),R=(r={})=>({uploaders:{server:$("uploaders")},...Object.entries(r||{}).reduce((o={},[e,n])=>(o[e]={server:$(e),on_open:(...s)=>d(e,n,s),onOpen:(...s)=>d(e,n,s),on_message:(...s)=>i(e,n,s),onMessage:(...s)=>i(e,n,s),on_close:(...s)=>m(e,n,s),onClose:(...s)=>m(e,n,s)},o),{})}),g=r=>{if(console.log(`[Process ${process.pid}] Sharing message across cluster:`,r),l.isPrimary){for(const o in l.workers)console.log(`[Primary ${process.pid}] Sending message to worker ${o}`),l.workers[o].send({type:"websocket_message",message:r});y(r)}else console.log(`[Worker ${process.pid}] Sending message to primary`),process.send({type:"websocket_message",message:r})},y=r=>{console.log(`[Process ${process.pid}] Handling shared message:`,r);const{emitter_name:o,event:e,payload:n}=r,s=joystick?.emitters[o];if(p.is_array(s)){console.log(`[Process ${process.pid}] Found ${s.length} emitters for ${o}`);for(let t=0;t<s?.length;t+=1){const c=s[t];console.log(`[Process ${process.pid}] Emitting ${e} event to emitter ${t}`),c.emit(e,n)}}else console.log(`[Process ${process.pid}] No emitters found for ${o}`)},W=(r={},o={})=>{console.log(`[Process ${process.pid}] Registering WebSocket servers`);const e=R(r),n=Object.entries(e);for(let s=0;s<n?.length;s+=1){const[t,c]=n[s];j(t,c)}_(o.express.server,e),l.isPrimary?(console.log(`[Primary ${process.pid}] Setting up message handling for primary`),l.on("message",(s,t)=>{t.type==="websocket_message"&&(console.log(`[Primary ${process.pid}] Received message from worker ${s.id}:`,t.message),g(t.message))})):(console.log(`[Worker ${process.pid}] Setting up message handling for worker`),process.on("message",s=>{s.type==="websocket_message"&&(console.log(`[Worker ${process.pid}] Received message from primary:`,s.message),y(s.message))}))};var M=W;export{M as default,g as share_message_across_cluster};
