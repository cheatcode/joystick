import v from"events";import h from"query-string";import*as O from"ws";import g from"../../test/track_function_call.js";import a from"../../lib/types.js";import p from"cluster";const d=new v,P=(r={},o={})=>{r.on("upgrade",(e,t,s)=>{if(e?.url?.includes("/api/_websockets")){const n=(e?.url?.replace("/api/_websockets/","")?.split("?")||[])[0],c=o[n];c&&c.server.handleUpgrade(e,t,s,l=>{c.server.emit("connection",l,e)})}})},j=(r={},o={},e={})=>{const t=Object.assign(r,{params:o});(a.is_function(e?.onOpen)||a.is_function(e?.on_open))&&(e?.onOpen||e?.on_open)(t),r.on("message",s=>{const n=JSON.parse(s);console.log(`[Process ${process.pid}] Received message:`,n),a.is_function(e?.on_message)&&e?.on_message(n,r),y(n)}),r.on("close",(s=0,n="")=>{a.is_function(e?.on_close)&&e?.on_close(s,n?.toString(),r)}),d.on("message",s=>{console.log(`[Process ${process.pid}] Sending shared message to WebSocket:`,s),r.send(JSON.stringify(s))})},k=(r="",o={},e={})=>{const t=new v,s=o?.id?`${r}_${o?.id}`:r;joystick?.emitters&&joystick?.emitters[s]?joystick.emitters[s].push(t):joystick.emitters={...joystick?.emitters||{},[s]:[t]},t.on("message",(n={})=>{e.send(JSON.stringify(n))}),t.on("progress",(n={})=>{e.send(JSON.stringify({type:"PROGRESS",...n}))})},u=(r={})=>{const[o,e]=r?.url?.split("?");return h.parse(e)},R=(r="",o={})=>{o?.server.on("connection",(e={},t={})=>{const s=u(t);k(r,s,e),j(e,s,o)})},$=(r="",o={},e=[])=>(g(`node.websockets.${r}.on_close`,e),o?.onClose||o?.on_close?(o?.onClose||o?.on_close)(...e):null),S=(r="",o={},e=[])=>(g(`node.websockets.${r}.on_message`,e),o?.onMessage||o?.on_message?(o?.onMessage||o?.on_message)(...e):null),_=(r="",o={},e=[])=>(g(`node.websockets.${r}.on_open`,e),o?.onOpen||o?.on_open?(o?.onOpen||o?.on_open)(...e):null),f=(r="")=>new O.WebSocketServer({noServer:!0,path:`/api/_websockets/${r}`}),W=(r={})=>({uploaders:{server:f("uploaders")},...Object.entries(r||{}).reduce((o={},[e,t])=>(o[e]={server:f(e),on_open:(...s)=>_(e,t,s),onOpen:(...s)=>_(e,t,s),on_message:(...s)=>S(e,t,s),onMessage:(...s)=>S(e,t,s),on_close:(...s)=>$(e,t,s),onClose:(...s)=>$(e,t,s)},o),{})}),y=r=>{if(console.log(`[Process ${process.pid}] Sharing message across cluster:`,r),p.isPrimary){for(const o in p.workers)console.log(`[Primary ${process.pid}] Sending message to worker ${o}`),p.workers[o].send({type:"websocket_message",message:r});d.emit("message",r)}else console.log(`[Worker ${process.pid}] Sending message to primary`),process.send({type:"websocket_message",message:r})},J=(r={},o={})=>{console.log(`[Process ${process.pid}] Registering WebSocket servers`);const e=W(r),t=Object.entries(e);for(let s=0;s<t?.length;s+=1){const[n,c]=t[s];R(n,c)}P(o.express.server,e),p.isPrimary?(console.log(`[Primary ${process.pid}] Setting up message handling for primary`),p.on("message",(s,n)=>{if(n.type==="websocket_message")console.log(`[Primary ${process.pid}] Received message from worker ${s.id}:`,n.message),y(n.message);else if(n.type==="websocket_event"){console.log(`[Primary ${process.pid}] Received websocket_event from worker ${s.id}:`,n);for(const c in p.workers)p.workers[c].send(n)}})):(console.log(`[Worker ${process.pid}] Setting up message handling for worker`),process.on("message",s=>{if(s.type==="websocket_message")console.log(`[Worker ${process.pid}] Received message from primary:`,s.message),d.emit("message",s.message);else if(s.type==="websocket_event"){console.log(`[Worker ${process.pid}] Received websocket_event from primary:`,s);const{emitter_id:n,event_name:c,payload:l}=s,i=joystick?.emitters[n];if(a.is_array(i))for(let m=0;m<i?.length;m+=1)i[m].emit(c,l)}}))};var U=J;export{U as default,y as share_message_across_cluster};
