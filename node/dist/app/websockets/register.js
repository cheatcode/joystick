import f from"events";import S from"query-string";import*as i from"ws";import g from"../../test/track_function_call.js";import c from"../../lib/types.js";import p from"cluster";const l={};global.handle_websocket_message=r=>{const{emitter_name:o,event:e,payload:n}=r,s=joystick?.emitters[o];Array.isArray(s)&&s.forEach(t=>{t.emit(e,n)})};const O=(r={},o={})=>{r.on("upgrade",(e,n,s)=>{if(e?.url?.includes("/api/_websockets")){const t=(e?.url?.replace("/api/_websockets/","")?.split("?")||[])[0],a=o[t];a&&a.server.handleUpgrade(e,n,s,v=>{a.server.emit("connection",v,e)})}})},P=(r={},o={},e={})=>{const n=Object.assign(r,{params:o});(c.is_function(e?.onOpen)||c.is_function(e?.on_open))&&(e?.onOpen||e?.on_open)(n),r.on("message",s=>{const t=JSON.parse(s);console.log(`[Process ${process.pid}] Received message:`,t),c.is_function(e?.on_message)&&e?.on_message(t,r),m(t)}),r.on("close",(s=0,t="")=>{c.is_function(e?.on_close)&&e?.on_close(s,t?.toString(),r)})},j=(r="",o={},e={})=>{const n=new f,s=o?.id?`${r}_${o?.id}`:r;joystick?.emitters&&joystick?.emitters[s]?joystick.emitters[s].push(n):joystick.emitters={...joystick?.emitters||{},[s]:[n]},n.on("message",(t={})=>{e.send(JSON.stringify(t))}),n.on("progress",(t={})=>{e.send(JSON.stringify({type:"PROGRESS",...t}))})},u=(r={})=>{const[o,e]=r?.url?.split("?");return S.parse(e)},E=(r="",o={})=>{o?.server.on("connection",(e={},n={})=>{const s=u(n);j(r,s,e),P(e,s,o)})},d=(r="",o={},e=[])=>(g(`node.websockets.${r}.on_close`,e),o?.onClose||o?.on_close?(o?.onClose||o?.on_close)(...e):null),y=(r="",o={},e=[])=>(g(`node.websockets.${r}.on_message`,e),o?.onMessage||o?.on_message?(o?.onMessage||o?.on_message)(...e):null),$=(r="",o={},e=[])=>(g(`node.websockets.${r}.on_open`,e),o?.onOpen||o?.on_open?(o?.onOpen||o?.on_open)(...e):null),_=(r="")=>new i.WebSocketServer({noServer:!0,path:`/api/_websockets/${r}`}),N=(r={})=>({uploaders:{server:_("uploaders")},...Object.entries(r||{}).reduce((o={},[e,n])=>(o[e]={server:_(e),on_open:(...s)=>$(e,n,s),onOpen:(...s)=>$(e,n,s),on_message:(...s)=>y(e,n,s),onMessage:(...s)=>y(e,n,s),on_close:(...s)=>d(e,n,s),onClose:(...s)=>d(e,n,s)},o),{})}),m=(r,o=null)=>{console.log(`[Process ${process.pid}] Sharing message across cluster:`,r);const e={message:r,emitter_name:o};if(p.isPrimary){for(const n in p.workers)console.log(`[Primary ${process.pid}] Sending message to worker ${n}`),p.workers[n].send({type:"websocket_message",wrapped_message:e});h(e)}else console.log(`[Worker ${process.pid}] Sending message to primary`),process.send({type:"websocket_message",wrapped_message:e})},h=r=>{console.log(`[Process ${process.pid}] Handling shared message:`,r);const{message:o,emitter_name:e}=r;if(Object.values(l).forEach(({server:n})=>{n.clients.forEach(s=>{s.readyState===i.OPEN&&(console.log(`[Process ${process.pid}] Sending message to client`),s.send(JSON.stringify(o)))})}),e){const n=joystick?.emitters[e];if(c.is_array(n)){console.log(`[Process ${process.pid}] Found ${n.length} emitters for ${e}`);for(let s=0;s<n?.length;s+=1){const t=n[s];console.log(`[Process ${process.pid}] Emitting message to emitter ${s}`),t.emit("message",o)}}else console.log(`[Process ${process.pid}] No emitters found for ${e}`)}},R=(r={},o={})=>{console.log(`[Process ${process.pid}] Registering WebSocket servers`);const e=N(r);Object.assign(l,e);const n=Object.entries(l);for(let s=0;s<n?.length;s+=1){const[t,a]=n[s];E(t,a)}O(o.express.server,l),p.isPrimary?(console.log(`[Primary ${process.pid}] Setting up message handling for primary`),p.on("message",(s,t)=>{t.type==="websocket_message"&&(console.log(`[Primary ${process.pid}] Received message from worker ${s.id}:`,t.wrapped_message),m(t.wrapped_message.message,t.wrapped_message.emitter_name))})):(console.log(`[Worker ${process.pid}] Setting up message handling for worker`),process.on("message",s=>{s.type==="websocket_message"&&(console.log(`[Worker ${process.pid}] Received message from primary:`,s.wrapped_message),h(s.wrapped_message))}))};var M=R;export{M as default,m as share_message_across_cluster};
