import _ from"./format_api_error.js";import c from"./get_api_context.js";import l from"./get_api_url_component.js";import y from"./handle_api_error.js";import g from"./set.js";import w from"../../lib/types.js";import h from"./validate_session.js";const S=(n={},a=[],m={},p={})=>{for(let s=0;s<a?.length;s+=1){const[o,i]=a[s];n.post(`/api/_setters/${l(o)}`,...w.is_array(i?.middleware)?i?.middleware:[],async(e={},t={})=>{if(process.databases?._sessions&&!await h(e,t))return t.status(403).send(JSON.stringify({errors:[_(new Error("Unauthorized request."))]}));const u=await c(e,t,m),d=e?.body?.input||null,f=e?.body?.output||null;g({set_name:o,set_options:{input:d,output:f},setter_definition:i,request_context:u,api_schema_options:p}).then(r=>t.status(200).send(JSON.stringify(r))).catch(r=>{y(`api.setters.${o}`,r,t)})}),n.post("/api/_setters/:setter_name",(e={},t={})=>t.status(404).send(JSON.stringify({errors:[_(new Error(`Setter ${e?.params?.setter_name} not found`))]})))}};var E=S;export{E as default};
