const i=(o="")=>(process.caches||(process.caches={}),process.caches[o]||(process.caches[o]=new Map),{add:(s={})=>{const e=crypto.randomUUID();process.caches[o].set(e,s)},find:(s=null)=>{const e=Array.from(process.caches[o].values());return s?e.filter(t=>t[s[0]]===s[1]):e},find_one:(s=null)=>{if(!s)return null;for(const e of process.caches[o].values())if(e[s[0]]===s[1])return e;return null},set:(s=[])=>{const e=new Map;for(const t of s){const c=crypto.randomUUID();e.set(c,t)}process.caches[o]=e},update:([s="",e=""],t={})=>{for(const[c,r]of process.caches[o].entries())if(r[s]===e){process.caches[o].set(c,{...r,...t});break}},remove:([s="",e=""])=>{for(const[t,c]of process.caches[o].entries())c[s]===e&&process.caches[o].delete(t)}});var f=i;export{f as default};
