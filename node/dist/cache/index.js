import v from"../app/databases/get_target_database_connection.js";import y from"../lib/generate_id.js";const O=(f="",t={})=>{const p={ttl:null,max_items:null,...t},o=v("cache");return o?.provider==="redis"?b(f,o.connection,p):k(f,p)},k=(f,t={})=>{const{ttl:p,max_items:o}=t,w=i=>{const l=Date.now();return{...i,_cache_created_at:l,_cache_accessed_at:l}},e=()=>{if(!p||!process.caches[f])return;const i=Date.now(),l=p*1e3;process.caches[f]=process.caches[f].filter(a=>i-a._cache_created_at<l)},m=()=>{!o||!process.caches[f]||process.caches[f].length>o&&(process.caches[f].sort((i,l)=>l._cache_accessed_at-i._cache_accessed_at),process.caches[f]=process.caches[f].slice(0,o))},x=i=>(i._cache_accessed_at=Date.now(),i);return{add:(i={})=>{e();const l=w(i);process.caches[f]=[...process.caches[f]||[],l],m()},find:(i=null)=>(e(),(i?process.caches[f]?.filter(a=>a[i[0]]===i[1]):process.caches[f])?.map(x)||[]),find_one:(i=null)=>{e();const l=i?process.caches[f]?.find(a=>a[i[0]]===i[1]):null;return l?x(l):null},set:(i=[])=>{const l=i.map(w);process.caches[f]=l,m()},update:([i="",l=""],a={})=>{e();const r=process.caches[f]?.findIndex((s={})=>s[i]===l);typeof r=="number"&&(process.caches[f][r]={...process.caches[f][r]||{},...a,_cache_accessed_at:Date.now()})},remove:([i="",l=""])=>{process.caches[f]&&(process.caches[f]=process.caches[f].filter((a={})=>a[i]!==l))}}},b=(f,t,p={})=>{const{ttl:o,max_items:w}=p,e=`cache:${f}`,m=`${e}:lru`,x=async()=>{if(!w)return;const a=await t.scard(`${e}:index`);if(a>w){const r=a-w,s=await t.zrange(m,0,r-1);for(const d of s)await l(d)}},i=async a=>{w&&await t.zadd(m,{score:Date.now(),value:a})},l=async a=>{const r=`${e}:${a}`,s=await t.hget(r,"data");if(s){const d=JSON.parse(s);for(const[c,$]of Object.entries(d))c!=="_cache_id"&&(await t.srem(`${e}:field:${c}:${$}`,a),await t.scard(`${e}:field:${c}:${$}`)===0&&await t.del(`${e}:field:${c}:${$}`))}await t.del(r),await t.srem(`${e}:index`,a),await t.zrem(m,a)};return{add:async(a={})=>{a._cache_id||(a._cache_id=y(16));const r=`${e}:${a._cache_id}`;await t.hset(r,"data",JSON.stringify(a)),await t.sadd(`${e}:index`,a._cache_id),await i(a._cache_id);for(const[s,d]of Object.entries(a))s!=="_cache_id"&&await t.sadd(`${e}:field:${s}:${d}`,a._cache_id);if(o){const s=[r,`${e}:index`];for(const[d,c]of Object.entries(a))d!=="_cache_id"&&s.push(`${e}:field:${d}:${c}`);w&&s.push(m);for(const d of s)await t.expire(d,o)}await x()},find:async(a=null)=>{if(!a){const $=await t.smembers(`${e}:index`),u=[];for(const h of $){const _=await t.hget(`${e}:${h}`,"data");_?(u.push(JSON.parse(_)),await i(h)):(await t.srem(`${e}:index`,h),await t.zrem(m,h))}return u}const[r,s]=a,d=await t.smembers(`${e}:field:${r}:${s}`),c=[];for(const $ of d){const u=await t.hget(`${e}:${$}`,"data");u?(c.push(JSON.parse(u)),await i($)):(await t.srem(`${e}:field:${r}:${s}`,$),await t.srem(`${e}:index`,$),await t.zrem(m,$))}return c},find_one:async(a=null)=>{if(!a)return null;const[r,s]=a,d=await t.smembers(`${e}:field:${r}:${s}`);if(d.length>0){const c=d[0],$=await t.hget(`${e}:${c}`,"data");if($)return await i(c),JSON.parse($);await t.srem(`${e}:field:${r}:${s}`,c),await t.srem(`${e}:index`,c),await t.zrem(m,c)}return null},set:async(a=[])=>{const r=await t.smembers(`${e}:index`);if(r.length>0){const s=t.client.multi();for(const c of r)s.del(`${e}:${c}`);const d=await t.client.keys(`${e}:field:*`);for(const c of d)s.del(c);s.del(`${e}:index`),s.del(m),await s.exec()}for(const s of a)await b(f,t,p).add(s)},update:async([a="",r=""],s={})=>{const d=await t.smembers(`${e}:field:${a}:${r}`);if(d.length>0){const c=d[0],$=`${e}:${c}`,u=await t.hget($,"data");if(u){const h=JSON.parse(u),_={...h,...s};for(const[n,g]of Object.entries(h))n!=="_cache_id"&&await t.srem(`${e}:field:${n}:${g}`,c);o?(await t.hset($,"data",JSON.stringify(_)),await t.expire($,o)):await t.hset($,"data",JSON.stringify(_)),await i(c);for(const[n,g]of Object.entries(_))n!=="_cache_id"&&(await t.sadd(`${e}:field:${n}:${g}`,c),o&&await t.expire(`${e}:field:${n}:${g}`,o));o&&(await t.expire(`${e}:index`,o),w&&await t.expire(m,o))}}},remove:async([a="",r=""])=>{const s=await t.smembers(`${e}:field:${a}:${r}`);for(const d of s)await l(d)}}};var S=O;export{S as default};
