import b from"../app/databases/get_target_database_connection.js";import v from"../lib/generate_id.js";const y=(r="",t={})=>{const $={ttl:null,max_items:null,...t},m=b("cache");return m?.provider==="redis"?O(r,m.connection,$):J(r,$)},J=(r,t={})=>{const{ttl:$,max_items:m}=t,u=e=>{const f=Date.now();return{...e,_cache_created_at:f,_cache_accessed_at:f}},s=()=>{if(!$||!process.caches[r])return;const e=Date.now(),f=$*1e3;process.caches[r]=process.caches[r].filter(a=>e-a._cache_created_at<f)},w=()=>{!m||!process.caches[r]||process.caches[r].length>m&&(process.caches[r].sort((e,f)=>f._cache_accessed_at-e._cache_accessed_at),process.caches[r]=process.caches[r].slice(0,m))},g=e=>(e._cache_accessed_at=Date.now(),e);return{add:(e={})=>{s();const f=u(e);process.caches[r]=[...process.caches[r]||[],f],w()},find:(e=null)=>(s(),(e?process.caches[r]?.filter(a=>a[e[0]]===e[1]):process.caches[r])?.map(g)||[]),find_one:(e=null)=>{s();const f=e?process.caches[r]?.find(a=>a[e[0]]===e[1]):null;return f?g(f):null},set:(e=[])=>{const f=e.map(u);process.caches[r]=f,w()},update:([e="",f=""],a={})=>{s();const c=process.caches[r]?.findIndex((i={})=>i[e]===f);typeof c=="number"&&(process.caches[r][c]={...process.caches[r][c]||{},...a,_cache_accessed_at:Date.now()})},remove:([e="",f=""])=>{process.caches[r]&&(process.caches[r]=process.caches[r].filter((a={})=>a[e]!==f))}}},O=(r,t,$={})=>{const{ttl:m,max_items:u}=$,s=`cache:${r}`,w=`${s}:lru`,g=async()=>{if(!u)return;const a=await t.scard(`${s}:index`);if(a>u){const c=a-u,i=await t.zrange(w,0,c-1);for(const l of i)await f(l)}},e=async a=>{u&&await t.zadd(w,{score:Date.now(),value:a})},f=async a=>{const c=`${s}:${a}`,i=await t.hget(c,"data");if(i){const l=JSON.parse(i);for(const[d,o]of Object.entries(l))d!=="_cache_id"&&await t.srem(`${s}:field:${d}:${o}`,a)}await t.del(c),await t.srem(`${s}:index`,a),await t.zrem(w,a)};return{add:async(a={})=>{a._cache_id||(a._cache_id=v(16));const c=`${s}:${a._cache_id}`;m?(await t.hset(c,"data",JSON.stringify(a)),await t.expire(c,m)):await t.hset(c,"data",JSON.stringify(a)),await t.sadd(`${s}:index`,a._cache_id),await e(a._cache_id);for(const[i,l]of Object.entries(a))i!=="_cache_id"&&await t.sadd(`${s}:field:${i}:${l}`,a._cache_id);await g()},find:async(a=null)=>{if(!a){const o=await t.smembers(`${s}:index`),p=[];for(const h of o){const _=await t.hget(`${s}:${h}`,"data");_?(p.push(JSON.parse(_)),await e(h)):(await t.srem(`${s}:index`,h),await t.zrem(w,h))}return p}const[c,i]=a,l=await t.smembers(`${s}:field:${c}:${i}`),d=[];for(const o of l){const p=await t.hget(`${s}:${o}`,"data");p?(d.push(JSON.parse(p)),await e(o)):(await t.srem(`${s}:field:${c}:${i}`,o),await t.srem(`${s}:index`,o),await t.zrem(w,o))}return d},find_one:async(a=null)=>{if(!a)return null;const[c,i]=a,l=await t.smembers(`${s}:field:${c}:${i}`);if(l.length>0){const d=l[0],o=await t.hget(`${s}:${d}`,"data");if(o)return await e(d),JSON.parse(o);await t.srem(`${s}:field:${c}:${i}`,d),await t.srem(`${s}:index`,d),await t.zrem(w,d)}return null},set:async(a=[])=>{const c=await t.smembers(`${s}:index`);if(c.length>0){const i=t.client.multi();for(const d of c)i.del(`${s}:${d}`);const l=await t.keys(`${s}:field:*`);for(const d of l)i.del(d);i.del(`${s}:index`),i.del(w),await i.exec()}for(const i of a)await O(r,t,$).add(i)},update:async([a="",c=""],i={})=>{const l=await t.smembers(`${s}:field:${a}:${c}`);if(l.length>0){const d=l[0],o=`${s}:${d}`,p=await t.hget(o,"data");if(p){const h=JSON.parse(p),_={...h,...i};for(const[n,x]of Object.entries(h))n!=="_cache_id"&&await t.srem(`${s}:field:${n}:${x}`,d);m?(await t.hset(o,"data",JSON.stringify(_)),await t.expire(o,m)):await t.hset(o,"data",JSON.stringify(_)),await e(d);for(const[n,x]of Object.entries(_))n!=="_cache_id"&&await t.sadd(`${s}:field:${n}:${x}`,d)}}},remove:async([a="",c=""])=>{const i=await t.smembers(`${s}:field:${a}:${c}`);for(const l of i)await f(l)}}};var k=y;export{k as default};
