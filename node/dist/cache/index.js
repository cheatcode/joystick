import p from"../app/databases/get_target_database_connection.js";import h from"../lib/generate_id.js";const w=(i="")=>{const t=p("cache");return t?.provider==="redis"?m(i,t.connection):g(i)},g=i=>({add:(t={})=>{process.caches[i]=[...process.caches[i]||[],t]},find:(t=null)=>t?process.caches[i]?.filter(s=>s[t[0]]===t[1]):process.caches[i],find_one:(t=null)=>t?process.caches[i]?.find(s=>s[t[0]]===t[1]):null,set:(t=[])=>{process.caches[i]=t},update:([t="",s=""],e={})=>{const d=process.caches[i]?.findIndex((a={})=>a[t]===s);typeof d=="number"&&(process.caches[i][d]={...process.caches[i][d]||{},...e})},remove:([t="",s=""])=>{process.caches[i]&&(process.caches[i]=process.caches[i].filter((e={})=>e[t]!==s))}}),m=(i,t)=>{const s=`cache:${i}`;return{add:async(e={})=>{e._cache_id||(e._cache_id=h(16));const d=`${s}:${e._cache_id}`;await t.hset(d,"data",JSON.stringify(e)),await t.sadd(`${s}:index`,e._cache_id);for(const[a,r]of Object.entries(e))a!=="_cache_id"&&await t.sadd(`${s}:field:${a}:${r}`,e._cache_id)},find:async(e=null)=>{if(!e){const c=await t.smembers(`${s}:index`),l=[];for(const o of c){const $=await t.hget(`${s}:${o}`,"data");$&&l.push(JSON.parse($))}return l}const[d,a]=e,r=await t.smembers(`${s}:field:${d}:${a}`),f=[];for(const c of r){const l=await t.hget(`${s}:${c}`,"data");l&&f.push(JSON.parse(l))}return f},find_one:async(e=null)=>{if(!e)return null;const[d,a]=e,r=await t.smembers(`${s}:field:${d}:${a}`);if(r.length>0){const f=await t.hget(`${s}:${r[0]}`,"data");return f?JSON.parse(f):null}return null},set:async(e=[])=>{const d=await t.smembers(`${s}:index`);if(d.length>0){const a=t.client.multi();for(const f of d)a.del(`${s}:${f}`);const r=await t.keys(`${s}:field:*`);for(const f of r)a.del(f);a.del(`${s}:index`),await a.exec()}for(const a of e)await m(i,t).add(a)},update:async([e="",d=""],a={})=>{const r=await t.smembers(`${s}:field:${e}:${d}`);if(r.length>0){const f=r[0],c=`${s}:${f}`,l=await t.hget(c,"data");if(l){const o=JSON.parse(l),$={...o,...a};for(const[n,u]of Object.entries(o))n!=="_cache_id"&&await t.srem(`${s}:field:${n}:${u}`,f);await t.hset(c,"data",JSON.stringify($));for(const[n,u]of Object.entries($))n!=="_cache_id"&&await t.sadd(`${s}:field:${n}:${u}`,f)}}},remove:async([e="",d=""])=>{const a=await t.smembers(`${s}:field:${e}:${d}`);for(const r of a){const f=`${s}:${r}`,c=await t.hget(f,"data");if(c){const l=JSON.parse(c);for(const[o,$]of Object.entries(l))o!=="_cache_id"&&await t.srem(`${s}:field:${o}:${$}`,r);await t.del(f),await t.srem(`${s}:index`,r)}}}}};var _=w;export{_ as default};
