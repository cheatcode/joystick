import b from"../app/databases/get_target_database_connection.js";import O from"../lib/generate_id.js";const k=(e="",t={})=>{const p={ttl:null,max_items:null,...t},m=b("cache");return m?.provider==="redis"?v(e,m.connection,p):J(e,p)},J=(e,t={})=>{const{ttl:p,max_items:m}=t,n=r=>{const f=Date.now();return{...r,_cache_created_at:f,_cache_accessed_at:f}},s=()=>{if(!p||!process.caches[e])return;const r=Date.now(),f=p*1e3;process.caches[e]=process.caches[e].filter($=>r-$._cache_created_at<f)},w=()=>{!m||!process.caches[e]||process.caches[e].length>m&&(process.caches[e].sort((r,f)=>f._cache_accessed_at-r._cache_accessed_at),process.caches[e]=process.caches[e].slice(0,m))},g=r=>(r._cache_accessed_at=Date.now(),r);return{add:(r={})=>{s();const f=n(r);process.caches[e]=[...process.caches[e]||[],f],w()},find:(r=null)=>(s(),(r?process.caches[e]?.filter($=>$[r[0]]===r[1]):process.caches[e])?.map(g)||[]),find_one:(r=null)=>{s();const f=r?process.caches[e]?.find($=>$[r[0]]===r[1]):null;return f?g(f):null},set:(r=[])=>{const f=r.map(n);process.caches[e]=f,w()},update:([r="",f=""],$={})=>{s();const a=process.caches[e]?.findIndex((c={})=>c[r]===f);typeof a=="number"&&(process.caches[e][a]={...process.caches[e][a]||{},...$,_cache_accessed_at:Date.now()})},remove:([r="",f=""])=>{process.caches[e]&&(process.caches[e]=process.caches[e].filter(($={})=>$[r]!==f))}}},v=(e,t,p={})=>{const{ttl:m,max_items:n}=p,s=`cache:${e}`,w=`${s}:lru`;if(m){const a=Math.min(m*1e3,3e4);setInterval(async()=>{await g()},a)}const g=async()=>{if(m)try{const a=await t.smembers(`${s}:index`);for(const c of a){const i=`${s}:${c}`;await t.exists(i)||await $(c)}}catch(a){console.warn(`Cache cleanup error for ${e}:`,a)}},r=async()=>{if(!n)return;const a=await t.scard(`${s}:index`);if(a>n){const c=a-n,i=await t.zrange(w,0,c-1);for(const o of i)await $(o)}},f=async a=>{n&&await t.zadd(w,{score:Date.now(),value:a})},$=async a=>{const c=`${s}:${a}`,i=await t.hget(c,"data");if(i){const o=JSON.parse(i);for(const[l,d]of Object.entries(o))l!=="_cache_id"&&(await t.srem(`${s}:field:${l}:${d}`,a),await t.scard(`${s}:field:${l}:${d}`)===0&&await t.del(`${s}:field:${l}:${d}`))}await t.del(c),await t.srem(`${s}:index`,a),await t.zrem(w,a)};return{add:async(a={})=>{a._cache_id||(a._cache_id=O(16));const c=`${s}:${a._cache_id}`;await t.hset(c,"data",JSON.stringify(a)),await t.sadd(`${s}:index`,a._cache_id),await f(a._cache_id);for(const[i,o]of Object.entries(a))i!=="_cache_id"&&await t.sadd(`${s}:field:${i}:${o}`,a._cache_id);m&&await t.expire(c,m),await r()},find:async(a=null)=>{if(!a){const d=await t.smembers(`${s}:index`),u=[];for(const _ of d){const h=await t.hget(`${s}:${_}`,"data");h?(u.push(JSON.parse(h)),await f(_)):(await t.srem(`${s}:index`,_),await t.zrem(w,_))}return u}const[c,i]=a,o=await t.smembers(`${s}:field:${c}:${i}`),l=[];for(const d of o){const u=await t.hget(`${s}:${d}`,"data");u?(l.push(JSON.parse(u)),await f(d)):(await t.srem(`${s}:field:${c}:${i}`,d),await t.srem(`${s}:index`,d),await t.zrem(w,d))}return l},find_one:async(a=null)=>{if(!a)return null;const[c,i]=a,o=await t.smembers(`${s}:field:${c}:${i}`);if(o.length>0){const l=o[0],d=await t.hget(`${s}:${l}`,"data");if(d)return await f(l),JSON.parse(d);await t.srem(`${s}:field:${c}:${i}`,l),await t.srem(`${s}:index`,l),await t.zrem(w,l)}return null},set:async(a=[])=>{const c=await t.smembers(`${s}:index`);if(c.length>0){const i=t.client.multi();for(const l of c)i.del(`${s}:${l}`);const o=await t.client.keys(`${s}:field:*`);for(const l of o)i.del(l);i.del(`${s}:index`),i.del(w),await i.exec()}for(const i of a)await v(e,t,p).add(i)},update:async([a="",c=""],i={})=>{const o=await t.smembers(`${s}:field:${a}:${c}`);if(o.length>0){const l=o[0],d=`${s}:${l}`,u=await t.hget(d,"data");if(u){const _=JSON.parse(u),h={..._,...i};for(const[x,y]of Object.entries(_))x!=="_cache_id"&&await t.srem(`${s}:field:${x}:${y}`,l);m?(await t.hset(d,"data",JSON.stringify(h)),await t.expire(d,m)):await t.hset(d,"data",JSON.stringify(h)),await f(l);for(const[x,y]of Object.entries(h))x!=="_cache_id"&&await t.sadd(`${s}:field:${x}:${y}`,l)}}},remove:async([a="",c=""])=>{const i=await t.smembers(`${s}:field:${a}:${c}`);for(const o of i)await $(o)}}};var z=k;export{z as default};
