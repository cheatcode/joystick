var e=(r="",t={})=>{throw new Error(`[joystick${r?`.${r}`:""}] ${t.message||t.reason||t}`)};var u=(r="{}")=>{try{return JSON.parse(r)}catch(t){e("parseJSON",t)}};var a=(r="",t=[])=>{try{console.error(`${r} failed with the following errors:`),t.forEach(o=>{console.log(o.message),o.stack&&console.log(o.stack)})}catch(o){e(r,o)}};var m=async(r={})=>{try{let t=await r.text();return u(t)}catch(t){e("accounts.request.handleParseResponse",t)}},p=(r="GET",t={})=>{try{return["POST"].includes(r)?JSON.stringify({...t,origin:window?.location?.origin}):null}catch(o){e("accounts.request.getBody",o)}},w=(r=null)=>{try{switch(r){case"authenticated":case"user":return"GET";default:return"POST"}}catch(t){e("accounts.request.getHTTPMethod",t)}},h=(r="",t={})=>{try{if(typeof window.fetch!="undefined")return new Promise((o,n)=>{let l=`${window.location.origin}/api/_accounts/${r}`,i=w(r),d=p(i,t);return fetch(l,{method:i,mode:"cors",headers:{"Content-Type":"application/json"},body:d,credentials:"include"}).then(async s=>{let c=await m(s);return c?.errors?(a(`accounts.${r}`,c.errors),n(c)):o(c)}).catch(s=>(a(`accounts.${r}`,[s]),n({errors:[s]})))})}catch(o){e(`accounts.request.${r}`,o)}};var $=()=>{try{return h("logout")}catch(r){e("accounts.logout",r)}};export{$ as default};
