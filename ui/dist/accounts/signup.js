var o=(r="",t={})=>{throw new Error(`[joystick${r?`.${r}`:""}] ${t.message||t.reason||t}`)};var u=(r="{}")=>{try{return JSON.parse(r)}catch(t){o("parseJSON",t)}};var n=(r="",t=[])=>{try{console.error(`${r} failed with the following errors:`),t.forEach(e=>{console.log(e.message),e.stack&&console.log(e.stack)})}catch(e){o(r,e)}};var d=async(r={})=>{try{let t=await r.text();return u(t)}catch(t){o("accounts.request.handleParseResponse",t)}},m=(r="GET",t={})=>{try{return["POST"].includes(r)?JSON.stringify({...t,origin:window?.location?.origin}):null}catch(e){o("accounts.request.getBody",e)}},w=(r=null)=>{try{switch(r){case"authenticated":case"user":return"GET";default:return"POST"}}catch(t){o("accounts.request.getHTTPMethod",t)}},h=(r="",t={})=>{try{if(typeof window.fetch!="undefined")return new Promise((e,a)=>{let p=`${window.location.origin}/api/_accounts/${r}`,i=w(r),l=m(i,t);return fetch(p,{method:i,mode:"cors",headers:{"Content-Type":"application/json"},body:l,credentials:"include"}).then(async s=>{let c=await d(s);return c?.errors?(n(`accounts.${r}`,c.errors),a(c)):e(c)}).catch(s=>(n(`accounts.${r}`,[s]),a({errors:[s]})))})}catch(e){o(`accounts.request.${r}`,e)}};var $=(r={})=>{try{return h("signup",r)}catch(t){o("accounts.signup",t)}};export{$ as default};
