var t=(o="",r={})=>{throw new Error(`[joystick${o?`.${o}`:""}] ${r.message||r.reason||r}`)};var m=(o="{}")=>{try{return JSON.parse(o)}catch(r){t("parseJSON",r)}};var n=(o="",r=[])=>{try{console.error(`${o} failed with the following errors:`),r.forEach(s=>{console.log(s.message),s.stack&&console.log(s.stack)})}catch(s){t(o,s)}};var x=async(o={})=>{try{let r=await o.text();return m(r)}catch(r){t("accounts.request.handleParseResponse",r)}},k=(o="GET",r={})=>{try{return["POST"].includes(o)?JSON.stringify({...r,origin:window?.location?.origin}):null}catch(s){t("accounts.request.getBody",s)}},F=(o=null)=>{try{switch(o){case"authenticated":case"user":return"GET";default:return"POST"}}catch(r){t("accounts.request.getHTTPMethod",r)}},e=(o="",r={})=>{try{if(typeof window.fetch!="undefined")return new Promise((s,u)=>{let y=`${window.location.origin}/api/_accounts/${o}`,i=F(o),E=k(i,r);return fetch(y,{method:i,mode:"cors",headers:{"Content-Type":"application/json"},body:E,credentials:"include"}).then(async a=>{let c=await x(a);return c?.errors?(n(`accounts.${o}`,c.errors),u(c)):s(c)}).catch(a=>(n(`accounts.${o}`,[a]),u({errors:[a]})))})}catch(s){t(`accounts.request.${o}`,s)}};var p=async(o={})=>{try{let r=await e("authenticated",o);return r?.status===200&&r?.authenticated}catch(r){t("accounts.authenticated",r)}};var w=(o={})=>{try{return e("login",o)}catch(r){t("accounts.login",r)}};var h=()=>{try{return e("logout")}catch(o){t("accounts.logout",o)}};var l=(o={})=>{try{return e("recover-password",o)}catch(r){t("accounts.recoverPassword",r)}};var f=(o={})=>{try{return e("reset-password",o)}catch(r){t("accounts.resetPassword",r)}};var d=(o={})=>{try{return e("signup",o)}catch(r){t("accounts.signup",r)}};var g=async(o={})=>{try{let r=await e("user",o);return r?.status===200&&r?.user}catch(r){t("accounts.user",r)}};var cr={authenticated:p,login:w,logout:h,recoverPassword:l,resetPassword:f,signup:d,user:g};export{cr as default};
