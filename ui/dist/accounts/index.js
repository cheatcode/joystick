var m=(r="{}")=>{try{return JSON.parse(r)}catch{return r}};var o=(r="",t={})=>{throw new Error(`[joystick${r?`.${r}`:""}] ${t.message||t.reason||t}`)};var n=(r="",t=[])=>{try{console.error(`${r} failed with the following errors:`),t.forEach(s=>{console.log(s.message),s.stack&&console.log(s.stack)})}catch(s){o(r,s)}};var E=async(r={})=>{try{let t=await r.text();return m(t)}catch(t){o("accounts.request.handleParseResponse",t)}},q=(r="GET",t={})=>{try{return["POST"].includes(r)?JSON.stringify({...t,origin:window?.location?.origin}):null}catch(s){o("accounts.request.getBody",s)}},k=(r=null)=>{try{switch(r){case"authenticated":case"user":return"GET";default:return"POST"}}catch(t){o("accounts.request.getHTTPMethod",t)}},e=(r="",t={})=>{try{if(typeof window.fetch!="undefined")return new Promise((s,u)=>{let y=`${window.location.origin}/api/_accounts/${r}`,i=k(r),x=q(i,t);return fetch(y,{method:i,mode:"cors",headers:{"Content-Type":"application/json"},body:x,credentials:"include"}).then(async a=>{let c=await E(a);return c?.errors?(n(`accounts.${r}`,c.errors),u(c)):s(c)}).catch(a=>(n(`accounts.${r}`,[a]),u({errors:[a]})))})}catch(s){o(`accounts.request.${r}`,s)}};var p=async(r={})=>{try{let t=await e("authenticated",r);return t?.status===200&&t?.authenticated}catch(t){o("accounts.authenticated",t)}};var w=(r={})=>{try{return e("login",r)}catch(t){o("accounts.login",t)}};var h=()=>{try{return e("logout")}catch(r){o("accounts.logout",r)}};var l=(r={})=>{try{return e("recover-password",r)}catch(t){o("accounts.recoverPassword",t)}};var d=(r={})=>{try{return e("reset-password",r)}catch(t){o("accounts.resetPassword",t)}};var f=(r={})=>{try{return e("signup",r)}catch(t){o("accounts.signup",t)}};var g=async(r={})=>{try{let t=await e("user",r);return t?.status===200&&t?.user}catch(t){o("accounts.user",t)}};var ar={authenticated:p,login:w,logout:h,recoverPassword:l,resetPassword:d,signup:f,user:g};export{ar as default};
