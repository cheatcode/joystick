import r from"fs";import i from"./CLILog.js";import c from"./isValidJSONString.js";const a=(e="")=>{try{const t=c(e),s=process.env.NODE_ENV==="test"?"test":"start";t||(i(`Failed to parse settings file. Double-check the syntax in your settings.${process.env.NODE_ENV}.json file at the root of your project and rerun joystick ${s}.`,{level:"danger",docs:"https://cheatcode.co/docs/joystick/environment-settings",tools:[{title:"JSON Linter",url:"https://jsonlint.com/"}]}),process.exit(0))}catch(t){throw new Error(`[loadSettings.warnIfInvalidJSONInSettings] ${t.message}`)}},d=(e="")=>{try{return r.readFileSync(e,"utf-8")}catch(t){throw new Error(`[loadSettings.getSettings] ${t.message}`)}},g=(e="")=>{try{const t=r.existsSync(e),s=process.env.NODE_ENV==="test"?"test":"start";t||(i(`A settings file could not be found for this environment (${process.env.NODE_ENV}). Create a settings.${process.env.NODE_ENV}.json file at the root of your project and rerun joystick ${s}.`,{level:"danger",docs:`https://cheatcode.co/docs/joystick/cli/${s}`}),process.exit(0))}catch(t){throw new Error(`[loadSettings.warnIfSettingsNotFound] ${t.message}`)}},l=e=>{try{if(!e)throw new Error("options object is required.");if(!e.environment)throw new Error("options.environment is required.")}catch(t){throw new Error(`[loadSettings.validateOptions] ${t.message}`)}},p=(e,{resolve:t,reject:s})=>{try{l(e);const o=`${process.cwd()}/settings.${e.environment}.json`;g(o);const n=d(o);a(n),process.env.JOYSTICK_SETTINGS=n,t({parsed:JSON.parse(n),unparsed:n})}catch(o){s(`[loadSettings] ${o.message}`)}};var N=e=>new Promise((t,s)=>{p(e,{resolve:t,reject:s})});export{N as default};
