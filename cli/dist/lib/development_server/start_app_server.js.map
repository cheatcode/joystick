{
  "version": 3,
  "sources": ["../../../src/lib/development_server/start_app_server.js"],
  "sourcesContent": ["import child_process from \"child_process\";\nimport path from \"path\";\n\nconst start_app_server_process = (exec_argv = [], watch = false, env_options = {}) => {\n  const node_env = env_options.NODE_ENV || process.env.NODE_ENV;\n  \n  if (node_env !== 'test') {\n    process.loader.print('Starting app...');\n  }\n\n  const env = {\n    ...process.env,\n    FORCE_COLOR: \"1\",\n    LOGS_PATH: env_options.LOGS_PATH || process.env.LOGS_PATH,\n    NODE_ENV: node_env,\n    ROOT_URL: env_options.ROOT_URL || process.env.ROOT_URL,\n    PORT: env_options.PORT || process.env.PORT,\n    JOYSTICK_SETTINGS: env_options.JOYSTICK_SETTINGS || process.env.JOYSTICK_SETTINGS,\n  };\n\n  return child_process.fork(\n    path.resolve(\".joystick/build/index.server.js\"),\n    [],\n    {\n      execArgv: exec_argv,\n      // NOTE: Pipe stdin, stdout, and stderr. IPC establishes a message channel so we\n      // communicate with the child_process.\n      silent: true,\n      env: env,\n    }\n  );\n};\n\nconst get_exec_args = (node_major_version = 0, imports = [], env_options = {}) => {\n  const exec_argv = [\"--no-warnings\"];\n  const node_env = env_options.NODE_ENV || process.env.NODE_ENV;\n  const is_debug_mode = env_options.IS_DEBUG_MODE || process.env.IS_DEBUG_MODE;\n\n  if (node_env === 'development') {\n    // NOTE: Ensure that localhost is not swapped with ::1 (IPv6 local address) in Node v17-v19.\n    // See here for information: https://github.com/nodejs/node/issues/40702#issuecomment-958157082\n    exec_argv.push(\"--dns-result-order=ipv4first\");\n  }\n\n  if (node_major_version < 19) {\n    exec_argv.push(\"--experimental-specifier-resolution=node\");\n  }\n\n  if (node_env === \"development\" && is_debug_mode === \"true\") {\n    exec_argv.push(\"--inspect\");\n  }\n\n  for (let i = 0; i < imports?.length; i += 1) {\n    const import_path = imports[i];\n    exec_argv.push(\"--import\", import_path);\n  }\n\n  return exec_argv;\n};\n\nconst start_app_server = (node_major_version = 0, watch = false, imports = [], env_options = {}) => {\n  const exec_argv = get_exec_args(node_major_version, imports, env_options);\n  const app_server_process = start_app_server_process(exec_argv, watch, env_options);\n  return app_server_process;\n};\n\nexport default start_app_server;\n"],
  "mappings": "AAAA,OAAOA,MAAmB,gBAC1B,OAAOC,MAAU,OAEjB,MAAMC,EAA2B,CAACC,EAAY,CAAC,EAAGC,EAAQ,GAAOC,EAAc,CAAC,IAAM,CACpF,MAAMC,EAAWD,EAAY,UAAY,QAAQ,IAAI,SAEjDC,IAAa,QACf,QAAQ,OAAO,MAAM,iBAAiB,EAGxC,MAAMC,EAAM,CACV,GAAG,QAAQ,IACX,YAAa,IACb,UAAWF,EAAY,WAAa,QAAQ,IAAI,UAChD,SAAUC,EACV,SAAUD,EAAY,UAAY,QAAQ,IAAI,SAC9C,KAAMA,EAAY,MAAQ,QAAQ,IAAI,KACtC,kBAAmBA,EAAY,mBAAqB,QAAQ,IAAI,iBAClE,EAEA,OAAOL,EAAc,KACnBC,EAAK,QAAQ,iCAAiC,EAC9C,CAAC,EACD,CACE,SAAUE,EAGV,OAAQ,GACR,IAAKI,CACP,CACF,CACF,EAEMC,EAAgB,CAACC,EAAqB,EAAGC,EAAU,CAAC,EAAGL,EAAc,CAAC,IAAM,CAChF,MAAMF,EAAY,CAAC,eAAe,EAC5BG,EAAWD,EAAY,UAAY,QAAQ,IAAI,SAC/CM,EAAgBN,EAAY,eAAiB,QAAQ,IAAI,cAE3DC,IAAa,eAGfH,EAAU,KAAK,8BAA8B,EAG3CM,EAAqB,IACvBN,EAAU,KAAK,0CAA0C,EAGvDG,IAAa,eAAiBK,IAAkB,QAClDR,EAAU,KAAK,WAAW,EAG5B,QAASS,EAAI,EAAGA,EAAIF,GAAS,OAAQE,GAAK,EAAG,CAC3C,MAAMC,EAAcH,EAAQE,CAAC,EAC7BT,EAAU,KAAK,WAAYU,CAAW,CACxC,CAEA,OAAOV,CACT,EAEMW,EAAmB,CAACL,EAAqB,EAAGL,EAAQ,GAAOM,EAAU,CAAC,EAAGL,EAAc,CAAC,IAAM,CAClG,MAAMF,EAAYK,EAAcC,EAAoBC,EAASL,CAAW,EAExE,OAD2BH,EAAyBC,EAAWC,EAAOC,CAAW,CAEnF,EAEA,IAAOU,EAAQD",
  "names": ["child_process", "path", "start_app_server_process", "exec_argv", "watch", "env_options", "node_env", "env", "get_exec_args", "node_major_version", "imports", "is_debug_mode", "i", "import_path", "start_app_server", "start_app_server_default"]
}
