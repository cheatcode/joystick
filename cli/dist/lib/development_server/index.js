import h from"chalk";import N from"child_process";import D from"fs";import"os";import w,{dirname as $}from"path";import{fileURLToPath as j}from"url";import R from"util";import m from"./check_if_port_occupied.js";import n from"../cli_log.js";import f from"./get_database_process_ids.js";import I from"../get_platform_safe_path.js";import y from"../kill_port_process.js";import g from"../load_settings.js";import V from"../loader.js";import u from"../path_exists.js";import v from"../required_files.js";import x from"./start_app_server.js";import O from"./start_databases.js";import H from"./start_hmr_server.js";import P from"./watch_for_changes/index.js";import C from"../constants.js";import b from"./kill_process_ids.js";import M,{run_tests_integrated as k}from"./run_tests.js";import A from"../debounce.js";import q from"./databases/download_database_binary.js";const{stat:L}=D.promises,G=R.promisify(N.exec),_=parseInt(process?.version?.split(".")[0]?.replace("v",""),10),J=j(import.meta.url),l=$(J),d=[],U=async(s=!1)=>{const t=f();await M({watch:s,__dirname:l,process_ids:[...d,...t],cleanup_process:process.cleanup_process})},F=(s=[],t=0,r="")=>{const o=["--no-warnings"];t<19&&o.push("--experimental-specifier-resolution=node");const e=N.fork(w.resolve(`${r}/cleanup.js`),[],{detached:!0,silent:!0});process.cleanup_process=e,process.on("SIGINT",async()=>{const c=f();e.send(JSON.stringify({process_ids:[...s,...c]})),process.exit()}),process.on("SIGTERM",async()=>{const c=f();e.send(JSON.stringify({process_ids:[...s,...c]})),process.exit()})},B=async(s=[])=>{const t=s?.find(a=>a?.path?.match(C.SETTINGS_FILE_NAME_REGEX)?.length>0),r=s?.find(a=>a?.path?.includes("i18n")),o=s?.find(a=>a?.path?.includes("index.html")),e=s?.find(a=>a?.path?.includes("index.css")||a?.path?.includes("css/")),c=s?.find(a=>a?.path?.includes("index.client.js"));process.hmr_server_process.send(JSON.stringify({type:"FILE_CHANGE",settings:t?await g(process.env.NODE_ENV):null,i18n_change:!!r,index_html_change:!!o,index_css_change:!!e,index_client_change:!!c}))},z=(s=0,t=!1,r={},o=[],e=!1)=>{process.hmr_server_process.on("message",async c=>{["HAS_HMR_CONNECTIONS","HAS_NO_HMR_CONNECTIONS","HMR_UPDATE_COMPLETE"].includes(c?.type)||process.loader.print(c),c?.type==="HAS_HMR_CONNECTIONS"&&(process.hmr_server_process.has_connections=!0),c?.type==="HAS_NO_HMR_CONNECTIONS"&&(process.hmr_server_process.has_connections=!1),c?.type==="HMR_UPDATE_COMPLETE"&&process.app_server_process&&!process.app_server_restarting&&(process.app_server_restarting=!0,S(s,t,r,o,e))})},X=()=>{process.hmr_server_process.on("error",s=>{n(s.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})}),process.hmr_server_process.stdout.on("data",s=>{console.log(s.toString())}),process.hmr_server_process.stderr.on("data",s=>{n(s.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})})},K=(s=0,t="",r=!1,o={},e=[],c=!1)=>{process.hmr_server_process=H(s,t),d.push(process.hmr_server_process?.pid),X(),z(s,r,o,e,c)},Q=async(s={})=>{const t=await g(process.env.NODE_ENV),r=t?.config?.databases?JSON.stringify(t?.config?.databases):"",o=s?.config?.databases?JSON.stringify(s?.config?.databases):"";return r!==o},S=async(s=0,t=!1,r=null,o=[],e=!1)=>{A(async()=>{if(await Q(r)){const a=f();n(`Database configuration has changed in settings.${process.env.NODE_ENV}.json. Please restart your app to add, change, or remove databases.`,{level:"danger",docs:"https://cheatcode.co/docs/joystick/structure"}),b([process.hmr_server_process?.pid,process.app_server_process?.pid,...a]),process.exit(0)}else b([...process.app_server_process.external_process_ids||[]]),await y(process.env.PORT),E(s,t,o,e)},300)},W=(s=!1,t=!1,r=!1)=>{process.app_server_process.external_process_ids=[],process.app_server_process.on("message",o=>{o?.external_process_id&&(process.app_server_process.external_process_ids=[...process.app_server_process.external_process_ids||[],o?.external_process_id])}),process.app_server_process.on("error",o=>{r||n(o.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})}),process.app_server_process.stdout.on("data",async o=>{const e=o.toString(),c=e.includes("App running at:");e&&c&&process.env.NODE_ENV!=="test"&&!r&&process.loader.print(e),e&&!c&&!e.includes("BUILD_ERROR")&&!r&&console.log(e),e&&c&&process.env.NODE_ENV==="test"&&U(s),e&&c&&t&&process.env.NODE_ENV!=="test"&&setTimeout(async()=>{try{await k({__dirname:l})}catch(a){console.error("Error running integrated tests:",a)}},2e3)}),process.app_server_process.stderr.on("data",o=>{r||n(o.toString(),{level:"danger",docs:"https://cheatcode.co/docs/joystick"})})},E=(s=0,t=!1,r=[],o=!1,e=!1)=>{process.app_server_process=x(s,t,r),d.push(process.app_server_process?.pid),W(t,o,e),process.app_server_restarting=!1},Y=async(s={})=>{const t=s?.config?.databases?.map((r={})=>r?.provider);for(let r=0;r<t?.length;r+=1){const o=t[r];await q(o)}},Z=(s={},t=2600)=>{process.title=s?.environment==="test"?"joystick_test":"joystick",process.project_folder=w.basename(process.cwd()),process.loader=new V,s?.environment==="test"&&(console.log(""),process.loader.print(`Initializing test environment...
`)),process.env.LOGS_PATH=s?.logs||null,process.env.NODE_ENV=s?.environment||"development",process.env.PORT=t,process.env.IS_DEBUG_MODE=s?.debug},ss=(s=2600)=>{n(`Port ${s} is already occupied. To start Joystick on this port, clear it and try again.`,{level:"danger"}),process.exit(0)},es=(s=2600)=>parseInt(s||2600,10),ts=async()=>{const s=I(`${process.cwd()}/.joystick/build`);await u(s)&&await G(`${process.platform==="win32"?"rmdir /s /q":"rm -rf"} ${s}`)},rs=async()=>{const s=[];for(let t=0;t<v?.length;t+=1){const r=v[t],o=await u(`${process.cwd()}/${r.path}`),e=o&&await L(`${process.cwd()}/${r.path}`);r&&r.type==="file"&&(!o||o&&!e.isFile())&&s.push({type:"file",path:r.path}),r&&r.type==="directory"&&(!o||o&&!e.isDirectory())&&s.push({type:"directory",path:r.path})}if(s?.length>0){const t=s?.filter(e=>e.type==="file"),r=s?.filter(e=>e.type==="directory");let o=`The following paths are missing and required in a Joystick project:

`;if(t?.length>0){o+=`  ${h.yellow(">")} Required Files:

`;for(let e=0;e<t?.length;e+=1){const c=t[e],a=e+1===t?.length;o+=`  ${h.red(`/${c.path}
${a&&r?.length>0?`
`:""}`)}`}}if(r?.length>0){o+=`  ${h.yellow(">")} Required Directories:

`;for(let e=0;e<r?.length;e+=1){const c=r[e];o+=`  ${h.red(`/${c.path}
`)}`}}n(o,{level:"danger",docs:"https://cheatcode.co/docs/joystick/structure"}),process.exit(0)}},os=async()=>{const s=await u(`${process.cwd()}/.joystick`),t=await u(`${process.cwd()}/tests`);process.env.NODE_ENV==="test"&&(!s||!t)&&(n("joystick test must be run in a directory with a .joystick folder and tests folder.",{level:"danger",docs:"https://cheatcode.co/docs/joystick/cli/test"}),process.exit(0)),process.env.NODE_ENV!=="test"&&!s&&(n("joystick start must be run in a directory with a .joystick folder.",{level:"danger",docs:"https://cheatcode.co/docs/joystick/cli/start"}),process.exit(0))},cs=async(s={})=>{await os(),await rs(),await ts();const t=es(s?.port),r=await m(t),o=await m(t+1);r&&ss(t),o&&y(t),Z(s,t);const e=await g(process.env.NODE_ENV);await Y(e),await O({environment:process.env.NODE_ENV,port:t,settings:e}),s?.tests&&s?.environment!=="test"&&(await m(1977)&&await y(1977),setTimeout(async()=>{try{const a=process.env.NODE_ENV,as=process.env.PORT;process.env.NODE_ENV="test",process.env.PORT=1977;const T=await g("test");await O({environment:"test",port:1977,settings:T});const i=x(_,!1,s?.imports||[]);d.push(i?.pid),i.external_process_ids=[],i.on("message",p=>{p?.external_process_id&&(i.external_process_ids=[...i.external_process_ids||[],p?.external_process_id],d.push(p?.external_process_id))}),i.on("error",p=>{}),i.stdout.on("data",async p=>{}),i.stderr.on("data",p=>{})}catch(a){console.error("Error starting test server:",a)}},100)),s?._is_test_server?E(_,!1,s?.imports||[],!1,!0):P({hot_module_reload:(c=[])=>B(c),restart_app_server:()=>S(_,s?.watch,e,s?.imports,s?.tests),start_app_server:()=>E(_,s?.watch,s?.imports,s?.tests,s?._is_test_server),start_hmr_server:s?.environment!=="test"?()=>K(_,l,s?.watch,e,s?.imports,s?.tests):null,run_tests:s?.tests?async()=>{setTimeout(async()=>{try{await k({__dirname:l})}catch(c){console.error("Error running tests after file change:",c)}},2e3)}:null},{excluded_paths:e?.config?.build?.excluded_paths,custom_copy_paths:e?.config?.build?.copy_paths?.map(c=>({path:c}))||[]}),F(d,_,l)};var Is=cs;export{Is as default};
//# sourceMappingURL=index.js.map
