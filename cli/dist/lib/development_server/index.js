import i from"chalk";import m from"child_process";import O from"fs";import"os";import g,{dirname as x}from"path";import{fileURLToPath as b}from"url";import k from"util";import u from"./check_if_port_occupied.js";import n from"../cli_log.js";import p from"./get_database_process_ids.js";import S from"../get_platform_safe_path.js";import y from"../kill_port_process.js";import f from"../load_settings.js";import D from"../loader.js";import _ from"../path_exists.js";import v from"../required_files.js";import T from"./start_app_server.js";import $ from"./start_databases.js";import j from"./start_hmr_server.js";import R from"./watch_for_changes/index.js";import I from"../constants.js";import N from"./kill_process_ids.js";import H,{run_tests_integrated as C}from"./run_tests.js";import M from"../debounce.js";import V from"./databases/download_database_binary.js";const{stat:A}=O.promises,P=k.promisify(m.exec),d=parseInt(process?.version?.split(".")[0]?.replace("v",""),10),q=b(import.meta.url),l=x(q),h=[],L=async(s=!1)=>{const t=p();await H({watch:s,__dirname:l,process_ids:[...h,...t],cleanup_process:process.cleanup_process})},G=(s=[],t=0,e="")=>{const o=["--no-warnings"];t<19&&o.push("--experimental-specifier-resolution=node");const r=m.fork(g.resolve(`${e}/cleanup.js`),[],{detached:!0,silent:!0});process.cleanup_process=r,process.on("SIGINT",async()=>{const c=p();r.send(JSON.stringify({process_ids:[...s,...c]})),process.exit()}),process.on("SIGTERM",async()=>{const c=p();r.send(JSON.stringify({process_ids:[...s,...c]})),process.exit()})},J=async(s=[])=>{const t=s?.find(a=>a?.path?.match(I.SETTINGS_FILE_NAME_REGEX)?.length>0),e=s?.find(a=>a?.path?.includes("i18n")),o=s?.find(a=>a?.path?.includes("index.html")),r=s?.find(a=>a?.path?.includes("index.css")||a?.path?.includes("css/")),c=s?.find(a=>a?.path?.includes("index.client.js"));process.hmr_server_process.send(JSON.stringify({type:"FILE_CHANGE",settings:t?await f(process.env.NODE_ENV):null,i18n_change:!!e,index_html_change:!!o,index_css_change:!!r,index_client_change:!!c}))},U=(s=0,t=!1,e={},o=[],r=!1)=>{process.hmr_server_process.on("message",async c=>{["HAS_HMR_CONNECTIONS","HAS_NO_HMR_CONNECTIONS","HMR_UPDATE_COMPLETE"].includes(c?.type)||process.loader.print(c),c?.type==="HAS_HMR_CONNECTIONS"&&(process.hmr_server_process.has_connections=!0),c?.type==="HAS_NO_HMR_CONNECTIONS"&&(process.hmr_server_process.has_connections=!1),c?.type==="HMR_UPDATE_COMPLETE"&&process.app_server_process&&!process.app_server_restarting&&(process.app_server_restarting=!0,E(s,t,e,o,r))})},F=()=>{process.hmr_server_process.on("error",s=>{n(s.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})}),process.hmr_server_process.stdout.on("data",s=>{console.log(s.toString())}),process.hmr_server_process.stderr.on("data",s=>{n(s.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})})},B=(s=0,t="",e=!1,o={},r=[],c=!1)=>{process.hmr_server_process=j(s,t),h.push(process.hmr_server_process?.pid),F(),U(s,e,o,r,c)},z=async(s={})=>{const t=await f(process.env.NODE_ENV),e=t?.config?.databases?JSON.stringify(t?.config?.databases):"",o=s?.config?.databases?JSON.stringify(s?.config?.databases):"";return e!==o},E=async(s=0,t=!1,e=null,o=[],r=!1)=>{M(async()=>{if(await z(e)){const a=p();n(`Database configuration has changed in settings.${process.env.NODE_ENV}.json. Please restart your app to add, change, or remove databases.`,{level:"danger",docs:"https://cheatcode.co/docs/joystick/structure"}),N([process.hmr_server_process?.pid,process.app_server_process?.pid,...a]),process.exit(0)}else N([...process.app_server_process.external_process_ids||[]]),await y(process.env.PORT),w(s,t,o,r)},300)},X=(s=!1,t=!1)=>{process.app_server_process.external_process_ids=[],process.app_server_process.on("message",e=>{e?.external_process_id&&(process.app_server_process.external_process_ids=[...process.app_server_process.external_process_ids||[],e?.external_process_id])}),process.app_server_process.on("error",e=>{n(e.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})}),process.app_server_process.stdout.on("data",async e=>{const o=e.toString(),r=o.includes("App running at:");o&&r&&process.env.NODE_ENV!=="test"&&process.loader.print(o),o&&!r&&!o.includes("BUILD_ERROR")&&console.log(o),o&&r&&process.env.NODE_ENV==="test"&&L(s),o&&r&&t&&process.env.NODE_ENV!=="test"&&setTimeout(async()=>{try{await C({__dirname:l})}catch(c){console.error("Error running integrated tests:",c)}},2e3)}),process.app_server_process.stderr.on("data",e=>{n(e.toString(),{level:"danger",docs:"https://cheatcode.co/docs/joystick"})})},w=(s=0,t=!1,e=[],o=!1)=>{process.app_server_process=T(s,t,e),h.push(process.app_server_process?.pid),X(t,o),process.app_server_restarting=!1},K=async(s={})=>{const t=s?.config?.databases?.map((e={})=>e?.provider);for(let e=0;e<t?.length;e+=1){const o=t[e];await V(o)}},Q=(s={},t=2600)=>{process.title=s?.environment==="test"?"joystick_test":"joystick",process.project_folder=g.basename(process.cwd()),process.loader=new D,s?.environment==="test"&&(console.log(""),process.loader.print(`Initializing test environment...
`)),process.env.LOGS_PATH=s?.logs||null,process.env.NODE_ENV=s?.environment||"development",process.env.PORT=t,process.env.IS_DEBUG_MODE=s?.debug},W=(s=2600)=>{n(`Port ${s} is already occupied. To start Joystick on this port, clear it and try again.`,{level:"danger"}),process.exit(0)},Y=(s=2600)=>parseInt(s||2600,10),Z=async()=>{const s=S(`${process.cwd()}/.joystick/build`);await _(s)&&await P(`${process.platform==="win32"?"rmdir /s /q":"rm -rf"} ${s}`)},ss=async()=>{const s=[];for(let t=0;t<v?.length;t+=1){const e=v[t],o=await _(`${process.cwd()}/${e.path}`),r=o&&await A(`${process.cwd()}/${e.path}`);e&&e.type==="file"&&(!o||o&&!r.isFile())&&s.push({type:"file",path:e.path}),e&&e.type==="directory"&&(!o||o&&!r.isDirectory())&&s.push({type:"directory",path:e.path})}if(s?.length>0){const t=s?.filter(r=>r.type==="file"),e=s?.filter(r=>r.type==="directory");let o=`The following paths are missing and required in a Joystick project:

`;if(t?.length>0){o+=`  ${i.yellow(">")} Required Files:

`;for(let r=0;r<t?.length;r+=1){const c=t[r],a=r+1===t?.length;o+=`  ${i.red(`/${c.path}
${a&&e?.length>0?`
`:""}`)}`}}if(e?.length>0){o+=`  ${i.yellow(">")} Required Directories:

`;for(let r=0;r<e?.length;r+=1){const c=e[r];o+=`  ${i.red(`/${c.path}
`)}`}}n(o,{level:"danger",docs:"https://cheatcode.co/docs/joystick/structure"}),process.exit(0)}},es=async()=>{const s=await _(`${process.cwd()}/.joystick`),t=await _(`${process.cwd()}/tests`);process.env.NODE_ENV==="test"&&(!s||!t)&&(n("joystick test must be run in a directory with a .joystick folder and tests folder.",{level:"danger",docs:"https://cheatcode.co/docs/joystick/cli/test"}),process.exit(0)),process.env.NODE_ENV!=="test"&&!s&&(n("joystick start must be run in a directory with a .joystick folder.",{level:"danger",docs:"https://cheatcode.co/docs/joystick/cli/start"}),process.exit(0))},ts=async(s={})=>{await es(),await ss(),await Z();const t=Y(s?.port),e=await u(t),o=await u(t+1);e&&W(t),o&&y(t),Q(s,t);const r=await f(process.env.NODE_ENV);await K(r),await $({environment:process.env.NODE_ENV,port:t,settings:r}),R({hot_module_reload:(c=[])=>J(c),restart_app_server:()=>E(d,s?.watch,r,s?.imports,s?.tests),start_app_server:()=>w(d,s?.watch,s?.imports,s?.tests),start_hmr_server:s?.environment!=="test"?()=>B(d,l,s?.watch,r,s?.imports,s?.tests):null},{excluded_paths:r?.config?.build?.excluded_paths,custom_copy_paths:r?.config?.build?.copy_paths?.map(c=>({path:c}))||[]}),G(h,d,l)};var Ts=ts;export{Ts as default};
//# sourceMappingURL=index.js.map
