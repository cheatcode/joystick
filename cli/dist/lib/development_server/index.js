import l from"chalk";import N from"child_process";import $ from"fs";import"os";import O,{dirname as j}from"path";import{fileURLToPath as R}from"url";import I from"util";import m from"./check_if_port_occupied.js";import i from"../cli_log.js";import d from"./get_database_process_ids.js";import H from"../get_platform_safe_path.js";import g from"../kill_port_process.js";import y from"../load_settings.js";import C from"../loader.js";import f from"../path_exists.js";import x from"../required_files.js";import M from"./start_app_server.js";import V from"./start_databases.js";import A from"./start_hmr_server.js";import P from"./watch_for_changes/index.js";import q from"../constants.js";import b from"./kill_process_ids.js";import L,{run_tests_integrated as k}from"./run_tests.js";import G from"../debounce.js";import J from"./databases/download_database_binary.js";const{stat:U}=$.promises,F=I.promisify(N.exec),p=parseInt(process?.version?.split(".")[0]?.replace("v",""),10),B=R(import.meta.url),_=j(B),h=[];let w=null,E=!1,u=!1;const n=async()=>{if(E&&u){if(n.running)return;n.running=!0,setTimeout(async()=>{console.log("Running tests...");try{await k({__dirname:_})}catch(s){console.error("Error running integrated tests:",s)}finally{n.running=!1}},2e3)}},S=async(s={})=>{await m(1977)&&await g(1977),setTimeout(async()=>{try{await D({environment:"test",port:1977,watch:!1,imports:s?.imports||[],_is_test_server:!0})}catch(r){console.error("Error starting test server:",r)}},100)},X=()=>{w&&(w.kill(),w=null),u=!1},z=()=>{E=!1,u=!1,n.running=!1},Cs=async(s=!1)=>{const t=d();await L({watch:s,__dirname:_,process_ids:[...h,...t],cleanup_process:process.cleanup_process})},K=(s=[],t=0,r="")=>{const c=["--no-warnings"];t<19&&c.push("--experimental-specifier-resolution=node");const e=N.fork(O.resolve(`${r}/cleanup.js`),[],{detached:!0,silent:!0});process.cleanup_process=e,process.on("SIGINT",async()=>{const a=d();e.send(JSON.stringify({process_ids:[...s,...a]})),process.exit()}),process.on("SIGTERM",async()=>{const a=d();e.send(JSON.stringify({process_ids:[...s,...a]})),process.exit()})},Q=async(s=[])=>{const t=s?.find(o=>o?.path?.match(q.SETTINGS_FILE_NAME_REGEX)?.length>0),r=s?.find(o=>o?.path?.includes("i18n")),c=s?.find(o=>o?.path?.includes("index.html")),e=s?.find(o=>o?.path?.includes("index.css")||o?.path?.includes("css/")),a=s?.find(o=>o?.path?.includes("index.client.js"));process.hmr_server_process.send(JSON.stringify({type:"FILE_CHANGE",settings:t?await y(process.env.NODE_ENV):null,i18n_change:!!r,index_html_change:!!c,index_css_change:!!e,index_client_change:!!a}))},W=(s=0,t=!1,r={},c=[],e=!1)=>{process.hmr_server_process.on("message",async a=>{["HAS_HMR_CONNECTIONS","HAS_NO_HMR_CONNECTIONS","HMR_UPDATE_COMPLETE"].includes(a?.type)||process.loader.print(a),a?.type==="HAS_HMR_CONNECTIONS"&&(process.hmr_server_process.has_connections=!0),a?.type==="HAS_NO_HMR_CONNECTIONS"&&(process.hmr_server_process.has_connections=!1),a?.type==="HMR_UPDATE_COMPLETE"&&process.app_server_process&&!process.app_server_restarting&&(process.app_server_restarting=!0,T(s,t,r,c,e))})},Y=()=>{process.hmr_server_process.on("error",s=>{i(s.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})}),process.hmr_server_process.stdout.on("data",s=>{console.log(s.toString())}),process.hmr_server_process.stderr.on("data",s=>{i(s.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})})},Z=(s=0,t="",r=!1,c={},e=[],a=!1)=>{process.hmr_server_process=A(s,t),h.push(process.hmr_server_process?.pid),Y(),W(s,r,c,e,a)},ss=async(s={})=>{const t=await y(process.env.NODE_ENV),r=t?.config?.databases?JSON.stringify(t?.config?.databases):"",c=s?.config?.databases?JSON.stringify(s?.config?.databases):"";return r!==c},T=async(s=0,t=!1,r=null,c=[],e=!1)=>{G(async()=>{if(await ss(r)){const o=d();i(`Database configuration has changed in settings.${process.env.NODE_ENV}.json. Please restart your app to add, change, or remove databases.`,{level:"danger",docs:"https://cheatcode.co/docs/joystick/structure"}),b([process.hmr_server_process?.pid,process.app_server_process?.pid,...o]),process.exit(0)}else e&&(z(),X()),b([...process.app_server_process.external_process_ids||[]]),await g(process.env.PORT),v(s,t,c,e),e&&await S({imports:c||[]})},300)},es=(s=!1,t=!1,r=!1)=>{process.app_server_process.external_process_ids=[],process.app_server_process.on("message",c=>{c?.external_process_id&&(process.app_server_process.external_process_ids=[...process.app_server_process.external_process_ids||[],c?.external_process_id])}),process.app_server_process.on("error",c=>{r||i(c.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})}),process.app_server_process.stdout.on("data",async c=>{const e=c.toString(),a=e.includes("App running at:");r||(e&&a&&process.env.NODE_ENV!=="test"&&process.loader.print(e),e&&!a&&!e.includes("BUILD_ERROR")&&console.log(e),e&&a&&t&&process.env.NODE_ENV!=="test"&&(E=!0,n()),e&&a&&process.env.NODE_ENV==="test"&&(u=!0,n()))}),process.app_server_process.stderr.on("data",c=>{r||i(c.toString(),{level:"danger",docs:"https://cheatcode.co/docs/joystick"})})},v=(s=0,t=!1,r=[],c=!1,e=!1)=>{process.app_server_process=M(s,t,r),h.push(process.app_server_process?.pid),es(t,c,e),process.app_server_restarting=!1},ts=async(s={})=>{const t=s?.config?.databases?.map((r={})=>r?.provider);for(let r=0;r<t?.length;r+=1){const c=t[r];await J(c)}},rs=(s={},t=2600)=>{process.title=s?.environment==="test"?"joystick_test":"joystick",process.project_folder=O.basename(process.cwd()),process.loader=new C,process.env.LOGS_PATH=s?.logs||null,process.env.NODE_ENV=s?.environment||"development",process.env.PORT=t,process.env.IS_DEBUG_MODE=s?.debug},cs=(s=2600)=>{i(`Port ${s} is already occupied. To start Joystick on this port, clear it and try again.`,{level:"danger"}),process.exit(0)},as=(s=2600)=>parseInt(s||2600,10),os=async()=>{const s=H(`${process.cwd()}/.joystick/build`);await f(s)&&await F(`${process.platform==="win32"?"rmdir /s /q":"rm -rf"} ${s}`)},is=async()=>{const s=[];for(let t=0;t<x?.length;t+=1){const r=x[t],c=await f(`${process.cwd()}/${r.path}`),e=c&&await U(`${process.cwd()}/${r.path}`);r&&r.type==="file"&&(!c||c&&!e.isFile())&&s.push({type:"file",path:r.path}),r&&r.type==="directory"&&(!c||c&&!e.isDirectory())&&s.push({type:"directory",path:r.path})}if(s?.length>0){const t=s?.filter(e=>e.type==="file"),r=s?.filter(e=>e.type==="directory");let c=`The following paths are missing and required in a Joystick project:

`;if(t?.length>0){c+=`  ${l.yellow(">")} Required Files:

`;for(let e=0;e<t?.length;e+=1){const a=t[e],o=e+1===t?.length;c+=`  ${l.red(`/${a.path}
${o&&r?.length>0?`
`:""}`)}`}}if(r?.length>0){c+=`  ${l.yellow(">")} Required Directories:

`;for(let e=0;e<r?.length;e+=1){const a=r[e];c+=`  ${l.red(`/${a.path}
`)}`}}i(c,{level:"danger",docs:"https://cheatcode.co/docs/joystick/structure"}),process.exit(0)}},ns=async()=>{const s=await f(`${process.cwd()}/.joystick`),t=await f(`${process.cwd()}/tests`);process.env.NODE_ENV==="test"&&(!s||!t)&&(i("joystick test must be run in a directory with a .joystick folder and tests folder.",{level:"danger",docs:"https://cheatcode.co/docs/joystick/cli/test"}),process.exit(0)),process.env.NODE_ENV!=="test"&&!s&&(i("joystick start must be run in a directory with a .joystick folder.",{level:"danger",docs:"https://cheatcode.co/docs/joystick/cli/start"}),process.exit(0))},D=async(s={})=>{await ns(),await is(),await os();const t=as(s?.port),r=await m(t),c=await m(t+1);r&&cs(t),c&&g(t),rs(s,t);const e=await y(process.env.NODE_ENV);await ts(e),await V({environment:process.env.NODE_ENV,port:t,settings:e}),s?.tests&&s?.environment!=="test"&&!s?._is_test_server&&await S({imports:s?.imports||[]}),s?._is_test_server?v(p,!1,s?.imports||[],!1,!0):P({hot_module_reload:(a=[])=>Q(a),restart_app_server:()=>T(p,s?.watch,e,s?.imports,s?.tests),start_app_server:()=>v(p,s?.watch,s?.imports,s?.tests,s?._is_test_server),start_hmr_server:s?.environment!=="test"?()=>Z(p,_,s?.watch,e,s?.imports,s?.tests):null,run_tests:s?.tests?async()=>{setTimeout(async()=>{try{await k({__dirname:_})}catch(a){console.error("Error running tests after file change:",a)}},1e3)}:null},{excluded_paths:e?.config?.build?.excluded_paths,custom_copy_paths:e?.config?.build?.copy_paths?.map(a=>({path:a}))||[]}),K(h,p,_)};var Ms=D;export{Ms as default};
//# sourceMappingURL=index.js.map
