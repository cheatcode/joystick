import u from"chalk";import v from"child_process";import j from"fs";import"os";import x,{dirname as H}from"path";import{fileURLToPath as C}from"url";import P from"util";import w from"./check_if_port_occupied.js";import p from"../cli_log.js";import m from"./get_database_process_ids.js";import V from"../get_platform_safe_path.js";import E from"../kill_port_process.js";import h from"../load_settings.js";import A from"../loader.js";import y from"../path_exists.js";import b from"../required_files.js";import S from"./start_app_server.js";import T from"./start_databases.js";import L from"./start_hmr_server.js";import G from"./watch_for_changes/index.js";import M from"../constants.js";import k from"./kill_process_ids.js";import J,{run_tests_integrated as D}from"./run_tests.js";import q from"../debounce.js";import U from"./databases/download_database_binary.js";const{stat:F}=j.promises,B=P.promisify(v.exec),l=parseInt(process?.version?.split(".")[0]?.replace("v",""),10),K=C(import.meta.url),f=H(K),d=[],Y=async(s=!1)=>{const r=m();await J({watch:s,__dirname:f,process_ids:[...d,...r],cleanup_process:process.cleanup_process})},z=(s=[],r=0,a="")=>{const t=["--no-warnings"];r<19&&t.push("--experimental-specifier-resolution=node");const e=v.fork(x.resolve(`${a}/cleanup.js`),[],{detached:!0,silent:!0});process.cleanup_process=e,process.on("SIGINT",async()=>{const o=m();e.send(JSON.stringify({process_ids:[...s,...o]})),process.exit()}),process.on("SIGTERM",async()=>{const o=m();e.send(JSON.stringify({process_ids:[...s,...o]})),process.exit()})},X=async(s=[])=>{const r=s?.find(c=>c?.path?.match(M.SETTINGS_FILE_NAME_REGEX)?.length>0),a=s?.find(c=>c?.path?.includes("i18n")),t=s?.find(c=>c?.path?.includes("index.html")),e=s?.find(c=>c?.path?.includes("index.css")||c?.path?.includes("css/")),o=s?.find(c=>c?.path?.includes("index.client.js"));process.hmr_server_process.send(JSON.stringify({type:"FILE_CHANGE",settings:r?(await h(process.env.NODE_ENV)).settings:null,i18n_change:!!a,index_html_change:!!t,index_css_change:!!e,index_client_change:!!o}))},Q=(s=0,r=!1,a={},t=[],e=!1)=>{process.hmr_server_process.on("message",async o=>{["HAS_HMR_CONNECTIONS","HAS_NO_HMR_CONNECTIONS","HMR_UPDATE_COMPLETE"].includes(o?.type)||process.loader.print(o),o?.type==="HAS_HMR_CONNECTIONS"&&(process.hmr_server_process.has_connections=!0),o?.type==="HAS_NO_HMR_CONNECTIONS"&&(process.hmr_server_process.has_connections=!1),o?.type==="HMR_UPDATE_COMPLETE"&&process.app_server_process&&!process.app_server_restarting&&(process.app_server_restarting=!0,R(s,r,a,t,e))})},W=()=>{process.hmr_server_process.on("error",s=>{p(s.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})}),process.hmr_server_process.stdout.on("data",s=>{console.log(s.toString())}),process.hmr_server_process.stderr.on("data",s=>{p(s.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})})},Z=(s=0,r="",a=!1,t={},e=[],o=!1)=>{process.hmr_server_process=L(s,r),d.push(process.hmr_server_process?.pid),W(),Q(s,a,t,e,o)},ss=async(s={})=>{const{settings:r}=await h(process.env.NODE_ENV),a=r?.config?.databases?JSON.stringify(r?.config?.databases):"",t=s?.config?.databases?JSON.stringify(s?.config?.databases):"";return a!==t},R=async(s=0,r=!1,a=null,t=[],e=!1)=>{q(async()=>{if(await ss(a)){const c=m();p(`Database configuration has changed in settings.${process.env.NODE_ENV}.json. Please restart your app to add, change, or remove databases.`,{level:"danger",docs:"https://cheatcode.co/docs/joystick/structure"}),k([process.hmr_server_process?.pid,process.app_server_process?.pid,...c]),process.exit(0)}else k([...process.app_server_process.external_process_ids||[]]),await E(process.env.PORT),N(s,r,t,e)},300)},es=(s=!1,r=!1,a=!1)=>{process.app_server_process.external_process_ids=[],process.app_server_process.on("message",t=>{t?.external_process_id&&(process.app_server_process.external_process_ids=[...process.app_server_process.external_process_ids||[],t?.external_process_id])}),process.app_server_process.on("error",t=>{a||p(t.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})}),process.app_server_process.stdout.on("data",async t=>{const e=t.toString(),o=e.includes("App running at:");if(a){process.loader.print(e);return}e&&o&&process.env.NODE_ENV!=="test"&&process.loader.print(e),e&&!o&&!e.includes("BUILD_ERROR")&&console.log(e),e&&o&&process.env.NODE_ENV==="test"&&Y(s),e&&o&&r&&process.env.NODE_ENV!=="test"&&setTimeout(async()=>{try{await D({__dirname:f})}catch(c){console.error("Error running integrated tests:",c)}},3e3)}),process.app_server_process.stderr.on("data",t=>{p(t.toString(),{level:"danger",docs:"https://cheatcode.co/docs/joystick"})})},N=(s=0,r=!1,a=[],t=!1,e=!1,o={})=>{process.app_server_process=S(s,r,a,o),d.push(process.app_server_process?.pid),es(r,t,e),process.app_server_restarting=!1},I=async(s={},r=null)=>{const a=s?.config?.databases?.map((t={})=>t?.provider);for(let t=0;t<a?.length;t+=1){const e=a[t];await U(e)}if(r){const t=a?.length>0?3e3:0;setTimeout(r,t)}},ts=(s={},r=2600)=>{process.title=s?.environment==="test"?"joystick_test":"joystick",process.project_folder=x.basename(process.cwd()),process.loader=new A,s?.environment==="test"&&(console.log(""),process.loader.print(`Initializing test environment...
`)),process.env.LOGS_PATH=s?.logs||null,process.env.NODE_ENV=s?.environment||"development",process.env.PORT=r,process.env.IS_DEBUG_MODE=s?.debug},rs=(s=2600)=>{p(`Port ${s} is already occupied. To start Joystick on this port, clear it and try again.`,{level:"danger"}),process.exit(0)},as=(s=2600)=>parseInt(s||2600,10),os=async()=>{const s=V(`${process.cwd()}/.joystick/build`);await y(s)&&await B(`${process.platform==="win32"?"rmdir /s /q":"rm -rf"} ${s}`)},cs=async()=>{const s=[];for(let r=0;r<b?.length;r+=1){const a=b[r],t=await y(`${process.cwd()}/${a.path}`),e=t&&await F(`${process.cwd()}/${a.path}`);a&&a.type==="file"&&(!t||t&&!e.isFile())&&s.push({type:"file",path:a.path}),a&&a.type==="directory"&&(!t||t&&!e.isDirectory())&&s.push({type:"directory",path:a.path})}if(s?.length>0){const r=s?.filter(e=>e.type==="file"),a=s?.filter(e=>e.type==="directory");let t=`The following paths are missing and required in a Joystick project:

`;if(r?.length>0){t+=`  ${u.yellow(">")} Required Files:

`;for(let e=0;e<r?.length;e+=1){const o=r[e],c=e+1===r?.length;t+=`  ${u.red(`/${o.path}
${c&&a?.length>0?`
`:""}`)}`}}if(a?.length>0){t+=`  ${u.yellow(">")} Required Directories:

`;for(let e=0;e<a?.length;e+=1){const o=a[e];t+=`  ${u.red(`/${o.path}
`)}`}}p(t,{level:"danger",docs:"https://cheatcode.co/docs/joystick/structure"}),process.exit(0)}},ns=async()=>{const s=await y(`${process.cwd()}/.joystick`),r=await y(`${process.cwd()}/tests`);process.env.NODE_ENV==="test"&&(!s||!r)&&(p("joystick test must be run in a directory with a .joystick folder and tests folder.",{level:"danger",docs:"https://cheatcode.co/docs/joystick/cli/test"}),process.exit(0)),process.env.NODE_ENV!=="test"&&!s&&(p("joystick start must be run in a directory with a .joystick folder.",{level:"danger",docs:"https://cheatcode.co/docs/joystick/cli/start"}),process.exit(0))},is=async(s={})=>{await ns(),await cs(),await os();const r=as(s?.port),a=await w(r),t=await w(r+1);a&&rs(r),t&&E(r),ts(s,r);let e,o;if(s?.tests&&s?.environment!=="test"){const n=await h(process.env.NODE_ENV,{skip_global_env:!0});e=n.settings,o=n.raw_settings}else{const n=await h(process.env.NODE_ENV);e=n.settings,o=n.raw_settings}await I(e),await T({environment:process.env.NODE_ENV,port:r,settings:e});const c=s?.tests&&s?.environment!=="test"?{JOYSTICK_SETTINGS:o}:{};s?.tests&&s?.environment!=="test"&&(await w(1977)&&await E(1977),setTimeout(async()=>{try{const g=await h("test",{skip_global_env:!0}),O=g.settings,$=g.raw_settings;await I(O,async()=>{try{await T({environment:"test",port:1977,settings:O});const i=S(l,!1,s?.imports||[],{NODE_ENV:"test",PORT:1977,LOGS_PATH:process.env.LOGS_PATH,ROOT_URL:process.env.ROOT_URL,JOYSTICK_SETTINGS:$});d.push(i?.pid),process.test_app_server_process=i,i.external_process_ids=[],i.on("message",_=>{_?.external_process_id&&(i.external_process_ids=[...i.external_process_ids||[],_?.external_process_id],d.push(_?.external_process_id))}),i.on("error",_=>{}),i.stdout.on("data",async _=>{}),i.stderr.on("data",_=>{})}catch(i){console.error("Error starting test server after database installation:",i)}})}catch(g){console.error("Error starting test server:",g)}},100)),s?._is_test_server?N(l,!1,s?.imports||[],!1,!0):G({hot_module_reload:(n=[])=>X(n),restart_app_server:()=>R(l,s?.watch,e,s?.imports,s?.tests),start_app_server:()=>N(l,s?.watch,s?.imports,s?.tests,s?._is_test_server,c),start_hmr_server:s?.environment!=="test"?()=>Z(l,f,s?.watch,e,s?.imports,s?.tests):null,run_tests:s?.tests?async()=>{setTimeout(async()=>{try{await D({__dirname:f})}catch(n){console.error("Error running tests after file change:",n)}},2e3)}:null},{excluded_paths:e?.config?.build?.excluded_paths,custom_copy_paths:e?.config?.build?.copy_paths?.map(n=>({path:n}))||[]}),z(d,l,f)};var Cs=is;export{Cs as default};
//# sourceMappingURL=index.js.map
