import u from"chalk";import S from"child_process";import C from"fs";import"os";import T,{dirname as P}from"path";import{fileURLToPath as V}from"url";import L from"util";import w from"./check_if_port_occupied.js";import p from"../cli_log.js";import m from"./get_database_process_ids.js";import G from"../get_platform_safe_path.js";import E from"../kill_port_process.js";import f from"../load_settings.js";import M from"../loader.js";import y from"../path_exists.js";import b from"../required_files.js";import k from"./start_app_server.js";import D from"./start_databases.js";import J from"./start_hmr_server.js";import q from"./watch_for_changes/index.js";import U from"../constants.js";import R from"./kill_process_ids.js";import F,{run_tests_integrated as N}from"./run_tests.js";import B from"../debounce.js";import K from"./databases/download_database_binary.js";const{stat:Y}=C.promises,z=L.promisify(S.exec),l=parseInt(process?.version?.split(".")[0]?.replace("v",""),10),X=V(import.meta.url),d=P(X),h=[],Q=async(s=!1)=>{const r=m();await F({watch:s,__dirname:d,process_ids:[...h,...r],cleanup_process:process.cleanup_process})},W=(s=[],r=0,o="")=>{const t=["--no-warnings"];r<19&&t.push("--experimental-specifier-resolution=node");const e=S.fork(T.resolve(`${o}/cleanup.js`),[],{detached:!0,silent:!0});process.cleanup_process=e,process.on("SIGINT",async()=>{const a=m();e.send(JSON.stringify({process_ids:[...s,...a]})),process.exit()}),process.on("SIGTERM",async()=>{const a=m();e.send(JSON.stringify({process_ids:[...s,...a]})),process.exit()})},Z=async(s=[])=>{const r=s?.find(c=>c?.path?.match(U.SETTINGS_FILE_NAME_REGEX)?.length>0),o=s?.find(c=>c?.path?.includes("i18n")),t=s?.find(c=>c?.path?.includes("index.html")),e=s?.find(c=>c?.path?.includes("index.css")||c?.path?.includes("css/")),a=s?.find(c=>c?.path?.includes("index.client.js"));process.hmr_server_process.send(JSON.stringify({type:"FILE_CHANGE",settings:r?(await f(process.env.NODE_ENV)).settings:null,i18n_change:!!o,index_html_change:!!t,index_css_change:!!e,index_client_change:!!a}))},ss=(s=0,r=!1,o={},t=[],e=!1)=>{process.hmr_server_process.on("message",async a=>{["HAS_HMR_CONNECTIONS","HAS_NO_HMR_CONNECTIONS","HMR_UPDATE_COMPLETE"].includes(a?.type)||process.loader.print(a),a?.type==="HAS_HMR_CONNECTIONS"&&(process.hmr_server_process.has_connections=!0),a?.type==="HAS_NO_HMR_CONNECTIONS"&&(process.hmr_server_process.has_connections=!1),a?.type==="HMR_UPDATE_COMPLETE"&&process.app_server_process&&!process.app_server_restarting&&(process.app_server_restarting=!0,I(s,r,o,t,e))})},es=()=>{process.hmr_server_process.on("error",s=>{p(s.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})}),process.hmr_server_process.stdout.on("data",s=>{console.log(s.toString())}),process.hmr_server_process.stderr.on("data",s=>{p(s.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})})},ts=(s=0,r="",o=!1,t={},e=[],a=!1)=>{process.hmr_server_process=J(s,r),h.push(process.hmr_server_process?.pid),es(),ss(s,o,t,e,a)},rs=async(s={})=>{const{settings:r}=await f(process.env.NODE_ENV),o=r?.config?.databases?JSON.stringify(r?.config?.databases):"",t=s?.config?.databases?JSON.stringify(s?.config?.databases):"";return o!==t},I=async(s=0,r=!1,o=null,t=[],e=!1)=>{B(async()=>{if(await rs(o)){const c=m();p(`Database configuration has changed in settings.${process.env.NODE_ENV}.json. Please restart your app to add, change, or remove databases.`,{level:"danger",docs:"https://cheatcode.co/docs/joystick/structure"}),R([process.hmr_server_process?.pid,process.app_server_process?.pid,...c]),process.exit(0)}else R([...process.app_server_process.external_process_ids||[]]),await E(process.env.PORT),O(s,r,t,e)},300)},os=(s=!1,r=!1,o=!1)=>{process.app_server_process.external_process_ids=[],process.app_server_process.on("message",t=>{t?.external_process_id&&(process.app_server_process.external_process_ids=[...process.app_server_process.external_process_ids||[],t?.external_process_id])}),process.app_server_process.on("error",t=>{o||p(t.toString(),{level:"danger",docs:"https://github.com/cheatcode/joystick"})}),process.app_server_process.stdout.on("data",async t=>{const e=t.toString(),a=e.includes("App running at:");if(o){process.loader.print(e);return}e&&a&&process.env.NODE_ENV!=="test"&&process.loader.print(e),e&&!a&&!e.includes("BUILD_ERROR")&&console.log(e),e&&a&&process.env.NODE_ENV==="test"&&Q(s),e&&a&&r&&process.env.NODE_ENV!=="test"&&setTimeout(async()=>{try{await N({__dirname:d})}catch(c){console.error("Error running integrated tests:",c)}},1e3)}),process.app_server_process.stderr.on("data",t=>{p(t.toString(),{level:"danger",docs:"https://cheatcode.co/docs/joystick"})})},O=(s=0,r=!1,o=[],t=!1,e=!1,a={})=>{process.app_server_process=k(s,r,o,a),h.push(process.app_server_process?.pid),os(r,t,e),process.app_server_restarting=!1},$=async(s={},r=null)=>{const o=s?.config?.databases?.map((t={})=>t?.provider);for(let t=0;t<o?.length;t+=1){const e=o[t];await K(e)}if(r){const t=o?.length>0?3e3:0;setTimeout(r,t)}},as=(s={},r=2600)=>{process.title=s?.environment==="test"?"joystick_test":"joystick",process.project_folder=T.basename(process.cwd()),process.loader=new M,s?.environment==="test"&&(console.log(""),process.loader.print(`Initializing test environment...
`)),process.env.LOGS_PATH=s?.logs||null,process.env.NODE_ENV=s?.environment||"development",process.env.PORT=r,process.env.IS_DEBUG_MODE=s?.debug},cs=(s=2600)=>{p(`Port ${s} is already occupied. To start Joystick on this port, clear it and try again.`,{level:"danger"}),process.exit(0)},ns=(s=2600)=>parseInt(s||2600,10),is=async()=>{const s=G(`${process.cwd()}/.joystick/build`);await y(s)&&await z(`${process.platform==="win32"?"rmdir /s /q":"rm -rf"} ${s}`)},ps=async()=>{const s=[];for(let r=0;r<b?.length;r+=1){const o=b[r],t=await y(`${process.cwd()}/${o.path}`),e=t&&await Y(`${process.cwd()}/${o.path}`);o&&o.type==="file"&&(!t||t&&!e.isFile())&&s.push({type:"file",path:o.path}),o&&o.type==="directory"&&(!t||t&&!e.isDirectory())&&s.push({type:"directory",path:o.path})}if(s?.length>0){const r=s?.filter(e=>e.type==="file"),o=s?.filter(e=>e.type==="directory");let t=`The following paths are missing and required in a Joystick project:

`;if(r?.length>0){t+=`  ${u.yellow(">")} Required Files:

`;for(let e=0;e<r?.length;e+=1){const a=r[e],c=e+1===r?.length;t+=`  ${u.red(`/${a.path}
${c&&o?.length>0?`
`:""}`)}`}}if(o?.length>0){t+=`  ${u.yellow(">")} Required Directories:

`;for(let e=0;e<o?.length;e+=1){const a=o[e];t+=`  ${u.red(`/${a.path}
`)}`}}p(t,{level:"danger",docs:"https://cheatcode.co/docs/joystick/structure"}),process.exit(0)}},_s=async()=>{const s=await y(`${process.cwd()}/.joystick`),r=await y(`${process.cwd()}/tests`);process.env.NODE_ENV==="test"&&(!s||!r)&&(p("joystick test must be run in a directory with a .joystick folder and tests folder.",{level:"danger",docs:"https://cheatcode.co/docs/joystick/cli/test"}),process.exit(0)),process.env.NODE_ENV!=="test"&&!s&&(p("joystick start must be run in a directory with a .joystick folder.",{level:"danger",docs:"https://cheatcode.co/docs/joystick/cli/start"}),process.exit(0))},ls=async(s={})=>{await _s(),await ps(),await is();const r=ns(s?.port),o=await w(r),t=await w(r+1);o&&cs(r),t&&E(r),as(s,r);let e,a;if(s?.tests&&s?.environment!=="test"){const n=await f(process.env.NODE_ENV,{skip_global_env:!0});e=n.settings,a=n.raw_settings}else{const n=await f(process.env.NODE_ENV);e=n.settings,a=n.raw_settings}await $(e),await D({environment:process.env.NODE_ENV,port:r,settings:e});const c=s?.tests&&s?.environment!=="test"?{JOYSTICK_SETTINGS:a}:{};s?.tests&&s?.environment!=="test"&&(await w(1977)&&await E(1977),setTimeout(async()=>{try{const g=await f("test",{skip_global_env:!0}),v=g.settings,j=g.raw_settings;await $(v,async()=>{try{await D({environment:"test",port:1977,settings:v}),setTimeout(()=>{const i=k(l,!1,s?.imports||[],{NODE_ENV:"test",PORT:1977,LOGS_PATH:process.env.LOGS_PATH,ROOT_URL:process.env.ROOT_URL,JOYSTICK_SETTINGS:j});h.push(i?.pid),process.test_app_server_process=i,i.external_process_ids=[],i.on("message",_=>{_?.external_process_id&&(i.external_process_ids=[...i.external_process_ids||[],_?.external_process_id],h.push(_?.external_process_id))}),i.on("error",_=>{}),i.stdout.on("data",async _=>{const x=_.toString(),H=x.includes("App running at:");if(x&&H)try{await N({__dirname:d})}catch(A){console.error("Error running integrated tests:",A)}}),i.stderr.on("data",_=>{})},3e3)}catch(i){console.error("Error starting test server after database installation:",i)}})}catch(g){console.error("Error starting test server:",g)}},100)),s?._is_test_server?O(l,!1,s?.imports||[],!1,!0):q({hot_module_reload:(n=[])=>Z(n),restart_app_server:()=>I(l,s?.watch,e,s?.imports,s?.tests),start_app_server:()=>O(l,s?.watch,s?.imports,s?.tests,s?._is_test_server,c),start_hmr_server:s?.environment!=="test"?()=>ts(l,d,s?.watch,e,s?.imports,s?.tests):null,run_tests:s?.tests?async()=>{setTimeout(async()=>{try{await N({__dirname:d})}catch(n){console.error("Error running tests after file change:",n)}},2e3)}:null},{excluded_paths:e?.config?.build?.excluded_paths,custom_copy_paths:e?.config?.build?.copy_paths?.map(n=>({path:n}))||[]}),W(h,l,d)};var Vs=ls;export{Vs as default};
//# sourceMappingURL=index.js.map
