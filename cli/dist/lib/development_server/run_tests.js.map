{
  "version": 3,
  "sources": ["../../../src/lib/development_server/run_tests.js"],
  "sourcesContent": ["import child_process from \"child_process\";\nimport cli_log from \"../cli_log.js\";\n\nconst handle_ava_stderr = (stderr = '') => {\n  // NOTE: Squash output about using a configuration file (we always do in the framework).\n  if (stderr?.includes('Using configuration')) {\n    return null;\n  }\n\n  if (stderr?.includes('No tests found')) {\n    return cli_log('No tests found. Add tests in the /tests folder at the root of your Joystick app.', {\n      level: 'danger',\n      docs: 'https://cheatcode.co/docs/joystick/test/setup',\n    });\n  }\n  \n  console.log(stderr);\n};\n\nconst handle_ava_stdout = (stdout = '') => {\n  // NOTE: Squash output about using a configuration file (we always do in the framework).\n  if (stdout?.includes('Using configuration')) {\n    return null;\n  }\n\n  if (stdout?.includes('No tests found in')) {\n    const [message] = stdout?.split(',');\n    return console.log(`${message}\\n`);\n  }\n  \n  console.log(stdout);\n};\n\nconst handle_ava_stdio = (ava = {}, run_tests_options = {}) => {\n  ava.stdout.on('data', function (data) {\n    const string = data.toString();\n    handle_ava_stdout(string, run_tests_options);\n  });\n\n  ava.stderr.on('data', function (data) {\n    const string = data.toString();\n    handle_ava_stderr(string, run_tests_options);\n  });\n};\n\nconst run_tests = (run_tests_options = {}) => {\n  // NOTE: A little bananas to reason through this. In order for Ava to run w/o errors,\n  // the Ava binary being run here has to be identical to the one used in @joystick.js/test.\n  // That would equal the copy of Ava that's installed in a Joystick app's node_modules\n  // directory, not the node_modules directory of the CLI here. We can guarantee that will\n  // exist for the CLI here because a developer has to install @joystick.js/test which will\n  // add Ava as a dependency to their app in order to write tests.\n  const ava_path = `${process.cwd()}/node_modules/.bin/ava`;\n  const tap_reporter_path = `${run_tests_options?.__dirname}/tap_reporter.js`;\n  \n  return new Promise((resolve) => {\n    // NOTE: Despite using the app's node_modules path to reference Ava, we still want to reference\n    // the internal path here for the default test config in /lib/dev/tests.config.js.\n    // Use TAP output and pipe to custom reporter\n    const ava = child_process.exec(`DEBUG=ava:watcher && ${ava_path} --config ${run_tests_options?.__dirname}/ava_config.js --tap ${run_tests_options?.watch ? '--watch' : ''} | node ${tap_reporter_path}`, {\n      stdio: 'inherit',\n      env: {\n        ...(process.env),\n        databases: process.databases,\n        FORCE_COLOR: \"1\"\n      }\n    }, (error) => {\n      if (!error) {\n        // NOTE: Do this here because the standard SIGINT and SIGTERM hooks the dev process\n        // listens for don't catch a clean exit (and the process.exit() hook fires after exit).\n        run_tests_options.cleanup_process.send(JSON.stringify(({ process_ids: run_tests_options?.process_ids })));\n        process.exit(0);\n      } else {\n        // NOTE: Do not report any Ava errors here because they're picked up by the handle_ava_stdio();\n        // hook below. Just do a clean exit here so Node doesn't hang.\n        run_tests_options.cleanup_process.send(JSON.stringify(({ process_ids: run_tests_options?.process_ids })));\n        process.exit(0);\n      }\n    });\n\n    handle_ava_stdio(ava, run_tests_options);\n  });\n};\n\nexport default run_tests;\n"],
  "mappings": "AAAA,OAAOA,MAAmB,gBAC1B,OAAOC,MAAa,gBAEpB,MAAMC,EAAoB,CAACC,EAAS,KAAO,CAEzC,GAAIA,GAAQ,SAAS,qBAAqB,EACxC,OAAO,KAGT,GAAIA,GAAQ,SAAS,gBAAgB,EACnC,OAAOF,EAAQ,mFAAoF,CACjG,MAAO,SACP,KAAM,+CACR,CAAC,EAGH,QAAQ,IAAIE,CAAM,CACpB,EAEMC,EAAoB,CAACC,EAAS,KAAO,CAEzC,GAAIA,GAAQ,SAAS,qBAAqB,EACxC,OAAO,KAGT,GAAIA,GAAQ,SAAS,mBAAmB,EAAG,CACzC,KAAM,CAACC,CAAO,EAAID,GAAQ,MAAM,GAAG,EACnC,OAAO,QAAQ,IAAI,GAAGC,CAAO;AAAA,CAAI,CACnC,CAEA,QAAQ,IAAID,CAAM,CACpB,EAEME,EAAmB,CAACC,EAAM,CAAC,EAAGC,EAAoB,CAAC,IAAM,CAC7DD,EAAI,OAAO,GAAG,OAAQ,SAAUE,EAAM,CACpC,MAAMC,EAASD,EAAK,SAAS,EAC7BN,EAAkBO,EAAQF,CAAiB,CAC7C,CAAC,EAEDD,EAAI,OAAO,GAAG,OAAQ,SAAUE,EAAM,CACpC,MAAMC,EAASD,EAAK,SAAS,EAC7BR,EAAkBS,EAAQF,CAAiB,CAC7C,CAAC,CACH,EAEMG,EAAY,CAACH,EAAoB,CAAC,IAAM,CAO5C,MAAMI,EAAW,GAAG,QAAQ,IAAI,CAAC,yBAC3BC,EAAoB,GAAGL,GAAmB,SAAS,mBAEzD,OAAO,IAAI,QAASM,GAAY,CAI9B,MAAMP,EAAMR,EAAc,KAAK,wBAAwBa,CAAQ,aAAaJ,GAAmB,SAAS,wBAAwBA,GAAmB,MAAQ,UAAY,EAAE,WAAWK,CAAiB,GAAI,CACvM,MAAO,UACP,IAAK,CACH,GAAI,QAAQ,IACZ,UAAW,QAAQ,UACnB,YAAa,GACf,CACF,EAAIE,GAAU,CACPA,GAQHP,EAAkB,gBAAgB,KAAK,KAAK,UAAW,CAAE,YAAaA,GAAmB,WAAY,CAAE,CAAC,EACxG,QAAQ,KAAK,CAAC,IANdA,EAAkB,gBAAgB,KAAK,KAAK,UAAW,CAAE,YAAaA,GAAmB,WAAY,CAAE,CAAC,EACxG,QAAQ,KAAK,CAAC,EAOlB,CAAC,EAEDF,EAAiBC,EAAKC,CAAiB,CACzC,CAAC,CACH,EAEA,IAAOQ,EAAQL",
  "names": ["child_process", "cli_log", "handle_ava_stderr", "stderr", "handle_ava_stdout", "stdout", "message", "handle_ava_stdio", "ava", "run_tests_options", "data", "string", "run_tests", "ava_path", "tap_reporter_path", "resolve", "error", "run_tests_default"]
}
