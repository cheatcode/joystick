{
  "version": 3,
  "sources": ["../../../src/lib/development_server/run_tests.js"],
  "sourcesContent": ["import child_process from \"child_process\";\nimport cli_log from \"../cli_log.js\";\nimport chalk from 'chalk';\n\nconst handle_ava_stderr = (stderr = '') => {\n  // NOTE: Squash output about using a configuration file (we always do in the framework).\n  if (stderr?.includes('Using configuration')) {\n    return null;\n  }\n\n  if (stderr?.includes('No tests found')) {\n    return cli_log('No tests found. Add tests in the /tests folder at the root of your Joystick app.', {\n      level: 'danger',\n      docs: 'https://cheatcode.co/docs/joystick/test/setup',\n    });\n  }\n  \n  console.log(stderr);\n};\n\nconst handle_ava_stdout = (stdout = '') => {\n  // NOTE: Squash output about using a configuration file (we always do in the framework).\n  if (stdout?.includes('Using configuration')) {\n    return null;\n  }\n\n  if (stdout?.includes('No tests found in')) {\n    const [message] = stdout?.split(',');\n    return console.log(`${message}\\n`);\n  }\n  \n  console.log(stdout);\n};\n\nconst handle_ava_stdio = (ava = {}, run_tests_options = {}) => {\n  ava.stdout.on('data', function (data) {\n    const string = data.toString();\n    handle_ava_stdout(string, run_tests_options);\n  });\n\n  ava.stderr.on('data', function (data) {\n    const string = data.toString();\n    handle_ava_stderr(string, run_tests_options);\n  });\n};\n\nconst run_tests_integrated = (run_tests_options = {}) => {\n  const ava_path = `${process.cwd()}/node_modules/.bin/ava`;\n  \n  return new Promise((resolve, reject) => {\n    // NOTE: Store original process.exit to restore later\n    const original_exit = process.exit;\n    const original_listeners = process.listeners('exit');\n    \n    // NOTE: Override process.exit to prevent ava from exiting the parent process\n    process.exit = (code) => {\n      // NOTE: Don't actually exit, just return\n      return;\n    };\n\n    // NOTE: Remove any existing exit listeners that might cause issues\n    process.removeAllListeners('exit');\n\n    // NOTE: Run ava directly and handle TAP output inline to avoid process exit issues\n    const ava = child_process.spawn(ava_path, [\n      '--config', `${run_tests_options?.__dirname}/ava_config.js`,\n      '--tap'\n    ], {\n      env: {\n        ...(process.env),\n        databases: process.databases,\n        FORCE_COLOR: \"1\"\n      }\n    });\n\n    // NOTE: Import and use the tap reporter functionality directly\n    let buffer = '';\n    let passed = 0;\n    let failed = 0;\n    let pending_fail = null;\n    let in_diag = false;\n    let diag_lines = [];\n    const start_ns = process.hrtime.bigint();\n\n    const green = (s) => `\\x1b[32m${s}\\x1b[0m`;\n    const red = (s) => `\\x1b[31m${s}\\x1b[0m`;\n    const gray = (s) => `\\x1b[90m${s}\\x1b[0m`;\n\n    const parse_title = (line) => {\n      const ok_match = line.match(/^ok\\s+\\d+\\s+(.*)$/);\n      if (ok_match)\n        return { status: 'ok', title: ok_match[1].trim().replace(/^- /, '') };\n      const not_ok_match = line.match(/^not ok\\s+\\d+\\s+(.*)$/);\n      if (not_ok_match)\n        return {\n          status: 'not_ok',\n          title: not_ok_match[1].trim().replace(/^- /, ''),\n        };\n      return null;\n    };\n\n    const print_pass = (title) => {\n      process.stdout.write(`${green('\u2714')} ${title}\\n`);\n    };\n\n    const print_fail = (title, detail) => {\n      process.stdout.write(`\\n${red('-!-')}\\n`);\n      process.stdout.write(`\\n${red('\u2716')} ${title}\\n\\n`);\n      process.stdout.write(`${red('Error:')}\\n\\n`);\n      if (detail && detail.trim()) {\n        process.stdout.write(`  ${detail.trim()}\\n\\n`);\n      } else {\n        process.stdout.write(`  (no stack trace)\\n\\n`);\n      }\n      process.stdout.write(`${red('-!-')}\\n\\n`);\n    };\n\n    const handle_line = (raw_line) => {\n      const line = raw_line.replace(/\\r$/, '');\n      if (!line) return;\n\n      if (in_diag) {\n        if (line.trim() === '...') {\n          print_fail(pending_fail?.title || '(unknown)', diag_lines.join('\\n'));\n          failed += 1;\n          pending_fail = null;\n          in_diag = false;\n          diag_lines = [];\n          return;\n        }\n        diag_lines.push(line);\n        return;\n      }\n\n      if (/^\\s*---\\s*$/.test(line) && pending_fail) {\n        in_diag = true;\n        diag_lines = [];\n        return;\n      }\n\n      const parsed = parse_title(line);\n      if (parsed) {\n        if (parsed.status === 'ok') {\n          passed += 1;\n          print_pass(parsed.title);\n        } else if (parsed.status === 'not_ok') {\n          pending_fail = { title: parsed.title };\n        }\n        return;\n      }\n    };\n\n    // NOTE: Process ava stdout (TAP output)\n    ava.stdout.on('data', (chunk) => {\n      buffer += chunk.toString();\n      const parts = buffer.split('\\n');\n      buffer = parts.pop() || '';\n      for (const part of parts) handle_line(part);\n    });\n\n    // NOTE: Handle ava stderr directly\n    ava.stderr.on('data', (data) => {\n      const stderr_string = data.toString();\n      if (!stderr_string.includes('Using configuration')) {\n        process.stderr.write(data);\n      }\n    });\n\n    // NOTE: Handle process exit without propagating to parent\n    ava.on('exit', (code, signal) => {\n      // NOTE: Restore original process.exit and listeners\n      process.exit = original_exit;\n      original_listeners.forEach(listener => process.on('exit', listener));\n\n      // NOTE: Process any remaining buffer\n      if (buffer.trim()) {\n        handle_line(buffer);\n      }\n\n      // NOTE: Handle any pending failures\n      if (pending_fail) {\n        print_fail(pending_fail.title, diag_lines.join('\\n'));\n        failed += 1;\n      }\n\n      // NOTE: Print summary\n      const end_ns = process.hrtime.bigint();\n      const duration_ms = Number(end_ns - start_ns) / 1e6;\n      const duration_str =\n        duration_ms < 1000\n          ? `${duration_ms.toFixed(0)} ms`\n          : duration_ms < 60000\n          ? `${(duration_ms / 1000).toFixed(2)} s`\n          : `${Math.floor(duration_ms / 60000)}m ${(\n              (duration_ms % 60000) /\n              1000\n            ).toFixed(2)}s`;\n\n      process.stdout.write(\n        `\\n${gray('===')}\\n\\n${green('Passed:')} ${passed}\\n${red(\n          'Failed:'\n        )} ${failed}\\n${gray('Duration:')} ${duration_str}\\n\\n`\n      );\n\n      // NOTE: Always resolve, never reject - we want to keep servers running\n      resolve();\n    });\n\n    // NOTE: Handle any errors without crashing parent process\n    ava.on('error', (error) => {\n      // NOTE: Restore original process.exit and listeners on error\n      process.exit = original_exit;\n      original_listeners.forEach(listener => process.on('exit', listener));\n      \n      console.error('Test runner error:', error.message);\n      resolve();\n    });\n  });\n};\n\nconst run_tests = (run_tests_options = {}) => {\n  // NOTE: A little bananas to reason through this. In order for Ava to run w/o errors,\n  // the Ava binary being run here has to be identical to the one used in @joystick.js/test.\n  // That would equal the copy of Ava that's installed in a Joystick app's node_modules\n  // directory, not the node_modules directory of the CLI here. We can guarantee that will\n  // exist for the CLI here because a developer has to install @joystick.js/test which will\n  // add Ava as a dependency to their app in order to write tests.\n  const ava_path = `${process.cwd()}/node_modules/.bin/ava`;\n  const tap_reporter_path = `${run_tests_options?.__dirname}/tap_reporter.js`;\n  \n  return new Promise((resolve) => {\n    // NOTE: Despite using the app's node_modules path to reference Ava, we still want to reference\n    // the internal path here for the default test config in /lib/dev/tests.config.js.\n    // Use TAP output and pipe to custom reporter only when not in watch mode\n    const base_command = `DEBUG=ava:watcher && ${ava_path} --config ${run_tests_options?.__dirname}/ava_config.js`;\n    const watch_flag = run_tests_options?.watch ? '--watch' : '';\n    const tap_pipe = run_tests_options?.watch ? '' : `--tap | node ${tap_reporter_path}`;\n    const full_command = `${base_command} ${watch_flag} ${tap_pipe}`;\n    \n    const ava = child_process.exec(full_command, {\n      stdio: 'inherit',\n      env: {\n        ...(process.env),\n        databases: process.databases,\n        FORCE_COLOR: \"1\"\n      }\n    }, (error) => {\n      if (!error) {\n        // NOTE: Do this here because the standard SIGINT and SIGTERM hooks the dev process\n        // listens for don't catch a clean exit (and the process.exit() hook fires after exit).\n        run_tests_options.cleanup_process.send(JSON.stringify(({ process_ids: run_tests_options?.process_ids })));\n        process.exit(0);\n      } else {\n        // NOTE: Do not report any Ava errors here because they're picked up by the handle_ava_stdio();\n        // hook below. Just do a clean exit here so Node doesn't hang.\n        run_tests_options.cleanup_process.send(JSON.stringify(({ process_ids: run_tests_options?.process_ids })));\n        process.exit(0);\n      }\n    });\n\n    handle_ava_stdio(ava, run_tests_options);\n  });\n};\n\nexport { run_tests_integrated };\nexport default run_tests;\n"],
  "mappings": "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",
  "names": ["child_process", "cli_log", "handle_ava_stderr", "stderr", "handle_ava_stdout", "stdout", "message", "handle_ava_stdio", "ava", "run_tests_options", "data", "string", "run_tests_integrated", "ava_path", "resolve", "reject", "original_exit", "original_listeners", "code", "buffer", "passed", "failed", "pending_fail", "in_diag", "diag_lines", "start_ns", "green", "red", "gray", "parse_title", "line", "ok_match", "not_ok_match", "print_pass", "title", "print_fail", "detail", "handle_line", "raw_line", "parsed", "chunk", "parts", "part", "signal", "listener", "end_ns", "duration_ms", "duration_str", "error", "run_tests", "tap_reporter_path", "base_command", "watch_flag", "tap_pipe", "full_command", "run_tests_default"]
}
