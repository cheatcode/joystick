{
  "version": 3,
  "sources": ["../../../../src/lib/development_server/watch_for_changes/get_file_codependencies.js"],
  "sourcesContent": ["import read_file_dependency_map from \"./read_file_dependency_map.js\";\nimport path_exists from '../../path_exists.js';\nimport get_platform_safe_path from '../../get_platform_safe_path.js';\n\nconst find_codependencies_in_map = (path_to_find = '', map = {}) => {\n  const matching_codependents = Object.entries(map)\n    .filter(([_codependent_path, codependent_dependencies]) => {\n      const has_matching_imports =\n        codependent_dependencies &&\n        codependent_dependencies.imports &&\n        codependent_dependencies.imports.some((codependent_dependency) => {\n          // NOTE: If a file is renamed to use lowercase (or vice versa), the dependent file\n          // should respect that change, even if the developer forgets to update the import\n          // path's casing.\n\n          return codependent_dependency.absolute_path.includes(path_to_find) || codependent_dependency.absolute_path?.toLowerCase()?.includes(path_to_find);\n        });\n        \n        const has_matching_requires =\n        codependent_dependencies &&\n        codependent_dependencies.requires &&\n        codependent_dependencies.requires.some((codependent_dependency) => {\n          // NOTE: If a file is renamed to use lowercase (or vice versa), the dependent file\n          // should respect that change, even if the developer forgets to update the import\n          // path's casing.\n\n          return codependent_dependency.absolute_path.includes(path_to_find) || codependent_dependency.absolute_path?.toLowerCase()?.includes(path_to_find);\n        });\n\n      return has_matching_imports || has_matching_requires;\n    });\n\n  return matching_codependents.map(([matching_codependent_path]) => {\n      return matching_codependent_path.replace(\n        get_platform_safe_path(`${process.cwd()}/`),\n        \"\"\n      );\n    });\n};\n\nconst get_file_codependencies = async (path_to_find = \"\") => {\n  const file_dependency_map = await read_file_dependency_map();\n  const codpendencies = find_codependencies_in_map(\n    path_to_find,\n    file_dependency_map\n  );\n\n  return Promise.all(codpendencies.filter((codependency) => {\n    return path_exists(codependency);\n  }));\n};\n\nexport default get_file_codependencies;\n"],
  "mappings": "AAAA,OAAOA,MAA8B,gCACrC,OAAOC,MAAiB,uBACxB,OAAOC,MAA4B,kCAEnC,MAAMC,EAA6B,CAACC,EAAe,GAAIC,EAAM,CAAC,IAC9B,OAAO,QAAQA,CAAG,EAC7C,OAAO,CAAC,CAACC,EAAmBC,CAAwB,IAAM,CACzD,MAAMC,EACJD,GACAA,EAAyB,SACzBA,EAAyB,QAAQ,KAAME,GAK9BA,EAAuB,cAAc,SAASL,CAAY,GAAKK,EAAuB,eAAe,YAAY,GAAG,SAASL,CAAY,CACjJ,EAEKM,EACNH,GACAA,EAAyB,UACzBA,EAAyB,SAAS,KAAME,GAK/BA,EAAuB,cAAc,SAASL,CAAY,GAAKK,EAAuB,eAAe,YAAY,GAAG,SAASL,CAAY,CACjJ,EAEH,OAAOI,GAAwBE,CACjC,CAAC,EAE0B,IAAI,CAAC,CAACC,CAAyB,IACjDA,EAA0B,QAC/BT,EAAuB,GAAG,QAAQ,IAAI,CAAC,GAAG,EAC1C,EACF,CACD,EAGCU,EAA0B,MAAOR,EAAe,KAAO,CAC3D,MAAMS,EAAsB,MAAMb,EAAyB,EACrDc,EAAgBX,EACpBC,EACAS,CACF,EAEA,OAAO,QAAQ,IAAIC,EAAc,OAAQC,GAChCd,EAAYc,CAAY,CAChC,CAAC,CACJ,EAEA,IAAOC,EAAQJ",
  "names": ["read_file_dependency_map", "path_exists", "get_platform_safe_path", "find_codependencies_in_map", "path_to_find", "map", "_codependent_path", "codependent_dependencies", "has_matching_imports", "codependent_dependency", "has_matching_requires", "matching_codependent_path", "get_file_codependencies", "file_dependency_map", "codpendencies", "codependency", "get_file_codependencies_default"]
}
