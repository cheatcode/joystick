import p from"child_process";import u from"fs";import f from"os";import l from"../../../get_platform_safe_path.js";import w from"../../../get_process_id_from_port.js";import y from"../../../kill_port_process.js";import h from"../../../path_exists.js";const{mkdir:g}=u.promises,k=()=>"redis-server",x=(r=2610)=>new Promise((e,o)=>{const d=k(),m=`${f.homedir()}/.joystick/databases/redis/${d}`,_=["--port",r,"--dir",l(`./.joystick/data/redis_${r}`),"--save","60","1","--loglevel","nothing"],i=p.spawn(m,_.filter(t=>!!t)),a=setTimeout(()=>{o(new Error("Redis startup timed out after 30 seconds"))},3e4);let c=!1;const n=async()=>{await new Promise(t=>setTimeout(t,2e3));try{const t=await w(r);if(t)return clearTimeout(a),e(parseInt(t,10))}catch{}};i.stdout.on("data",async t=>{const s=t?.toString();!c&&s.trim()&&(c=!0,await n())}),i.stderr.on("data",async t=>{const s=t.toString();if(s.includes("FATAL")||s.includes("Can't open")||s.includes("Permission denied")){clearTimeout(a),o(new Error(`Redis startup failed: ${s.trim()}`));return}!c&&s.trim()&&(c=!0,await n())}),i.on("error",t=>{clearTimeout(a),o(t)}),i.on("exit",t=>{t!==0&&(clearTimeout(a),o(new Error(`Redis process exited with code ${t}`)))})}),T=async(r=2610)=>{const e=await h(`.joystick/data/redis_${r}`);return e||await g(`.joystick/data/redis_${r}`,{recursive:!0}),e},$=async(r=2610)=>{await T(r);try{return await y(r),await x(r)}catch(e){console.warn(e),process.exit(1)}};var S=$;export{S as default};
//# sourceMappingURL=index.js.map
