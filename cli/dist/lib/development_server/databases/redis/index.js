import l from"child_process";import w from"fs";import y from"os";import d from"path";import h from"../../../get_platform_safe_path.js";import k from"../../../get_process_id_from_port.js";import g from"../../../kill_port_process.js";import N from"../../../path_exists.js";import x from"../../../get_architecture.js";const{mkdir:R}=w.promises,T=()=>"redis-server",v=(r=2610)=>new Promise((s,i)=>{const m=T(),_=x(),p=d.join(y.homedir(),".joystick","databases","redis",_),u=d.join(p,m),f=["--port",r,"--dir",h(`./.joystick/data/redis_${r}`),"--save","60","1","--loglevel","notice"],o=l.spawn(u,f.filter(t=>!!t)),a=setTimeout(()=>{i(new Error("Redis startup timed out after 30 seconds"))},3e4);let c=!1;const n=async()=>{await new Promise(t=>setTimeout(t,2e3));try{const t=await k(r);if(t)return clearTimeout(a),s(parseInt(t,10))}catch{}};o.stdout.on("data",async t=>{const e=t?.toString();!e.includes("WARNING")&&e.includes("# WARNING"),!c&&e.trim()&&(c=!0,await n())}),o.stderr.on("data",async t=>{const e=t.toString();if(e.includes("FATAL")||e.includes("Can't open")||e.includes("Permission denied")){clearTimeout(a),i(new Error(`Redis startup failed: ${e.trim()}`));return}!e.includes("WARNING")&&e.includes("# WARNING"),!c&&e.trim()&&(c=!0,await n())}),o.on("error",t=>{clearTimeout(a),i(t)}),o.on("exit",t=>{t!==0&&(clearTimeout(a),i(new Error(`Redis process exited with code ${t}`)))})}),A=async(r=2610)=>{const s=await N(`.joystick/data/redis_${r}`);return s||await R(`.joystick/data/redis_${r}`,{recursive:!0}),s},j=async(r=2610)=>{await A(r);try{return await g(r),await v(r)}catch(s){console.warn(s),process.exit(1)}};var F=j;export{F as default};
//# sourceMappingURL=index.js.map
