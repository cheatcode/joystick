import u from"child_process";import p from"fs";import f from"os";import l from"../../../get_platform_safe_path.js";import w from"../../../get_process_id_from_port.js";import y from"../../../kill_port_process.js";import h from"../../../path_exists.js";const{mkdir:k}=p.promises,N=()=>"redis-server",g=(s=2610)=>new Promise((r,i)=>{const d=N(),m=`${f.homedir()}/.joystick/databases/redis/${d}`,_=["--port",s,"--dir",l(`./.joystick/data/redis_${s}`),"--save","60","1","--loglevel","notice"],o=u.spawn(m,_.filter(t=>!!t)),a=setTimeout(()=>{i(new Error("Redis startup timed out after 30 seconds"))},3e4);let c=!1;const n=async()=>{await new Promise(t=>setTimeout(t,2e3));try{const t=await w(s);if(t)return clearTimeout(a),r(parseInt(t,10))}catch{}};o.stdout.on("data",async t=>{const e=t?.toString();!e.includes("WARNING")&&e.includes("# WARNING"),!c&&e.trim()&&(c=!0,await n())}),o.stderr.on("data",async t=>{const e=t.toString();if(e.includes("FATAL")||e.includes("Can't open")||e.includes("Permission denied")){clearTimeout(a),i(new Error(`Redis startup failed: ${e.trim()}`));return}!e.includes("WARNING")&&e.includes("# WARNING"),!c&&e.trim()&&(c=!0,await n())}),o.on("error",t=>{clearTimeout(a),i(t)}),o.on("exit",t=>{t!==0&&(clearTimeout(a),i(new Error(`Redis process exited with code ${t}`)))})}),x=async(s=2610)=>{const r=await h(`.joystick/data/redis_${s}`);return r||await k(`.joystick/data/redis_${s}`,{recursive:!0}),r},R=async(s=2610)=>{await x(s);try{return await y(s),await g(s)}catch(r){console.warn(r),process.exit(1)}};var b=R;export{b as default};
//# sourceMappingURL=index.js.map
