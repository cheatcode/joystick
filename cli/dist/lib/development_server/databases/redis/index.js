import d from"child_process";import _ from"fs";import p from"os";import m from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import l from"../../../kill_port_process.js";import u from"../../../path_exists.js";const{mkdir:y}=_.promises,w=()=>"redis-server",g=(t=2610)=>new Promise(s=>{const a=w(),i=`${p.homedir()}/.joystick/databases/redis/${a}`,c=["--port",t,"--dir",m(`./.joystick/data/redis_${t}`),"--save","60","1","--loglevel","warning"],o=d.spawn(i,c.filter(r=>!!r));o.stdout.on("data",async r=>{if((r?.toString()).includes("Ready to accept connections")){const n=await f(t);return s(parseInt(n,10))}}),o.stderr.on("data",async r=>{const e=r.toString();console.log(e)})}),k=async(t=2610)=>{const s=await u(`.joystick/data/redis_${t}`);return s||await y(`.joystick/data/redis_${t}`,{recursive:!0}),s},h=async(t=2610)=>{await k(t);try{return await l(t),await g(t)}catch(s){console.warn(s),process.exit(1)}};var P=h;export{P as default};
//# sourceMappingURL=index.js.map
