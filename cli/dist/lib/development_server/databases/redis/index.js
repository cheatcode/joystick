import m from"child_process";import p from"fs";import l from"os";import u from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import w from"../../../kill_port_process.js";import y from"../../../path_exists.js";const{mkdir:g}=p.promises,h=()=>"redis-server",k=(s=2610)=>new Promise((e,a)=>{const n=h(),d=`${l.homedir()}/.joystick/databases/redis/${n}`,_=["--port",s,"--dir",u(`./.joystick/data/redis_${s}`),"--save","60","1","--loglevel","warning"],o=m.spawn(d,_.filter(t=>!!t)),i=setTimeout(()=>{a(new Error("Redis startup timed out after 30 seconds"))},3e4),c=async t=>{if(t.includes("Ready to accept connections")||t.includes("The server is now ready to accept connections")){clearTimeout(i);const r=await f(s);return e(parseInt(r,10))}};o.stdout.on("data",async t=>{const r=t?.toString();console.log("Redis stdout:",r),await c(r)}),o.stderr.on("data",async t=>{const r=t.toString();console.log("Redis stderr:",r),await c(r)}),o.on("error",t=>{clearTimeout(i),a(t)}),o.on("exit",t=>{t!==0&&(clearTimeout(i),a(new Error(`Redis process exited with code ${t}`)))})}),v=async(s=2610)=>{const e=await y(`.joystick/data/redis_${s}`);return e||await g(`.joystick/data/redis_${s}`,{recursive:!0}),e},x=async(s=2610)=>{await v(s);try{return await w(s),await k(s)}catch(e){console.warn(e),process.exit(1)}};var I=x;export{I as default};
//# sourceMappingURL=index.js.map
