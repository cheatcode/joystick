import p from"child_process";import u from"fs";import f from"os";import l from"../../../get_platform_safe_path.js";import w from"../../../get_process_id_from_port.js";import y from"../../../kill_port_process.js";import g from"../../../path_exists.js";const{mkdir:h}=u.promises,k=()=>"redis-server",x=(s=2610)=>new Promise((r,a)=>{const d=k(),m=`${f.homedir()}/.joystick/databases/redis/${d}`,_=["--port",s,"--dir",l(`./.joystick/data/redis_${s}`),"--save","60","1","--loglevel","warning"],o=p.spawn(m,_.filter(t=>!!t)),c=setTimeout(()=>{a(new Error("Redis startup timed out after 30 seconds"))},3e4);let i=!1;const n=async()=>{await new Promise(t=>setTimeout(t,2e3));try{const t=await w(s);if(t)return clearTimeout(c),r(parseInt(t,10))}catch{}};o.stdout.on("data",async t=>{const e=t?.toString();console.log("Redis stdout:",e),!i&&e.trim()&&(i=!0,await n())}),o.stderr.on("data",async t=>{const e=t.toString();console.log("Redis stderr:",e),!i&&e.trim()&&(i=!0,await n())}),o.on("error",t=>{clearTimeout(c),a(t)}),o.on("exit",t=>{t!==0&&(clearTimeout(c),a(new Error(`Redis process exited with code ${t}`)))})}),v=async(s=2610)=>{const r=await g(`.joystick/data/redis_${s}`);return r||await h(`.joystick/data/redis_${s}`,{recursive:!0}),r},$=async(s=2610)=>{await v(s);try{return await y(s),await x(s)}catch(r){console.warn(r),process.exit(1)}};var I=$;export{I as default};
//# sourceMappingURL=index.js.map
