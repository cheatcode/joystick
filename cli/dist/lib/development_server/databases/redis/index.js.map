{
  "version": 3,
  "sources": ["../../../../../src/lib/development_server/databases/redis/index.js"],
  "sourcesContent": ["import child_process from \"child_process\";\nimport fs from \"fs\";\nimport os from \"os\";\nimport get_platform_safe_path from '../../../get_platform_safe_path.js';\nimport get_process_id_from_port from \"../../../get_process_id_from_port.js\";\nimport kill_port_process from \"../../../kill_port_process.js\";\nimport path_exists from \"../../../path_exists.js\";\n\nconst { mkdir } = fs.promises;\n\nconst get_redis_server_command = () => {\n  return 'redis-server';\n};\n\nconst start_redis_process = (redis_port = 2610) => {\n  return new Promise((resolve, reject) => {\n    const redis_server_command = get_redis_server_command();\n    const joystick_redis_path = `${os.homedir()}/.joystick/databases/redis/${redis_server_command}`;\n    const database_process_flags = [\n      '--port',\n      redis_port,\n      '--dir',\n      get_platform_safe_path(`./.joystick/data/redis_${redis_port}`),\n      '--save',\n      '60',\n      '1',\n      '--loglevel',\n      'warning',\n    ];\n\n    const database_process = child_process.spawn(\n      joystick_redis_path,\n      database_process_flags.filter((command) => !!command),\n    );\n\n    // Set a timeout to prevent hanging\n    const timeout = setTimeout(() => {\n      reject(new Error('Redis startup timed out after 30 seconds'));\n    }, 30000);\n\n    const check_ready = async (output) => {\n      if (output.includes('Ready to accept connections') || output.includes('The server is now ready to accept connections')) {\n        clearTimeout(timeout);\n        const process_id = await get_process_id_from_port(redis_port);\n        return resolve(parseInt(process_id, 10));\n      }\n    };\n\n    database_process.stdout.on('data', async (data) => {\n      const stdout = data?.toString();\n      console.log('Redis stdout:', stdout);\n      await check_ready(stdout);\n    });\n\n    database_process.stderr.on('data', async (data) => {\n      const stderr = data.toString();\n      console.log('Redis stderr:', stderr);\n      await check_ready(stderr);\n    });\n\n    database_process.on('error', (error) => {\n      clearTimeout(timeout);\n      reject(error);\n    });\n\n    database_process.on('exit', (code) => {\n      if (code !== 0) {\n        clearTimeout(timeout);\n        reject(new Error(`Redis process exited with code ${code}`));\n      }\n    });\n  });\n};\n\nconst setup_data_directory = async (redis_port = 2610) => {\n  const data_directory_exists = await path_exists(`.joystick/data/redis_${redis_port}`);\n\n  if (!data_directory_exists) {\n    await mkdir(`.joystick/data/redis_${redis_port}`, { recursive: true });\n  }\n\n  return data_directory_exists;\n};\n\nconst start_redis = async (redis_port = 2610) => {\n  await setup_data_directory(redis_port);\n\n  try {\n    await kill_port_process(redis_port);\n    const redis_process_id = await start_redis_process(redis_port);\n    return redis_process_id;\n  } catch (exception) {\n    console.warn(exception);\n    process.exit(1);\n  }\n};\n\nexport default start_redis;\n"],
  "mappings": "AAAA,OAAOA,MAAmB,gBAC1B,OAAOC,MAAQ,KACf,OAAOC,MAAQ,KACf,OAAOC,MAA4B,qCACnC,OAAOC,MAA8B,uCACrC,OAAOC,MAAuB,gCAC9B,OAAOC,MAAiB,0BAExB,KAAM,CAAE,MAAAC,CAAM,EAAIN,EAAG,SAEfO,EAA2B,IACxB,eAGHC,EAAsB,CAACC,EAAa,OACjC,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,MAAMC,EAAuBL,EAAyB,EAChDM,EAAsB,GAAGZ,EAAG,QAAQ,CAAC,8BAA8BW,CAAoB,GACvFE,EAAyB,CAC7B,SACAL,EACA,QACAP,EAAuB,0BAA0BO,CAAU,EAAE,EAC7D,SACA,KACA,IACA,aACA,SACF,EAEMM,EAAmBhB,EAAc,MACrCc,EACAC,EAAuB,OAAQE,GAAY,CAAC,CAACA,CAAO,CACtD,EAGMC,EAAU,WAAW,IAAM,CAC/BN,EAAO,IAAI,MAAM,0CAA0C,CAAC,CAC9D,EAAG,GAAK,EAEFO,EAAc,MAAOC,GAAW,CACpC,GAAIA,EAAO,SAAS,6BAA6B,GAAKA,EAAO,SAAS,+CAA+C,EAAG,CACtH,aAAaF,CAAO,EACpB,MAAMG,EAAa,MAAMjB,EAAyBM,CAAU,EAC5D,OAAOC,EAAQ,SAASU,EAAY,EAAE,CAAC,CACzC,CACF,EAEAL,EAAiB,OAAO,GAAG,OAAQ,MAAOM,GAAS,CACjD,MAAMC,EAASD,GAAM,SAAS,EAC9B,QAAQ,IAAI,gBAAiBC,CAAM,EACnC,MAAMJ,EAAYI,CAAM,CAC1B,CAAC,EAEDP,EAAiB,OAAO,GAAG,OAAQ,MAAOM,GAAS,CACjD,MAAME,EAASF,EAAK,SAAS,EAC7B,QAAQ,IAAI,gBAAiBE,CAAM,EACnC,MAAML,EAAYK,CAAM,CAC1B,CAAC,EAEDR,EAAiB,GAAG,QAAUS,GAAU,CACtC,aAAaP,CAAO,EACpBN,EAAOa,CAAK,CACd,CAAC,EAEDT,EAAiB,GAAG,OAASU,GAAS,CAChCA,IAAS,IACX,aAAaR,CAAO,EACpBN,EAAO,IAAI,MAAM,kCAAkCc,CAAI,EAAE,CAAC,EAE9D,CAAC,CACH,CAAC,EAGGC,EAAuB,MAAOjB,EAAa,OAAS,CACxD,MAAMkB,EAAwB,MAAMtB,EAAY,wBAAwBI,CAAU,EAAE,EAEpF,OAAKkB,GACH,MAAMrB,EAAM,wBAAwBG,CAAU,GAAI,CAAE,UAAW,EAAK,CAAC,EAGhEkB,CACT,EAEMC,EAAc,MAAOnB,EAAa,OAAS,CAC/C,MAAMiB,EAAqBjB,CAAU,EAErC,GAAI,CACF,aAAML,EAAkBK,CAAU,EACT,MAAMD,EAAoBC,CAAU,CAE/D,OAASoB,EAAW,CAClB,QAAQ,KAAKA,CAAS,EACtB,QAAQ,KAAK,CAAC,CAChB,CACF,EAEA,IAAOC,EAAQF",
  "names": ["child_process", "fs", "os", "get_platform_safe_path", "get_process_id_from_port", "kill_port_process", "path_exists", "mkdir", "get_redis_server_command", "start_redis_process", "redis_port", "resolve", "reject", "redis_server_command", "joystick_redis_path", "database_process_flags", "database_process", "command", "timeout", "check_ready", "output", "process_id", "data", "stdout", "stderr", "error", "code", "setup_data_directory", "data_directory_exists", "start_redis", "exception", "index_default"]
}
