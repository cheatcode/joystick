{
  "version": 3,
  "sources": ["../../../../../src/lib/development_server/databases/redis/index.js"],
  "sourcesContent": ["import child_process from \"child_process\";\nimport fs from \"fs\";\nimport os from \"os\";\nimport path from \"path\";\nimport get_platform_safe_path from '../../../get_platform_safe_path.js';\nimport get_process_id_from_port from \"../../../get_process_id_from_port.js\";\nimport kill_port_process from \"../../../kill_port_process.js\";\nimport path_exists from \"../../../path_exists.js\";\nimport get_architecture from \"../../../get_architecture.js\";\n\nconst { mkdir } = fs.promises;\n\nconst get_redis_server_command = () => {\n  return 'redis-server';\n};\n\nconst start_redis_process = (redis_port = 2610) => {\n  return new Promise((resolve, reject) => {\n    const redis_server_command = get_redis_server_command();\n    const architecture = get_architecture();\n    const joystick_redis_base_path = path.join(os.homedir(), '.joystick', 'databases', 'redis', architecture);\n    const joystick_redis_path = path.join(joystick_redis_base_path, redis_server_command);\n    const database_process_flags = [\n      '--port',\n      redis_port,\n      '--dir',\n      get_platform_safe_path(`./.joystick/data/redis_${redis_port}`),\n      '--save',\n      '60',\n      '1',\n      '--loglevel',\n      'notice',\n    ];\n\n    const database_process = child_process.spawn(\n      joystick_redis_path,\n      database_process_flags.filter((command) => !!command),\n    );\n\n    // Set a timeout to prevent hanging\n    const timeout = setTimeout(() => {\n      reject(new Error('Redis startup timed out after 30 seconds'));\n    }, 30000);\n\n    let startup_detected = false;\n\n    const check_if_ready = async () => {\n      // Wait a moment for Redis to fully start\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      try {\n        const process_id = await get_process_id_from_port(redis_port);\n        if (process_id) {\n          clearTimeout(timeout);\n          return resolve(parseInt(process_id, 10));\n        }\n      } catch (error) {\n        // Port not ready yet, will retry\n      }\n    };\n\n    database_process.stdout.on('data', async (data) => {\n      const stdout = data?.toString();\n      \n      // Don't log warnings, but still use output for startup detection\n      if (!stdout.includes('WARNING') && !stdout.includes('# WARNING')) {\n        // Only log non-warning messages if needed for debugging\n        // console.log('Redis stdout:', stdout);\n      }\n      \n      // If we see any Redis output and haven't started checking yet, start checking\n      if (!startup_detected && stdout.trim()) {\n        startup_detected = true;\n        await check_if_ready();\n      }\n    });\n\n    database_process.stderr.on('data', async (data) => {\n      const stderr = data.toString();\n      \n      // Check for critical Redis errors that users should know about\n      if (stderr.includes('FATAL') || stderr.includes('Can\\'t open') || stderr.includes('Permission denied')) {\n        clearTimeout(timeout);\n        reject(new Error(`Redis startup failed: ${stderr.trim()}`));\n        return;\n      }\n      \n      // Don't log warnings, but still use output for startup detection\n      if (!stderr.includes('WARNING') && !stderr.includes('# WARNING')) {\n        // Only log non-warning messages if needed for debugging\n        // console.log('Redis stderr:', stderr);\n      }\n      \n      // If we see any Redis output and haven't started checking yet, start checking\n      if (!startup_detected && stderr.trim()) {\n        startup_detected = true;\n        await check_if_ready();\n      }\n    });\n\n    database_process.on('error', (error) => {\n      clearTimeout(timeout);\n      reject(error);\n    });\n\n    database_process.on('exit', (code) => {\n      if (code !== 0) {\n        clearTimeout(timeout);\n        reject(new Error(`Redis process exited with code ${code}`));\n      }\n    });\n  });\n};\n\nconst setup_data_directory = async (redis_port = 2610) => {\n  const data_directory_exists = await path_exists(`.joystick/data/redis_${redis_port}`);\n\n  if (!data_directory_exists) {\n    await mkdir(`.joystick/data/redis_${redis_port}`, { recursive: true });\n  }\n\n  return data_directory_exists;\n};\n\nconst start_redis = async (redis_port = 2610) => {\n  await setup_data_directory(redis_port);\n\n  try {\n    await kill_port_process(redis_port);\n    const redis_process_id = await start_redis_process(redis_port);\n    return redis_process_id;\n  } catch (exception) {\n    console.warn(exception);\n    process.exit(1);\n  }\n};\n\nexport default start_redis;\n"],
  "mappings": "AAAA,OAAOA,MAAmB,gBAC1B,OAAOC,MAAQ,KACf,OAAOC,MAAQ,KACf,OAAOC,MAAU,OACjB,OAAOC,MAA4B,qCACnC,OAAOC,MAA8B,uCACrC,OAAOC,MAAuB,gCAC9B,OAAOC,MAAiB,0BACxB,OAAOC,MAAsB,+BAE7B,KAAM,CAAE,MAAAC,CAAM,EAAIR,EAAG,SAEfS,EAA2B,IACxB,eAGHC,EAAsB,CAACC,EAAa,OACjC,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,MAAMC,EAAuBL,EAAyB,EAChDM,EAAeR,EAAiB,EAChCS,EAA2Bd,EAAK,KAAKD,EAAG,QAAQ,EAAG,YAAa,YAAa,QAASc,CAAY,EAClGE,EAAsBf,EAAK,KAAKc,EAA0BF,CAAoB,EAC9EI,EAAyB,CAC7B,SACAP,EACA,QACAR,EAAuB,0BAA0BQ,CAAU,EAAE,EAC7D,SACA,KACA,IACA,aACA,QACF,EAEMQ,EAAmBpB,EAAc,MACrCkB,EACAC,EAAuB,OAAQE,GAAY,CAAC,CAACA,CAAO,CACtD,EAGMC,EAAU,WAAW,IAAM,CAC/BR,EAAO,IAAI,MAAM,0CAA0C,CAAC,CAC9D,EAAG,GAAK,EAER,IAAIS,EAAmB,GAEvB,MAAMC,EAAiB,SAAY,CAEjC,MAAM,IAAI,QAAQX,GAAW,WAAWA,EAAS,GAAI,CAAC,EAEtD,GAAI,CACF,MAAMY,EAAa,MAAMpB,EAAyBO,CAAU,EAC5D,GAAIa,EACF,oBAAaH,CAAO,EACbT,EAAQ,SAASY,EAAY,EAAE,CAAC,CAE3C,MAAgB,CAEhB,CACF,EAEAL,EAAiB,OAAO,GAAG,OAAQ,MAAOM,GAAS,CACjD,MAAMC,EAASD,GAAM,SAAS,EAG1B,CAACC,EAAO,SAAS,SAAS,GAAMA,EAAO,SAAS,WAAW,EAM3D,CAACJ,GAAoBI,EAAO,KAAK,IACnCJ,EAAmB,GACnB,MAAMC,EAAe,EAEzB,CAAC,EAEDJ,EAAiB,OAAO,GAAG,OAAQ,MAAOM,GAAS,CACjD,MAAME,EAASF,EAAK,SAAS,EAG7B,GAAIE,EAAO,SAAS,OAAO,GAAKA,EAAO,SAAS,YAAa,GAAKA,EAAO,SAAS,mBAAmB,EAAG,CACtG,aAAaN,CAAO,EACpBR,EAAO,IAAI,MAAM,yBAAyBc,EAAO,KAAK,CAAC,EAAE,CAAC,EAC1D,MACF,CAGI,CAACA,EAAO,SAAS,SAAS,GAAMA,EAAO,SAAS,WAAW,EAM3D,CAACL,GAAoBK,EAAO,KAAK,IACnCL,EAAmB,GACnB,MAAMC,EAAe,EAEzB,CAAC,EAEDJ,EAAiB,GAAG,QAAUS,GAAU,CACtC,aAAaP,CAAO,EACpBR,EAAOe,CAAK,CACd,CAAC,EAEDT,EAAiB,GAAG,OAASU,GAAS,CAChCA,IAAS,IACX,aAAaR,CAAO,EACpBR,EAAO,IAAI,MAAM,kCAAkCgB,CAAI,EAAE,CAAC,EAE9D,CAAC,CACH,CAAC,EAGGC,EAAuB,MAAOnB,EAAa,OAAS,CACxD,MAAMoB,EAAwB,MAAMzB,EAAY,wBAAwBK,CAAU,EAAE,EAEpF,OAAKoB,GACH,MAAMvB,EAAM,wBAAwBG,CAAU,GAAI,CAAE,UAAW,EAAK,CAAC,EAGhEoB,CACT,EAEMC,EAAc,MAAOrB,EAAa,OAAS,CAC/C,MAAMmB,EAAqBnB,CAAU,EAErC,GAAI,CACF,aAAMN,EAAkBM,CAAU,EACT,MAAMD,EAAoBC,CAAU,CAE/D,OAASsB,EAAW,CAClB,QAAQ,KAAKA,CAAS,EACtB,QAAQ,KAAK,CAAC,CAChB,CACF,EAEA,IAAOC,EAAQF",
  "names": ["child_process", "fs", "os", "path", "get_platform_safe_path", "get_process_id_from_port", "kill_port_process", "path_exists", "get_architecture", "mkdir", "get_redis_server_command", "start_redis_process", "redis_port", "resolve", "reject", "redis_server_command", "architecture", "joystick_redis_base_path", "joystick_redis_path", "database_process_flags", "database_process", "command", "timeout", "startup_detected", "check_if_ready", "process_id", "data", "stdout", "stderr", "error", "code", "setup_data_directory", "data_directory_exists", "start_redis", "exception", "index_default"]
}
