{
  "version": 3,
  "sources": ["../../../../../src/lib/development_server/databases/redis/index.js"],
  "sourcesContent": ["import child_process from \"child_process\";\nimport fs from \"fs\";\nimport os from \"os\";\nimport get_platform_safe_path from '../../../get_platform_safe_path.js';\nimport get_process_id_from_port from \"../../../get_process_id_from_port.js\";\nimport kill_port_process from \"../../../kill_port_process.js\";\nimport path_exists from \"../../../path_exists.js\";\n\nconst { mkdir } = fs.promises;\n\nconst get_redis_server_command = () => {\n  return 'redis-server';\n};\n\nconst start_redis_process = (redis_port = 2610) => {\n  return new Promise((resolve) => {\n    const redis_server_command = get_redis_server_command();\n    const joystick_redis_path = `${os.homedir()}/.joystick/databases/redis/${redis_server_command}`;\n    const database_process_flags = [\n      '--port',\n      redis_port,\n      '--dir',\n      get_platform_safe_path(`./.joystick/data/redis_${redis_port}`),\n      '--save',\n      '60',\n      '1',\n      '--loglevel',\n      'warning',\n    ];\n\n    const database_process = child_process.spawn(\n      joystick_redis_path,\n      database_process_flags.filter((command) => !!command),\n    );\n\n    database_process.stdout.on('data', async (data) => {\n      const stdout = data?.toString();\n\n      if (stdout.includes('Ready to accept connections')) {\n        const process_id = await get_process_id_from_port(redis_port);\n        return resolve(parseInt(process_id, 10));\n      }\n    });\n\n    database_process.stderr.on('data', async (data) => {\n      const stderr = data.toString();\n      console.log(stderr);\n    });\n  });\n};\n\nconst setup_data_directory = async (redis_port = 2610) => {\n  const data_directory_exists = await path_exists(`.joystick/data/redis_${redis_port}`);\n\n  if (!data_directory_exists) {\n    await mkdir(`.joystick/data/redis_${redis_port}`, { recursive: true });\n  }\n\n  return data_directory_exists;\n};\n\nconst start_redis = async (redis_port = 2610) => {\n  await setup_data_directory(redis_port);\n\n  try {\n    await kill_port_process(redis_port);\n    const redis_process_id = await start_redis_process(redis_port);\n    return redis_process_id;\n  } catch (exception) {\n    console.warn(exception);\n    process.exit(1);\n  }\n};\n\nexport default start_redis;\n"],
  "mappings": "AAAA,OAAOA,MAAmB,gBAC1B,OAAOC,MAAQ,KACf,OAAOC,MAAQ,KACf,OAAOC,MAA4B,qCACnC,OAAOC,MAA8B,uCACrC,OAAOC,MAAuB,gCAC9B,OAAOC,MAAiB,0BAExB,KAAM,CAAE,MAAAC,CAAM,EAAIN,EAAG,SAEfO,EAA2B,IACxB,eAGHC,EAAsB,CAACC,EAAa,OACjC,IAAI,QAASC,GAAY,CAC9B,MAAMC,EAAuBJ,EAAyB,EAChDK,EAAsB,GAAGX,EAAG,QAAQ,CAAC,8BAA8BU,CAAoB,GACvFE,EAAyB,CAC7B,SACAJ,EACA,QACAP,EAAuB,0BAA0BO,CAAU,EAAE,EAC7D,SACA,KACA,IACA,aACA,SACF,EAEMK,EAAmBf,EAAc,MACrCa,EACAC,EAAuB,OAAQE,GAAY,CAAC,CAACA,CAAO,CACtD,EAEAD,EAAiB,OAAO,GAAG,OAAQ,MAAOE,GAAS,CAGjD,IAFeA,GAAM,SAAS,GAEnB,SAAS,6BAA6B,EAAG,CAClD,MAAMC,EAAa,MAAMd,EAAyBM,CAAU,EAC5D,OAAOC,EAAQ,SAASO,EAAY,EAAE,CAAC,CACzC,CACF,CAAC,EAEDH,EAAiB,OAAO,GAAG,OAAQ,MAAOE,GAAS,CACjD,MAAME,EAASF,EAAK,SAAS,EAC7B,QAAQ,IAAIE,CAAM,CACpB,CAAC,CACH,CAAC,EAGGC,EAAuB,MAAOV,EAAa,OAAS,CACxD,MAAMW,EAAwB,MAAMf,EAAY,wBAAwBI,CAAU,EAAE,EAEpF,OAAKW,GACH,MAAMd,EAAM,wBAAwBG,CAAU,GAAI,CAAE,UAAW,EAAK,CAAC,EAGhEW,CACT,EAEMC,EAAc,MAAOZ,EAAa,OAAS,CAC/C,MAAMU,EAAqBV,CAAU,EAErC,GAAI,CACF,aAAML,EAAkBK,CAAU,EACT,MAAMD,EAAoBC,CAAU,CAE/D,OAASa,EAAW,CAClB,QAAQ,KAAKA,CAAS,EACtB,QAAQ,KAAK,CAAC,CAChB,CACF,EAEA,IAAOC,EAAQF",
  "names": ["child_process", "fs", "os", "get_platform_safe_path", "get_process_id_from_port", "kill_port_process", "path_exists", "mkdir", "get_redis_server_command", "start_redis_process", "redis_port", "resolve", "redis_server_command", "joystick_redis_path", "database_process_flags", "database_process", "command", "data", "process_id", "stderr", "setup_data_directory", "data_directory_exists", "start_redis", "exception", "index_default"]
}
