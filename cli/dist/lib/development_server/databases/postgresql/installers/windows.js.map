{
  "version": 3,
  "sources": ["../../../../../../src/lib/development_server/databases/postgresql/installers/windows.js"],
  "sourcesContent": ["import fs from 'fs';\nimport path from 'path';\nimport os from 'os';\nimport { promisify } from 'util';\nimport { pipeline } from 'stream';\nimport { execFile } from 'child_process';\n\nconst streamPipeline = promisify(pipeline);\nconst execFileAsync = promisify(execFile);\n\nconst download_postgresql_windows = async (version_path = null) => {\n  const base_directory = path.join(os.homedir(), '.joystick', 'databases', 'postgresql');\n  const bin_directory = path.join(base_directory, 'bin');\n  const bin_bin_directory = path.join(bin_directory, 'bin');\n\n  if (await check_if_file_exists(base_directory)) {\n    return;\n  }\n\n  await create_directories(base_directory, bin_directory, bin_bin_directory);\n\n  const download_url = 'https://get.enterprisedb.com/postgresql/postgresql-16.0-1-windows-x64-binaries.zip';\n  const file_name = path.basename(new URL(download_url).pathname);\n  const file_path = path.join(base_directory, file_name);\n\n  process.loader.print('PostgreSQL not found. Downloading... (this may take a few minutes)');\n  await download_file(download_url, file_path);\n\n  process.loader.print('Installing PostgreSQL...');\n  \n  // Extract PostgreSQL\n  const temp_directory = path.join(base_directory, 'temp');\n  await fs.promises.mkdir(temp_directory, { recursive: true });\n  await execFileAsync('powershell', ['Expand-Archive', '-Path', file_path, '-DestinationPath', temp_directory]);\n\n  // Move binaries to bin/bin\n  const extracted_bin_path = path.join(temp_directory, 'pgsql', 'bin');\n  const files = await fs.promises.readdir(extracted_bin_path);\n  for (const file of files) {\n    await fs.promises.rename(path.join(extracted_bin_path, file), path.join(bin_bin_directory, file));\n  }\n\n  // Move other necessary directories\n  const directories_to_move = ['share', 'lib', 'include'];\n  for (const dir of directories_to_move) {\n    const src_path = path.join(temp_directory, 'pgsql', dir);\n    const dest_path = path.join(bin_directory, dir);\n    if (await fs.promises.access(src_path).then(() => true).catch(() => false)) {\n      await fs.promises.rename(src_path, dest_path);\n    }\n  }\n\n  // Clean up\n  await fs.promises.unlink(file_path);\n  await fs.promises.rm(temp_directory, { recursive: true, force: true });\n\n  process.loader.print('PostgreSQL installed!');\n};\n\nconst download_file = async (url, file_path) => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`Failed to download: ${response.statusText}`);\n  }\n  await streamPipeline(response.body, fs.createWriteStream(file_path));\n};\n\nconst check_if_file_exists = async (file_path) => {\n  try {\n    await fs.promises.access(file_path);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nconst create_directories = async (base_directory, bin_directory, bin_bin_directory) => {\n  await fs.promises.mkdir(base_directory, { recursive: true });\n  await fs.promises.mkdir(bin_directory, { recursive: true });\n  await fs.promises.mkdir(bin_bin_directory, { recursive: true });\n};\n\nexport default download_postgresql_windows;"],
  "mappings": "AAAA,OAAOA,MAAQ,KACf,OAAOC,MAAU,OACjB,OAAOC,MAAQ,KACf,OAAS,aAAAC,MAAiB,OAC1B,OAAS,YAAAC,MAAgB,SACzB,OAAS,YAAAC,MAAgB,gBAEzB,MAAMC,EAAiBH,EAAUC,CAAQ,EACnCG,EAAgBJ,EAAUE,CAAQ,EAElCG,EAA8B,MAAOC,EAAe,OAAS,CACjE,MAAMC,EAAiBT,EAAK,KAAKC,EAAG,QAAQ,EAAG,YAAa,YAAa,YAAY,EAC/ES,EAAgBV,EAAK,KAAKS,EAAgB,KAAK,EAC/CE,EAAoBX,EAAK,KAAKU,EAAe,KAAK,EAExD,GAAI,MAAME,EAAqBH,CAAc,EAC3C,OAGF,MAAMI,EAAmBJ,EAAgBC,EAAeC,CAAiB,EAEzE,MAAMG,EAAe,qFACfC,EAAYf,EAAK,SAAS,IAAI,IAAIc,CAAY,EAAE,QAAQ,EACxDE,EAAYhB,EAAK,KAAKS,EAAgBM,CAAS,EAErD,QAAQ,OAAO,MAAM,oEAAoE,EACzF,MAAME,EAAcH,EAAcE,CAAS,EAE3C,QAAQ,OAAO,MAAM,0BAA0B,EAG/C,MAAME,EAAiBlB,EAAK,KAAKS,EAAgB,MAAM,EACvD,MAAMV,EAAG,SAAS,MAAMmB,EAAgB,CAAE,UAAW,EAAK,CAAC,EAC3D,MAAMZ,EAAc,aAAc,CAAC,iBAAkB,QAASU,EAAW,mBAAoBE,CAAc,CAAC,EAG5G,MAAMC,EAAqBnB,EAAK,KAAKkB,EAAgB,QAAS,KAAK,EAC7DE,EAAQ,MAAMrB,EAAG,SAAS,QAAQoB,CAAkB,EAC1D,UAAWE,KAAQD,EACjB,MAAMrB,EAAG,SAAS,OAAOC,EAAK,KAAKmB,EAAoBE,CAAI,EAAGrB,EAAK,KAAKW,EAAmBU,CAAI,CAAC,EAIlG,MAAMC,EAAsB,CAAC,QAAS,MAAO,SAAS,EACtD,UAAWC,KAAOD,EAAqB,CACrC,MAAME,EAAWxB,EAAK,KAAKkB,EAAgB,QAASK,CAAG,EACjDE,EAAYzB,EAAK,KAAKU,EAAea,CAAG,EAC1C,MAAMxB,EAAG,SAAS,OAAOyB,CAAQ,EAAE,KAAK,IAAM,EAAI,EAAE,MAAM,IAAM,EAAK,GACvE,MAAMzB,EAAG,SAAS,OAAOyB,EAAUC,CAAS,CAEhD,CAGA,MAAM1B,EAAG,SAAS,OAAOiB,CAAS,EAClC,MAAMjB,EAAG,SAAS,GAAGmB,EAAgB,CAAE,UAAW,GAAM,MAAO,EAAK,CAAC,EAErE,QAAQ,OAAO,MAAM,uBAAuB,CAC9C,EAEMD,EAAgB,MAAOS,EAAKV,IAAc,CAC9C,MAAMW,EAAW,MAAM,MAAMD,CAAG,EAChC,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,uBAAuBA,EAAS,UAAU,EAAE,EAE9D,MAAMtB,EAAesB,EAAS,KAAM5B,EAAG,kBAAkBiB,CAAS,CAAC,CACrE,EAEMJ,EAAuB,MAAOI,GAAc,CAChD,GAAI,CACF,aAAMjB,EAAG,SAAS,OAAOiB,CAAS,EAC3B,EACT,MAAQ,CACN,MAAO,EACT,CACF,EAEMH,EAAqB,MAAOJ,EAAgBC,EAAeC,IAAsB,CACrF,MAAMZ,EAAG,SAAS,MAAMU,EAAgB,CAAE,UAAW,EAAK,CAAC,EAC3D,MAAMV,EAAG,SAAS,MAAMW,EAAe,CAAE,UAAW,EAAK,CAAC,EAC1D,MAAMX,EAAG,SAAS,MAAMY,EAAmB,CAAE,UAAW,EAAK,CAAC,CAChE,EAEA,IAAOiB,EAAQrB",
  "names": ["fs", "path", "os", "promisify", "pipeline", "execFile", "streamPipeline", "execFileAsync", "download_postgresql_windows", "version_path", "base_directory", "bin_directory", "bin_bin_directory", "check_if_file_exists", "create_directories", "download_url", "file_name", "file_path", "download_file", "temp_directory", "extracted_bin_path", "files", "file", "directories_to_move", "dir", "src_path", "dest_path", "url", "response", "windows_default"]
}
