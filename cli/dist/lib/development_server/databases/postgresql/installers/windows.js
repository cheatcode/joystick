import e from"fs";import t from"path";import h from"os";import{promisify as d}from"util";import{pipeline as b}from"stream";import{execFile as y}from"child_process";const g=d(b),j=d(y),k=async(s=null)=>{const i=t.join(h.homedir(),".joystick","databases","postgresql"),r=t.join(i,"bin"),c=t.join(r,"bin");if(await x(i))return;await q(i,r,c);const p="https://get.enterprisedb.com/postgresql/postgresql-16.0-1-windows-x64-binaries.zip",w=t.basename(new URL(p).pathname),n=t.join(i,w);process.loader.print("PostgreSQL not found. Downloading... (this may take a few minutes)"),await v(p,n),process.loader.print("Installing PostgreSQL...");const o=t.join(i,"temp");await e.promises.mkdir(o,{recursive:!0}),await j("powershell",["Expand-Archive","-Path",n,"-DestinationPath",o]);const m=t.join(o,"pgsql","bin"),f=await e.promises.readdir(m);for(const a of f)await e.promises.rename(t.join(m,a),t.join(c,a));const u=["share","lib","include"];for(const a of u){const l=t.join(o,"pgsql",a),_=t.join(r,a);await e.promises.access(l).then(()=>!0).catch(()=>!1)&&await e.promises.rename(l,_)}await e.promises.unlink(n),await e.promises.rm(o,{recursive:!0,force:!0}),process.loader.print("PostgreSQL installed!")},v=async(s,i)=>{const r=await fetch(s);if(!r.ok)throw new Error(`Failed to download: ${r.statusText}`);await g(r.body,e.createWriteStream(i))},x=async s=>{try{return await e.promises.access(s),!0}catch{return!1}},q=async(s,i,r)=>{await e.promises.mkdir(s,{recursive:!0}),await e.promises.mkdir(i,{recursive:!0}),await e.promises.mkdir(r,{recursive:!0})};var D=k;export{D as default};
//# sourceMappingURL=windows.js.map
