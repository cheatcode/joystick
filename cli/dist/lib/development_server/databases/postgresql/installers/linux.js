import a from"fs";import i from"path";import p from"os";import{promisify as d}from"util";import{execFile as g}from"child_process";import{pipeline as w}from"stream";const o=d(g),m=d(w),f=async(e=null)=>{const r=i.join(p.homedir(),".joystick","databases","postgresql"),s=i.join(r,"bin");if(await L(r))return;await P(r,s),await y(),await h(),await k();const n="https://ftp.postgresql.org/pub/source/v16.0/postgresql-16.0.tar.gz",u=i.basename(new URL(n).pathname),l=i.join(r,u);process.loader.print("PostgreSQL not found. Downloading... (this may take a few minutes)"),await x(n,l),process.loader.print("Installing PostgreSQL... (this may take a few minutes)"),await o("tar",["-xzf",l,"-C",r]);const c=i.join(r,"postgresql-16.0");try{await o("./configure",["--prefix="+s,"--without-icu"],{cwd:c})}catch(t){throw console.error("Error during PostgreSQL configuration:",t),t}try{await o("make",[],{cwd:c})}catch(t){throw console.error("Error during PostgreSQL build:",t),t}try{await o("make",["install"],{cwd:c})}catch(t){throw console.error("Error during PostgreSQL installation:",t),t}await _(r),await a.promises.unlink(l),await a.promises.rm(c,{recursive:!0,force:!0}),process.loader.print("PostgreSQL installed!")},y=async()=>{try{await o("id",["-u","postgres"]),console.log("Postgres user already exists")}catch{console.log("Creating postgres user...");try{await o("sudo",["useradd","-r","-s","/bin/false","postgres"]),console.log("Postgres user created successfully")}catch(r){throw console.error("Error creating postgres user:",r),r}}},h=async()=>{const e="postgres ALL=(ALL) NOPASSWD: ALL",r="/tmp/joystick_sudoers";try{const{stdout:s}=await o("sudo",["cat","/etc/sudoers"]);if(s.includes(e)){console.log("Postgres sudoers entry already exists");return}await a.promises.writeFile(r,e+`
`);try{await o("sudo",["visudo","-cf",r]),await o("sudo",["sh","-c",`cat ${r} >> /etc/sudoers`]),console.log("Postgres sudoers entry added successfully")}catch(n){throw console.error("Error in sudoers syntax:",n),new Error("Failed to add sudoers entry due to syntax error")}}catch(s){throw console.error("Error adding postgres to sudoers:",s),s}finally{await a.promises.unlink(r).catch(()=>{})}},_=async e=>{try{await o("sudo",["chown","postgres:postgres",e]),await o("sudo",["chmod","755",e]);const r=i.join(e,"bin");await o("sudo",["chown","-R","postgres:postgres",r]),await o("sudo",["chmod","-R","755",r]),console.log("Permissions set for postgres user")}catch(r){throw console.error("Error setting permissions for postgres user:",r),r}},k=async()=>{const e=["gcc","make","libreadline-dev","zlib1g-dev"],r=[];for(const s of e)try{await o("dpkg",["-s",s])}catch{r.push(s)}if(r.length>0){console.log(`Installing missing packages: ${r.join(", ")}`);try{await o("sudo",["apt-get","update"]),await o("sudo",["apt-get","install","-y",...r]),console.log("All required packages installed successfully")}catch(s){throw console.error("Error installing packages:",s),s}}else console.log("All required packages are already installed")},x=async(e,r)=>{const s=await fetch(e);if(!s.ok)throw new Error(`Failed to download: ${s.statusText}`);await m(s.body,a.createWriteStream(r))},L=async e=>{try{return await a.promises.access(e),!0}catch{return!1}},P=async(e,r)=>{await a.promises.mkdir(e,{recursive:!0}),await a.promises.mkdir(r,{recursive:!0})};var A=f;export{A as default};
