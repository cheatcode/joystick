import t from"fs";import a from"path";import p from"os";import{promisify as g}from"util";import{pipeline as y}from"stream";import{execFile as m}from"child_process";const _=g(y),e=g(m),f=async(o=null)=>{const r=a.join(p.homedir(),".joystick","databases","postgresql"),s=a.join(r,"bin"),c=a.join(s,"bin");if(await v(r))return;await S(r,s,c),await k(),await P();const n="https://ftp.postgresql.org/pub/source/v16.0/postgresql-16.0.tar.gz",w=a.basename(new URL(n).pathname),d=a.join(r,w);process.loader.print("PostgreSQL not found. Downloading..."),await x(n,d),process.loader.print("Installing PostgreSQL..."),await e("tar",["-xzf",d,"-C",r]);const l=a.join(r,"postgresql-16.0");try{await e("./configure",["--prefix="+s,"--without-icu"],{cwd:l})}catch(i){throw console.error("Error during PostgreSQL configuration:",i),i}try{await e("make",[],{cwd:l})}catch(i){throw console.error("Error during PostgreSQL build:",i),i}try{await e("make",["install"],{cwd:l})}catch(i){throw console.error("Error during PostgreSQL installation:",i),i}await h(s),await t.promises.unlink(d),await t.promises.rm(l,{recursive:!0,force:!0}),await L(c),process.loader.print("PostgreSQL installed!"),await j(s);const u=a.join(r,"data");await t.promises.mkdir(u,{recursive:!0}),await b("init","-D",u),process.loader.print("PostgreSQL database initialized!")},k=async()=>{try{await e("id",["-u","joystick"]),console.log("Joystick user already exists")}catch{console.log("Creating joystick user...");try{await e("sudo",["useradd","-m","joystick"]),console.log("Joystick user created successfully")}catch(r){throw console.error("Error creating joystick user:",r),r}}},h=async o=>{try{await e("sudo",["chown","-R","joystick:joystick",o]),await e("sudo",["chmod","-R","755",o]),console.log("Permissions set for joystick user")}catch(r){throw console.error("Error setting permissions for joystick user:",r),r}},j=async o=>{const s=`${p.userInfo().username} ALL=(joystick) NOPASSWD: /usr/bin/env PATH=${o}:$PATH /usr/bin/pg_ctl, /usr/bin/env PATH=${o}:$PATH /usr/bin/postgres`,c="/tmp/joystick_sudoers";try{const{stdout:n}=await e("sudo",["cat","/etc/sudoers"]);if(n.includes(s)){console.log("Sudoers entry already exists");return}await t.promises.writeFile(c,s+`
`),await e("sudo",["visudo","-f","/etc/sudoers","-c"]),await e("sudo",["sh","-c",`cat ${c} >> /etc/sudoers`]),console.log("Sudoers entry added successfully")}catch(n){throw console.error("Error adding sudoers entry:",n),n}finally{await t.promises.unlink(c).catch(()=>{})}},b=async(...o)=>{try{const{stdout:r,stderr:s}=await e("sudo",["-u","joystick","pg_ctl",...o]);return console.log("pg_ctl stdout:",r),s&&console.error("pg_ctl stderr:",s),r}catch(r){throw console.error("Error running pg_ctl:",r),r}},P=async()=>{const o=["gcc","make","libreadline-dev","zlib1g-dev"],r=[];for(const s of o)try{await e("dpkg",["-s",s])}catch{r.push(s)}if(r.length>0){console.log(`Installing missing packages: ${r.join(", ")}`);try{await e("sudo",["apt-get","update"]),await e("sudo",["apt-get","install","-y",...r]),console.log("All required packages installed successfully")}catch(s){throw console.error("Error installing packages:",s),s}}else console.log("All required packages are already installed")},x=async(o,r)=>{const s=await fetch(o);if(!s.ok)throw new Error(`Failed to download: ${s.statusText}`);await _(s.body,t.createWriteStream(r))},v=async o=>{try{return await t.promises.access(o),!0}catch{return!1}},S=async(o,r,s)=>{await t.promises.mkdir(o,{recursive:!0}),await t.promises.mkdir(r,{recursive:!0}),await t.promises.mkdir(s,{recursive:!0})},L=async o=>{const r=await t.promises.readdir(o);for(const s of r)await t.promises.chmod(a.join(o,s),"755")};var z=f;export{z as default};
