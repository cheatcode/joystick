import t from"fs";import i from"path";import d from"os";import{promisify as c}from"util";import{execFile as u}from"child_process";import{pipeline as p}from"stream";const e=c(u),w=c(p),g=async(r=null)=>{const s=i.join(d.homedir(),".joystick","databases","postgresql"),o=i.join(s,"bin");if(await h(s))return;await x(s,o),await m(),await y();const a="https://www.postgresql.org/ftp/binary/v16.0/linux-x64/postgresql-16.0-1-linux-x64-binaries.tar.gz",l=i.basename(new URL(a).pathname),n=i.join(s,l);process.loader.print("PostgreSQL not found. Downloading..."),await _(a,n),process.loader.print("Installing PostgreSQL..."),await e("tar",["-xzf",n,"-C",s,"--strip-components=1"]),await f(s),await t.promises.unlink(n),process.loader.print("PostgreSQL installed!")},m=async()=>{try{await e("id",["-u","postgres"]),console.log("Postgres user already exists")}catch{console.log("Creating postgres user...");try{await e("sudo",["useradd","-r","-s","/bin/bash","postgres"]),console.log("Postgres user created successfully")}catch(s){throw console.error("Error creating postgres user:",s),s}}},y=async()=>{const r="postgres ALL=(ALL) NOPASSWD: ALL",s="/tmp/joystick_sudoers";try{const{stdout:o}=await e("sudo",["cat","/etc/sudoers"]);if(o.includes(r)){console.log("Postgres sudoers entry already exists");return}await t.promises.writeFile(s,r+`
`);try{await e("sudo",["visudo","-cf",s]),await e("sudo",["sh","-c",`cat ${s} >> /etc/sudoers`]),console.log("Postgres sudoers entry added successfully")}catch(a){throw console.error("Error in sudoers syntax:",a),new Error("Failed to add sudoers entry due to syntax error")}}catch(o){throw console.error("Error adding postgres to sudoers:",o),o}finally{await t.promises.unlink(s).catch(()=>{})}},f=async r=>{try{await e("sudo",["chown","-R","postgres:postgres",r]),await e("sudo",["chmod","-R","755",r]),console.log("Permissions set for postgres user")}catch(s){throw console.error("Error setting permissions for postgres user:",s),s}},_=async(r,s)=>{const o=await fetch(r);if(!o.ok)throw new Error(`Failed to download: ${o.statusText}`);await w(o.body,t.createWriteStream(s))},h=async r=>{try{return await t.promises.access(r),!0}catch{return!1}},x=async(r,s)=>{await t.promises.mkdir(r,{recursive:!0}),await t.promises.mkdir(s,{recursive:!0})};var j=g;export{j as default};
