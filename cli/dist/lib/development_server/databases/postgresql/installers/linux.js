import s from"fs";import i from"path";import g from"os";import{promisify as p}from"util";import{execFile as w}from"child_process";import{pipeline as m}from"stream";const t=p(w),y=p(m),f=async(o=null)=>{const r=i.join(g.homedir(),".joystick","databases","postgresql"),e=i.join(r,"bin"),l=i.join(r,"data");if(await x(r))return;await b(r,e),await k(),await _();const d="https://ftp.postgresql.org/pub/source/v16.0/postgresql-16.0.tar.gz",u=i.basename(new URL(d).pathname),n=i.join(r,u);process.loader.print("PostgreSQL not found. Downloading..."),await j(d,n),process.loader.print("Installing PostgreSQL..."),await t("tar",["-xzf",n,"-C",r]);const c=i.join(r,"postgresql-16.0");try{await t("./configure",["--prefix="+e,"--without-icu"],{cwd:c})}catch(a){throw console.error("Error during PostgreSQL configuration:",a),a}try{await t("make",[],{cwd:c})}catch(a){throw console.error("Error during PostgreSQL build:",a),a}try{await t("make",["install"],{cwd:c})}catch(a){throw console.error("Error during PostgreSQL installation:",a),a}await h(r),await s.promises.unlink(n),await s.promises.rm(c,{recursive:!0,force:!0}),await P(e),process.loader.print("PostgreSQL installed!"),await s.promises.mkdir(l,{recursive:!0}),process.loader.print("PostgreSQL installation completed!")},k=async()=>{try{await t("id",["-u","joystick"]),console.log("Joystick user already exists")}catch{console.log("Creating joystick user...");try{await t("sudo",["useradd","-m","joystick"]),console.log("Joystick user created successfully")}catch(r){throw console.error("Error creating joystick user:",r),r}}},h=async o=>{try{await t("sudo",["chown","-R","joystick:joystick",o]),await t("sudo",["chmod","-R","755",o]),console.log("Permissions set for joystick user")}catch(r){throw console.error("Error setting permissions for joystick user:",r),r}},_=async()=>{const o=["gcc","make","libreadline-dev","zlib1g-dev"],r=[];for(const e of o)try{await t("dpkg",["-s",e])}catch{r.push(e)}if(r.length>0){console.log(`Installing missing packages: ${r.join(", ")}`);try{await t("sudo",["apt-get","update"]),await t("sudo",["apt-get","install","-y",...r]),console.log("All required packages installed successfully")}catch(e){throw console.error("Error installing packages:",e),e}}else console.log("All required packages are already installed")},j=async(o,r)=>{const e=await fetch(o);if(!e.ok)throw new Error(`Failed to download: ${e.statusText}`);await y(e.body,s.createWriteStream(r))},x=async o=>{try{return await s.promises.access(o),!0}catch{return!1}},b=async(o,r)=>{await s.promises.mkdir(o,{recursive:!0}),await s.promises.mkdir(r,{recursive:!0})},P=async o=>{const r=await s.promises.readdir(o);for(const e of r)await s.promises.chmod(i.join(o,e),"755")};var z=f;export{z as default};
