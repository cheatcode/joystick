import a from"fs";import i from"path";import g from"os";import{promisify as d}from"util";import{execFile as u}from"child_process";import{pipeline as w}from"stream";const e=d(u),m=d(w),f=async(o=null)=>{const r=i.join(g.homedir(),".joystick","databases","postgresql"),s=i.join(r,"bin");if(await b(r))return;await P(r,s),await h(),await _();const c="https://ftp.postgresql.org/pub/source/v16.0/postgresql-16.0.tar.gz",p=i.basename(new URL(c).pathname),l=i.join(r,p);process.loader.print("PostgreSQL not found. Downloading..."),await k(c,l),process.loader.print("Installing PostgreSQL..."),await e("tar",["-xzf",l,"-C",r]);const n=i.join(r,"postgresql-16.0");try{await e("./configure",["--prefix="+s,"--without-icu"],{cwd:n})}catch(t){throw console.error("Error during PostgreSQL configuration:",t),t}try{await e("make",[],{cwd:n})}catch(t){throw console.error("Error during PostgreSQL build:",t),t}try{await e("make",["install"],{cwd:n})}catch(t){throw console.error("Error during PostgreSQL installation:",t),t}await y(r),await a.promises.unlink(l),await a.promises.rm(n,{recursive:!0,force:!0}),process.loader.print("PostgreSQL installed!"),process.loader.print("PostgreSQL installation completed!")},h=async()=>{try{await e("id",["-u","postgres"]),console.log("Postgres user already exists")}catch{console.log("Creating postgres user...");try{await e("sudo",["useradd","-r","-s","/bin/false","postgres"]),console.log("Postgres user created successfully")}catch(r){throw console.error("Error creating postgres user:",r),r}}},y=async o=>{try{await e("sudo",["chown","root:root",o]),await e("sudo",["chmod","755",o]);const r=i.join(o,"bin");await e("sudo",["chown","-R","root:root",r]),await e("sudo",["chmod","-R","755",r]),console.log("Permissions set for postgres user")}catch(r){throw console.error("Error setting permissions for postgres user:",r),r}},_=async()=>{const o=["gcc","make","libreadline-dev","zlib1g-dev"],r=[];for(const s of o)try{await e("dpkg",["-s",s])}catch{r.push(s)}if(r.length>0){console.log(`Installing missing packages: ${r.join(", ")}`);try{await e("sudo",["apt-get","update"]),await e("sudo",["apt-get","install","-y",...r]),console.log("All required packages installed successfully")}catch(s){throw console.error("Error installing packages:",s),s}}else console.log("All required packages are already installed")},k=async(o,r)=>{const s=await fetch(o);if(!s.ok)throw new Error(`Failed to download: ${s.statusText}`);await m(s.body,a.createWriteStream(r))},b=async o=>{try{return await a.promises.access(o),!0}catch{return!1}},P=async(o,r)=>{await a.promises.mkdir(o,{recursive:!0}),await a.promises.mkdir(r,{recursive:!0})};var E=f;export{E as default};
