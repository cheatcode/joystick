import t from"fs";import a from"path";import w from"os";import{promisify as u}from"util";import{pipeline as m}from"stream";import{execFile as f}from"child_process";const g=u(m),s=u(f),y=async(e=null)=>{const r=a.join(w.homedir(),".joystick","databases","postgresql"),o=a.join(r,"bin"),l=a.join(o,"bin");if(await b(r))return;await x(r,o,l),await h();const d="https://ftp.postgresql.org/pub/source/v16.0/postgresql-16.0.tar.gz",p=a.basename(new URL(d).pathname),n=a.join(r,p);process.loader.print("PostgreSQL not found. Downloading..."),await j(d,n),process.loader.print("Installing PostgreSQL..."),await s("tar",["-xzf",n,"-C",r]);const c=a.join(r,"postgresql-16.0");await _();try{await s("./configure",["--prefix="+o,"--without-icu"],{cwd:c})}catch(i){throw console.error("Error during PostgreSQL configuration:",i),i}try{await s("make",[],{cwd:c})}catch(i){throw console.error("Error during PostgreSQL build:",i),i}try{await s("make",["install"],{cwd:c})}catch(i){throw console.error("Error during PostgreSQL installation:",i),i}await k(o),await t.promises.unlink(n),await t.promises.rm(c,{recursive:!0,force:!0}),await P(l),process.loader.print("PostgreSQL installed!")},h=async()=>{try{await s("id",["-u","joystick"]),console.log("Joystick user already exists")}catch{console.log("Creating joystick user...");try{await s("sudo",["useradd","-m","joystick"]),console.log("Joystick user created successfully")}catch(r){throw console.error("Error creating joystick user:",r),r}}},k=async e=>{try{await s("sudo",["chown","-R","joystick:joystick",e]),await s("sudo",["chmod","-R","755",e]),console.log("Permissions set for joystick user")}catch(r){throw console.error("Error setting permissions for joystick user:",r),r}},_=async()=>{const e=["gcc","make","libreadline-dev","zlib1g-dev"];for(const r of e)try{await s("dpkg",["-s",r])}catch{throw console.error(`Required package '${r}' is not installed.`),console.error("Please install the necessary dependencies. For Ubuntu or Debian, run:"),console.error(`sudo apt-get update && sudo apt-get install ${e.join(" ")}`),new Error("Missing dependencies")}},j=async(e,r)=>{const o=await fetch(e);if(!o.ok)throw new Error(`Failed to download: ${o.statusText}`);await g(o.body,t.createWriteStream(r))},b=async e=>{try{return await t.promises.access(e),!0}catch{return!1}},x=async(e,r,o)=>{await t.promises.mkdir(e,{recursive:!0}),await t.promises.mkdir(r,{recursive:!0}),await t.promises.mkdir(o,{recursive:!0})},P=async e=>{const r=await t.promises.readdir(e);for(const o of r)await t.promises.chmod(a.join(e,o),"755")};var F=y;export{F as default};
