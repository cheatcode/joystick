import t from"fs";import c from"path";import w from"os";import{promisify as g}from"util";import{pipeline as y}from"stream";import{execFile as m}from"child_process";const _=g(y),e=g(m),f=async(s=null)=>{const r=c.join(w.homedir(),".joystick","databases","postgresql"),o=c.join(r,"bin"),a=c.join(o,"bin");if(await v(r))return;await S(r,o,a),await h(),await x();const n="https://ftp.postgresql.org/pub/source/v16.0/postgresql-16.0.tar.gz",d=c.basename(new URL(n).pathname),u=c.join(r,d);process.loader.print("PostgreSQL not found. Downloading..."),await P(n,u),process.loader.print("Installing PostgreSQL..."),await e("tar",["-xzf",u,"-C",r]);const l=c.join(r,"postgresql-16.0");try{await e("./configure",["--prefix="+o,"--without-icu"],{cwd:l})}catch(i){throw console.error("Error during PostgreSQL configuration:",i),i}try{await e("make",[],{cwd:l})}catch(i){throw console.error("Error during PostgreSQL build:",i),i}try{await e("make",["install"],{cwd:l})}catch(i){throw console.error("Error during PostgreSQL installation:",i),i}await k(o),await t.promises.unlink(u),await t.promises.rm(l,{recursive:!0,force:!0}),await E(a),process.loader.print("PostgreSQL installed!"),await j(o);const p=c.join(r,"data");await t.promises.mkdir(p,{recursive:!0}),await b("init","-D",p),process.loader.print("PostgreSQL database initialized!")},h=async()=>{try{await e("id",["-u","joystick"]),console.log("Joystick user already exists")}catch{console.log("Creating joystick user...");try{await e("sudo",["useradd","-m","joystick"]),console.log("Joystick user created successfully")}catch(r){throw console.error("Error creating joystick user:",r),r}}},k=async s=>{try{await e("sudo",["chown","-R","joystick:joystick",s]),await e("sudo",["chmod","-R","755",s]),console.log("Permissions set for joystick user")}catch(r){throw console.error("Error setting permissions for joystick user:",r),r}},j=async s=>{const o=`${w.userInfo().username} ALL=(joystick) NOPASSWD: /usr/bin/env PATH=${s}:$PATH /usr/bin/pg_ctl, /usr/bin/env PATH=${s}:$PATH /usr/bin/postgres`,a="/tmp/joystick_sudoers";try{const{stdout:n}=await e("sudo",["cat","/etc/sudoers"]);if(n.includes(o)){console.log("Sudoers entry already exists");return}await t.promises.writeFile(a,o+`
`);try{await e("sudo",["visudo","-cf",a]),await e("sudo",["sh","-c",`cat ${a} >> /etc/sudoers`]),console.log("Sudoers entry added successfully")}catch(d){throw console.error("Error in sudoers syntax:",d),new Error("Failed to add sudoers entry due to syntax error")}}catch(n){throw console.error("Error adding sudoers entry:",n),n}finally{await t.promises.unlink(a).catch(()=>{})}},b=async(...s)=>{try{const{stdout:r,stderr:o}=await e("sudo",["-u","joystick","pg_ctl",...s]);return console.log("pg_ctl stdout:",r),o&&console.error("pg_ctl stderr:",o),r}catch(r){throw console.error("Error running pg_ctl:",r),r}},x=async()=>{const s=["gcc","make","libreadline-dev","zlib1g-dev"],r=[];for(const o of s)try{await e("dpkg",["-s",o])}catch{r.push(o)}if(r.length>0){console.log(`Installing missing packages: ${r.join(", ")}`);try{await e("sudo",["apt-get","update"]),await e("sudo",["apt-get","install","-y",...r]),console.log("All required packages installed successfully")}catch(o){throw console.error("Error installing packages:",o),o}}else console.log("All required packages are already installed")},P=async(s,r)=>{const o=await fetch(s);if(!o.ok)throw new Error(`Failed to download: ${o.statusText}`);await _(o.body,t.createWriteStream(r))},v=async s=>{try{return await t.promises.access(s),!0}catch{return!1}},S=async(s,r,o)=>{await t.promises.mkdir(s,{recursive:!0}),await t.promises.mkdir(r,{recursive:!0}),await t.promises.mkdir(o,{recursive:!0})},E=async s=>{const r=await t.promises.readdir(s);for(const o of r)await t.promises.chmod(c.join(s,o),"755")};var T=f;export{T as default};
