import e from"fs";import i from"path";import h from"os";import{promisify as d}from"util";import{pipeline as b}from"stream";import{execFile as y}from"child_process";const g=d(b),j=d(y),k=async(o=null)=>{const t=i.join(h.homedir(),".joystick","databases","postgresql"),s=i.join(t,"bin"),n=i.join(s,"bin");if(await q(t))return;await v(t,s,n);const p="https://get.enterprisedb.com/postgresql/postgresql-16.0-1-osx-binaries.zip",f=i.basename(new URL(p).pathname),c=i.join(t,f);process.loader.print("PostgreSQL not found. Downloading..."),await x(p,c),process.loader.print("Installing PostgreSQL...");const r=i.join(t,"temp");await e.promises.mkdir(r,{recursive:!0}),await j("unzip",["-q",c,"-d",r]);const m=i.join(r,"pgsql","bin"),w=await e.promises.readdir(m);for(const a of w)await e.promises.rename(i.join(m,a),i.join(n,a));const u=["share","lib","include"];for(const a of u){const l=i.join(r,"pgsql",a),_=i.join(s,a);await e.promises.access(l).then(()=>!0).catch(()=>!1)&&await e.promises.rename(l,_)}await e.promises.unlink(c),await e.promises.rm(r,{recursive:!0,force:!0}),await L(n),process.loader.print("PostgreSQL installed!")},x=async(o,t)=>{const s=await fetch(o);if(!s.ok)throw new Error(`Failed to download: ${s.statusText}`);await g(s.body,e.createWriteStream(t))},q=async o=>{try{return await e.promises.access(o),!0}catch{return!1}},v=async(o,t,s)=>{await e.promises.mkdir(o,{recursive:!0}),await e.promises.mkdir(t,{recursive:!0}),await e.promises.mkdir(s,{recursive:!0})},L=async o=>{const t=await e.promises.readdir(o);for(const s of t)await e.promises.chmod(i.join(o,s),"755")};var D=k;export{D as default};
