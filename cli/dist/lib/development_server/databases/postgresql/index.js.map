{
  "version": 3,
  "sources": ["../../../../../src/lib/development_server/databases/postgresql/index.js"],
  "sourcesContent": ["import child_process from \"child_process\";\nimport fs from \"fs\";\nimport util from \"util\";\nimport os from \"os\";\nimport path from \"path\";\nimport get_platform_safe_path from \"../../../get_platform_safe_path.js\";\nimport get_process_id_from_port from \"../../../get_process_id_from_port.js\";\nimport path_exists from \"../../../path_exists.js\";\n\nconst exec = util.promisify(child_process.exec);\nconst { rename } = fs.promises;\n\nconst get_architecture = () => {\n  const arch = os.arch();\n  if (arch === 'arm64') return 'arm64';\n  if (arch === 'x64') return 'x86_64';\n  throw new Error(`Unsupported architecture: ${arch}`);\n};\n\nconst setup_data_directory = async (postgresql_port = 2610) => {\n  const legacy_data_directory_exists = await path_exists(\".joystick/data/postgresql\");\n  let data_directory_exists = await path_exists(`.joystick/data/postgresql_${postgresql_port}`);\n\n  if (legacy_data_directory_exists && !data_directory_exists) {\n    await rename ('.joystick/data/postgresql', `.joystick/data/postgresql_${postgresql_port}`);\n    data_directory_exists = true;\n  }\n\n  return data_directory_exists;\n};\n\nconst get_createdb_command = () => {\n  if (process.platform === 'win32') {\n    return 'createdb.exe';\n  }\n\n  return 'createdb';\n};\n\nconst get_postgres_command = () => {\n  if (process.platform === 'win32') {\n    return 'postgres.exe';\n  }\n\n  return 'postgres';\n};\n\nconst get_initdb_command = () => {\n  if (process.platform === 'win32') {\n    return 'initdb.exe';\n  }\n\n  return 'initdb';\n};\n\nconst get_pg_ctl_command = () => {\n  if (process.platform === 'win32') {\n    return 'pgctl.exe';\n  }\n\n  return 'pgctl';\n};\n\nconst start_postgresql = async (port = 2610) => {\n  try {\n    const postgresql_port = port;\n    const architecture = get_architecture();\n    const joystick_postgresql_base_path = path.join(os.homedir(), '.joystick', 'databases', 'postgresql', architecture);\n    const joystick_postgresql_bin_path = path.join(joystick_postgresql_base_path, 'bin');\n\n    const joystick_pg_ctl_command = get_pg_ctl_command();\n    const joystick_initdb_command = get_initdb_command();\n    const joystick_postgres_command = get_postgres_command();\n    const joystick_createdb_command = get_createdb_command();\n\n    const data_directory_exists = await setup_data_directory(port);\n\n    if (!data_directory_exists) {\n      await exec(`./${joystick_initdb_command} -D ${process.cwd()}/.joystick/data/postgresql_${port} --no-locale`, {\n        cwd: joystick_postgresql_bin_path\n      });\n    }\n\n    const existing_process_id = parseInt(await get_process_id_from_port(postgresql_port), 10);\n\n    if (existing_process_id) {\n      await exec(`./${joystick_pg_ctl_command} kill KILL ${existing_process_id}`, {\n        cwd: joystick_postgresql_bin_path\n      });\n    }\n\n    const database_process = child_process.spawn(\n      `./${joystick_postgres_command}`,\n      [\n        `-p ${postgresql_port}`,\n        '-D',\n        get_platform_safe_path(`${process.cwd()}/.joystick/data/postgresql_${port}`),\n      ],\n      {\n        cwd: joystick_postgresql_bin_path\n      }\n    );\n\n    return new Promise((resolve) => {\n      database_process.stderr.on('data', async (data) => {\n        const stderr = data?.toString();\n\n        if (stderr.includes('database system is ready to accept connections')) {\n          const process_id = (await get_process_id_from_port(postgresql_port))?.replace('\\n', '');\n          const createdb_command = `./${joystick_createdb_command} -h 127.0.0.1 -p ${postgresql_port} app`;\n\n          exec(createdb_command, {\n            cwd: joystick_postgresql_bin_path\n          }).then(() => {\n            resolve(parseInt(process_id, 10));\n          }).catch(({ stderr: error }) => {\n            if (error && error.includes('database \"app\" already exists')) {\n              resolve(parseInt(process_id, 10));\n            } else {\n              console.log(error);\n            }\n          });\n        }\n      });\n\n      database_process.stdout.on('data', async (data) => {\n        // NOTE: PostgreSQL (16) appears to route all output to stderr(?!). Have this for posterity\n        // sake and to avoid trapping useful information.\n        const stdout = data?.toString();\n        console.log(stdout);\n      });\n    });\n  } catch (exception) {\n    console.warn(exception);\n    process.exit(1);\n  }\n};\n\nexport default start_postgresql;\n"],
  "mappings": "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",
  "names": ["child_process", "fs", "util", "os", "path", "get_platform_safe_path", "get_process_id_from_port", "path_exists", "exec", "rename", "get_architecture", "arch", "setup_data_directory", "postgresql_port", "legacy_data_directory_exists", "data_directory_exists", "get_createdb_command", "get_postgres_command", "get_initdb_command", "get_pg_ctl_command", "start_postgresql", "port", "architecture", "joystick_postgresql_base_path", "joystick_postgresql_bin_path", "joystick_pg_ctl_command", "joystick_initdb_command", "joystick_postgres_command", "joystick_createdb_command", "existing_process_id", "database_process", "resolve", "data", "process_id", "createdb_command", "error", "stdout", "exception", "index_default"]
}
