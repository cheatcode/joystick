{
  "version": 3,
  "sources": ["../../../../../src/lib/development_server/databases/postgresql/index.js"],
  "sourcesContent": ["import child_process from \"child_process\";\nimport fs from \"fs\";\nimport util from \"util\";\nimport os from \"os\";\nimport path from \"path\";\nimport get_platform_safe_path from \"../../../get_platform_safe_path.js\";\nimport get_process_id_from_port from \"../../../get_process_id_from_port.js\";\nimport path_exists from \"../../../path_exists.js\";\nimport get_architecture from \"../../../get_architecture.js\";\n\nconst exec = util.promisify(child_process.exec);\nconst { rename } = fs.promises;\n\n\nconst setup_data_directory = async (postgresql_port = 2610) => {\n  const legacy_data_directory_exists = await path_exists(\".joystick/data/postgresql\");\n  let data_directory_exists = await path_exists(`.joystick/data/postgresql_${postgresql_port}`);\n\n  if (legacy_data_directory_exists && !data_directory_exists) {\n    await rename ('.joystick/data/postgresql', `.joystick/data/postgresql_${postgresql_port}`);\n    data_directory_exists = true;\n  }\n\n  return data_directory_exists;\n};\n\nconst get_createdb_command = () => {\n  if (process.platform === 'win32') {\n    return 'createdb.exe';\n  }\n\n  return 'createdb';\n};\n\nconst get_postgres_command = () => {\n  if (process.platform === 'win32') {\n    return 'postgres.exe';\n  }\n\n  return 'postgres';\n};\n\nconst get_initdb_command = () => {\n  if (process.platform === 'win32') {\n    return 'initdb.exe';\n  }\n\n  return 'initdb';\n};\n\nconst get_pg_ctl_command = () => {\n  if (process.platform === 'win32') {\n    return 'pgctl.exe';\n  }\n\n  return 'pgctl';\n};\n\nconst get_postgres_user_command = () => {\n  // Only handle root user on Linux systems\n  if (process.platform === 'linux' && process.getuid && process.getuid() === 0) {\n    return 'su postgres -c';\n  }\n  return '';\n};\n\nconst start_postgresql = async (port = 2610) => {\n  try {\n    const postgresql_port = port;\n    const architecture = get_architecture();\n    const joystick_postgresql_base_path = path.join(os.homedir(), '.joystick', 'databases', 'postgresql', architecture);\n    const joystick_postgresql_bin_path = path.join(joystick_postgresql_base_path, 'bin');\n\n    const joystick_pg_ctl_command = get_pg_ctl_command();\n    const joystick_initdb_command = get_initdb_command();\n    const joystick_postgres_command = get_postgres_command();\n    const joystick_createdb_command = get_createdb_command();\n    const postgres_user_command = get_postgres_user_command();\n\n    const data_directory_exists = await setup_data_directory(port);\n\n    if (!data_directory_exists) {\n      // Handle root user on Linux systems only\n      if (postgres_user_command) {\n        try {\n          await exec('id postgres');\n        } catch (error) {\n          // User doesn't exist, create it\n          await exec('useradd -r -s /bin/false postgres');\n        }\n        \n        // Create data directory first\n        await exec(`mkdir -p ${process.cwd()}/.joystick/data/postgresql_${port}`, {\n          cwd: process.cwd()\n        });\n        \n        // Create .joystick directory structure and set permissions\n        await exec(`mkdir -p ${process.cwd()}/.joystick/data`, {\n          cwd: process.cwd()\n        });\n        \n        // Give postgres user access to the entire path leading to the data directory\n        await exec(`chmod 755 ${process.cwd()}`, {\n          cwd: process.cwd()\n        });\n        \n        await exec(`chmod 755 ${process.cwd()}/.joystick`, {\n          cwd: process.cwd()\n        });\n        \n        await exec(`chmod 755 ${process.cwd()}/.joystick/data`, {\n          cwd: process.cwd()\n        });\n        \n        // Change ownership of data directory to postgres user\n        await exec(`chown -R postgres:postgres ${process.cwd()}/.joystick/data/postgresql_${port}`, {\n          cwd: process.cwd()\n        });\n        \n        // Give postgres user access to the home directory path for PostgreSQL installation\n        await exec(`chmod 755 ${os.homedir()}`, {\n          cwd: process.cwd()\n        });\n        \n        await exec(`chmod -R 755 ${path.dirname(joystick_postgresql_base_path)}`, {\n          cwd: process.cwd()\n        });\n        \n        // Change ownership of postgresql installation to postgres user\n        await exec(`chown -R postgres:postgres ${joystick_postgresql_base_path}`, {\n          cwd: process.cwd()\n        });\n\n        const initdb_command = `${postgres_user_command} \"cd ${joystick_postgresql_bin_path} && ./${joystick_initdb_command} -D ${process.cwd()}/.joystick/data/postgresql_${port} --no-locale\"`;\n        \n        await exec(initdb_command, {\n          cwd: process.cwd()\n        });\n      } else {\n        // Original behavior for non-Linux or non-root systems\n        await exec(`./${joystick_initdb_command} -D ${process.cwd()}/.joystick/data/postgresql_${port} --no-locale`, {\n          cwd: joystick_postgresql_bin_path\n        });\n      }\n    }\n\n    const existing_process_id = parseInt(await get_process_id_from_port(postgresql_port), 10);\n\n    if (existing_process_id) {\n      if (postgres_user_command) {\n        const kill_command = `${postgres_user_command} \"cd ${joystick_postgresql_bin_path} && ./${joystick_pg_ctl_command} kill KILL ${existing_process_id}\"`;\n        await exec(kill_command, {\n          cwd: process.cwd()\n        });\n      } else {\n        await exec(`./${joystick_pg_ctl_command} kill KILL ${existing_process_id}`, {\n          cwd: joystick_postgresql_bin_path\n        });\n      }\n    }\n\n    const postgres_args = [\n      `-p ${postgresql_port}`,\n      '-D',\n      get_platform_safe_path(`${process.cwd()}/.joystick/data/postgresql_${port}`),\n    ];\n\n    const database_process = postgres_user_command\n      ? child_process.spawn('su', [\n          'postgres',\n          '-c',\n          `cd ${joystick_postgresql_bin_path} && ./${joystick_postgres_command} ${postgres_args.join(' ')}`\n        ])\n      : child_process.spawn(\n          `./${joystick_postgres_command}`,\n          postgres_args,\n          {\n            cwd: joystick_postgresql_bin_path\n          }\n        );\n\n    return new Promise((resolve, reject) => {\n      database_process.stderr.on('data', async (data) => {\n        const stderr = data?.toString();\n        console.log('PostgreSQL stderr:', stderr);\n\n        if (stderr.includes('database system is ready to accept connections')) {\n          const process_id = (await get_process_id_from_port(postgresql_port))?.replace('\\n', '');\n          const createdb_command = postgres_user_command\n            ? `${postgres_user_command} \"cd ${joystick_postgresql_bin_path} && ./${joystick_createdb_command} -h 127.0.0.1 -p ${postgresql_port} app\"`\n            : `./${joystick_createdb_command} -h 127.0.0.1 -p ${postgresql_port} app`;\n\n          exec(createdb_command, {\n            cwd: postgres_user_command ? process.cwd() : joystick_postgresql_bin_path\n          }).then(() => {\n            resolve(parseInt(process_id, 10));\n          }).catch(({ stderr: error }) => {\n            if (error && error.includes('database \"app\" already exists')) {\n              resolve(parseInt(process_id, 10));\n            } else {\n              console.log(error);\n            }\n          });\n        }\n      });\n\n      database_process.stdout.on('data', async (data) => {\n        // NOTE: PostgreSQL (16) appears to route all output to stderr(?!). Have this for posterity\n        // sake and to avoid trapping useful information.\n        const stdout = data?.toString();\n        console.log('PostgreSQL stdout:', stdout);\n      });\n\n      database_process.on('error', (error) => {\n        console.log('PostgreSQL process error:', error);\n        reject(error);\n      });\n\n      database_process.on('exit', (code, signal) => {\n        console.log(`PostgreSQL process exited with code ${code} and signal ${signal}`);\n        if (code !== 0) {\n          reject(new Error(`PostgreSQL process exited with code ${code}`));\n        }\n      });\n    });\n  } catch (exception) {\n    console.warn(exception);\n    process.exit(1);\n  }\n};\n\nexport default start_postgresql;\n"],
  "mappings": "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",
  "names": ["child_process", "fs", "util", "os", "path", "get_platform_safe_path", "get_process_id_from_port", "path_exists", "get_architecture", "exec", "rename", "setup_data_directory", "postgresql_port", "legacy_data_directory_exists", "data_directory_exists", "get_createdb_command", "get_postgres_command", "get_initdb_command", "get_pg_ctl_command", "get_postgres_user_command", "start_postgresql", "port", "architecture", "joystick_postgresql_base_path", "joystick_postgresql_bin_path", "joystick_pg_ctl_command", "joystick_initdb_command", "joystick_postgres_command", "joystick_createdb_command", "postgres_user_command", "initdb_command", "existing_process_id", "kill_command", "postgres_args", "database_process", "resolve", "reject", "data", "stderr", "process_id", "createdb_command", "error", "stdout", "code", "signal", "exception", "index_default"]
}
