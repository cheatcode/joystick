{
  "version": 3,
  "sources": ["../../../../../src/lib/development_server/databases/postgresql/index.js"],
  "sourcesContent": ["import child_process from \"child_process\";\nimport fs from \"fs\";\nimport util from \"util\";\nimport os from \"os\";\nimport path from \"path\";\nimport get_platform_safe_path from \"../../../get_platform_safe_path.js\";\nimport get_process_id_from_port from \"../../../get_process_id_from_port.js\";\nimport path_exists from \"../../../path_exists.js\";\nimport get_architecture from \"../../../get_architecture.js\";\n\nconst exec = util.promisify(child_process.exec);\nconst { rename } = fs.promises;\n\nconst setup_data_directory = async (postgresql_port = 2610) => {\n  const legacy_data_directory_exists = await path_exists(\".joystick/data/postgresql\");\n  let data_directory_exists = await path_exists(`.joystick/data/postgresql_${postgresql_port}`);\n\n  if (legacy_data_directory_exists && !data_directory_exists) {\n    await rename('.joystick/data/postgresql', `.joystick/data/postgresql_${postgresql_port}`);\n    data_directory_exists = true;\n  }\n\n  if (data_directory_exists) {\n    const pg_version_exists = await path_exists(`.joystick/data/postgresql_${postgresql_port}/PG_VERSION`);\n    if (!pg_version_exists) {\n      data_directory_exists = false;\n    }\n  }\n\n  return data_directory_exists;\n};\n\nconst get_createdb_command = () => {\n  return \"createdb\";\n};\n\nconst get_postgres_command = () => {\n  return \"postgres\";\n};\n\nconst get_initdb_command = () => {\n  return \"initdb\";\n};\n\nconst get_pg_ctl_command = () => {\n  return \"pg_ctl\";\n};\n\nconst start_postgresql = async (port = 2610) => {\n  try {\n    const postgresql_port = port;\n    const architecture = get_architecture();\n    const joystick_postgresql_base_path = path.join(os.homedir(), \".joystick\", \"databases\", \"postgresql\", architecture);\n    const joystick_postgresql_bin_path = path.join(joystick_postgresql_base_path, \"bin\");\n\n    const joystick_pg_ctl_command = get_pg_ctl_command();\n    const joystick_initdb_command = get_initdb_command();\n    const joystick_postgres_command = get_postgres_command();\n    const joystick_createdb_command = get_createdb_command();\n\n    const is_root_on_linux = process.platform === \"linux\" && process.getuid && process.getuid() === 0;\n\n    const data_directory_exists = await setup_data_directory(port);\n\n    if (!data_directory_exists) {\n      const data_dir = `${process.cwd()}/.joystick/data/postgresql_${port}`;\n      const auth_flags = \"--auth-local=trust --auth-host=trust -U postgres\";\n\n      if (is_root_on_linux) {\n        await exec(`mkdir -p ${data_dir}`);\n        await exec(`chown -R postgres:postgres ${process.cwd()}/.joystick/data`);\n        await exec(`sudo -u postgres ${joystick_postgresql_bin_path}/${joystick_initdb_command} -D ${data_dir} ${auth_flags}`);\n      } else {\n        await exec(`./${joystick_initdb_command} -D ${data_dir} ${auth_flags}`, {\n          cwd: joystick_postgresql_bin_path\n        });\n      }\n    }\n\n    const existing_process_id = parseInt(await get_process_id_from_port(postgresql_port), 10);\n\n    if (existing_process_id) {\n      if (is_root_on_linux) {\n        await exec(`sudo -u postgres ${joystick_postgresql_bin_path}/${joystick_pg_ctl_command} kill KILL ${existing_process_id}`);\n      } else {\n        await exec(`./${joystick_pg_ctl_command} kill KILL ${existing_process_id}`, {\n          cwd: joystick_postgresql_bin_path\n        });\n      }\n    }\n\n    const database_process = is_root_on_linux\n      ? child_process.spawn(\"sudo\", [\n          \"-u\", \"postgres\",\n          `${joystick_postgresql_bin_path}/${joystick_pg_ctl_command}`,\n          \"-o\", `\"-p ${postgresql_port}\"`,\n          \"-D\", get_platform_safe_path(`${process.cwd()}/.joystick/data/postgresql_${port}`),\n          \"-l\", get_platform_safe_path(`${process.cwd()}/.joystick/data/postgresql_${port}/logfile`),\n          \"start\",\n          \"-w\"\n        ])\n      : child_process.spawn(\n          `./${joystick_pg_ctl_command}`,\n          [\n            \"-o\", `\"-p ${postgresql_port}\"`,\n            \"-D\", get_platform_safe_path(`${process.cwd()}/.joystick/data/postgresql_${port}`),\n            \"-l\", get_platform_safe_path(`${process.cwd()}/.joystick/data/postgresql_${port}/logfile`),\n            \"start\",\n            \"-w\"\n          ],\n          {\n            cwd: joystick_postgresql_bin_path\n          }\n        );\n\n    return new Promise((resolve, reject) => {\n      database_process.on(\"exit\", async (code) => {\n        if (code === 0) {\n          const process_id = (await get_process_id_from_port(postgresql_port))?.replace(\"\\n\", \"\");\n\n          if (!process_id) {\n            reject(new Error(\"PostgreSQL server failed to start\"));\n            return;\n          }\n\n          const createdb_command = is_root_on_linux\n            ? `sudo -u postgres ${joystick_postgresql_bin_path}/${joystick_createdb_command} -h 127.0.0.1 -p ${postgresql_port} -U postgres app`\n            : `./${joystick_createdb_command} -h 127.0.0.1 -p ${postgresql_port} -U postgres app`;\n\n          try {\n            await exec(createdb_command, {\n              cwd: is_root_on_linux ? process.cwd() : joystick_postgresql_bin_path\n            });\n          } catch ({ stderr: error }) {\n            if (!error || !error.includes('database \"app\" already exists')) {\n              console.log(error);\n            }\n          }\n\n          resolve(parseInt(process_id, 10));\n        } else {\n          reject(new Error(`PostgreSQL failed to start (exit code: ${code})`));\n        }\n      });\n\n      database_process.on(\"error\", (error) => {\n        reject(error);\n      });\n    });\n  } catch (exception) {\n    console.warn(exception);\n    process.exit(1);\n  }\n};\n\nexport default start_postgresql;\n"],
  "mappings": "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",
  "names": ["child_process", "fs", "util", "os", "path", "get_platform_safe_path", "get_process_id_from_port", "path_exists", "get_architecture", "exec", "rename", "setup_data_directory", "postgresql_port", "legacy_data_directory_exists", "data_directory_exists", "get_createdb_command", "get_postgres_command", "get_initdb_command", "get_pg_ctl_command", "start_postgresql", "port", "architecture", "joystick_postgresql_base_path", "joystick_postgresql_bin_path", "joystick_pg_ctl_command", "joystick_initdb_command", "joystick_postgres_command", "joystick_createdb_command", "is_root_on_linux", "data_dir", "auth_flags", "existing_process_id", "database_process", "resolve", "reject", "code", "process_id", "createdb_command", "error", "exception", "index_default"]
}
