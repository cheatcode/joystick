{
  "version": 3,
  "sources": ["../../../../../src/lib/development_server/databases/postgresql/index.js"],
  "sourcesContent": ["import child_process from \"child_process\";\nimport fs from \"fs\";\nimport util from \"util\";\nimport os from \"os\";\nimport path from \"path\";\nimport get_platform_safe_path from \"../../../get_platform_safe_path.js\";\nimport get_process_id_from_port from \"../../../get_process_id_from_port.js\";\nimport path_exists from \"../../../path_exists.js\";\nimport get_architecture from \"../../../get_architecture.js\";\n\nconst exec = util.promisify(child_process.exec);\nconst { rename } = fs.promises;\n\n\nconst setup_data_directory = async (postgresql_port = 2610) => {\n  const legacy_data_directory_exists = await path_exists(\".joystick/data/postgresql\");\n  let data_directory_exists = await path_exists(`.joystick/data/postgresql_${postgresql_port}`);\n\n  if (legacy_data_directory_exists && !data_directory_exists) {\n    await rename ('.joystick/data/postgresql', `.joystick/data/postgresql_${postgresql_port}`);\n    data_directory_exists = true;\n  }\n\n  return data_directory_exists;\n};\n\nconst get_createdb_command = () => {\n  return 'createdb';\n};\n\nconst get_postgres_command = () => {\n  return 'postgres';\n};\n\nconst get_initdb_command = () => {\n  return 'initdb';\n};\n\nconst get_pg_ctl_command = () => {\n  return 'pg_ctl';\n};\n\n\nconst start_postgresql = async (port = 2610) => {\n  try {\n    const postgresql_port = port;\n    const architecture = get_architecture();\n    const joystick_postgresql_base_path = path.join(os.homedir(), '.joystick', 'databases', 'postgresql', architecture);\n    const joystick_postgresql_bin_path = path.join(joystick_postgresql_base_path, 'bin');\n\n    const joystick_pg_ctl_command = get_pg_ctl_command();\n    const joystick_initdb_command = get_initdb_command();\n    const joystick_postgres_command = get_postgres_command();\n    const joystick_createdb_command = get_createdb_command();\n\n    const is_root_on_linux = process.platform === 'linux' && process.getuid && process.getuid() === 0;\n\n    const data_directory_exists = await setup_data_directory(port);\n\n    if (!data_directory_exists) {\n      if (is_root_on_linux) {\n        // Create data directory and set ownership\n        await exec(`mkdir -p ${process.cwd()}/.joystick/data/postgresql_${port}`);\n        await exec(`chown -R postgres:postgres ${process.cwd()}/.joystick/data`);\n        \n        // Run initdb as postgres user with proper environment\n        await exec(`sudo -u postgres ${joystick_postgresql_bin_path}/${joystick_initdb_command} -D ${process.cwd()}/.joystick/data/postgresql_${port} --auth-local=trust --auth-host=trust`);\n      } else {\n        await exec(`./${joystick_initdb_command} -D ${process.cwd()}/.joystick/data/postgresql_${port}`, {\n          cwd: joystick_postgresql_bin_path\n        });\n      }\n    }\n\n    const existing_process_id = parseInt(await get_process_id_from_port(postgresql_port), 10);\n\n    if (existing_process_id) {\n      if (is_root_on_linux) {\n        await exec(`sudo -u postgres ${joystick_postgresql_bin_path}/${joystick_pg_ctl_command} kill KILL ${existing_process_id}`);\n      } else {\n        await exec(`./${joystick_pg_ctl_command} kill KILL ${existing_process_id}`, {\n          cwd: joystick_postgresql_bin_path\n        });\n      }\n    }\n\n    const database_process = is_root_on_linux\n      ? child_process.spawn('sudo', [\n          '-u', 'postgres',\n          `${joystick_postgresql_bin_path}/${joystick_pg_ctl_command}`,\n          '-o', `\"-p ${postgresql_port}\"`,\n          '-D', get_platform_safe_path(`${process.cwd()}/.joystick/data/postgresql_${port}`),\n          'start'\n        ])\n      : child_process.spawn(\n          `./${joystick_pg_ctl_command}`,\n          [\n            '-o',\n            `\"-p ${postgresql_port}\"`,\n            '-D',\n            get_platform_safe_path(`${process.cwd()}/.joystick/data/postgresql_${port}`),\n            'start',\n          ],\n          {\n            cwd: joystick_postgresql_bin_path\n          }\n        );\n\n    return new Promise((resolve, reject) => {\n      database_process.stderr.on('data', async (data) => {\n        const stderr = data?.toString();\n\n        if (!stderr?.includes('another server might be running')) {\n          console.warn(stderr);\n        }\n      });\n\n      database_process.stdout.on('data', async (data) => {\n        const stdout = data?.toString();\n\n        if (stdout.includes('database system is ready to accept connections')) {\n          const process_id = (await get_process_id_from_port(postgresql_port))?.replace('\\n', '');\n\n          const createdb_command = is_root_on_linux\n            ? `sudo -u postgres ${joystick_postgresql_bin_path}/${joystick_createdb_command} -h 127.0.0.1 -p ${postgresql_port} app`\n            : `./${joystick_createdb_command} -h 127.0.0.1 -p ${postgresql_port} app`;\n\n          exec(createdb_command, {\n            cwd: is_root_on_linux ? process.cwd() : joystick_postgresql_bin_path\n          }).then(() => {\n            resolve(parseInt(process_id, 10));\n          }).catch(({ stderr: error }) => {\n            if (error && error.includes('database \"app\" already exists')) {\n              resolve(parseInt(process_id, 10));\n            } else {\n              console.log(error);\n            }\n          });\n        }\n      });\n\n      database_process.on('error', (error) => {\n        console.log('PostgreSQL process error:', error);\n        reject(error);\n      });\n\n      database_process.on('exit', (code, signal) => {\n        console.log(`PostgreSQL process exited with code ${code} and signal ${signal}`);\n        if (code !== 0) {\n          reject(new Error(`PostgreSQL process exited with code ${code}`));\n        }\n      });\n    });\n  } catch (exception) {\n    console.warn(exception);\n    process.exit(1);\n  }\n};\n\nexport default start_postgresql;\n"],
  "mappings": "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",
  "names": ["child_process", "fs", "util", "os", "path", "get_platform_safe_path", "get_process_id_from_port", "path_exists", "get_architecture", "exec", "rename", "setup_data_directory", "postgresql_port", "legacy_data_directory_exists", "data_directory_exists", "get_createdb_command", "get_postgres_command", "get_initdb_command", "get_pg_ctl_command", "start_postgresql", "port", "architecture", "joystick_postgresql_base_path", "joystick_postgresql_bin_path", "joystick_pg_ctl_command", "joystick_initdb_command", "joystick_postgres_command", "joystick_createdb_command", "is_root_on_linux", "existing_process_id", "database_process", "resolve", "reject", "data", "stderr", "process_id", "createdb_command", "error", "code", "signal", "exception", "index_default"]
}
