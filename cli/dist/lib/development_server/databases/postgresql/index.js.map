{
  "version": 3,
  "sources": ["../../../../../src/lib/development_server/databases/postgresql/index.js"],
  "sourcesContent": ["import child_process from \"child_process\";\nimport fs from \"fs\";\nimport util from \"util\";\nimport os from \"os\";\nimport get_platform_safe_path from \"../../../get_platform_safe_path.js\";\nimport get_process_id_from_port from \"../../../get_process_id_from_port.js\";\nimport path_exists from \"../../../path_exists.js\";\n\nconst exec = util.promisify(child_process.exec);\nconst { rename } = fs.promises;\n\nconst setup_data_directory = async (postgresql_port = 2610) => {\n  const legacy_data_directory_exists = await path_exists(\".joystick/data/postgresql\");\n  let data_directory_exists = await path_exists(`.joystick/data/postgresql_${postgresql_port}`);\n\n  if (legacy_data_directory_exists && !data_directory_exists) {\n    await rename ('.joystick/data/postgresql', `.joystick/data/postgresql_${postgresql_port}`);\n    data_directory_exists = true;\n  }\n\n  return data_directory_exists;\n};\n\nconst get_createdb_command = () => {\n  if (process.platform === 'win32') {\n    return 'createdb.exe';\n  }\n\n  return 'createdb';\n};\n\nconst get_postgres_command = () => {\n  if (process.platform === 'win32') {\n    return 'postgres.exe';\n  }\n\n  return 'postgres';\n};\n\nconst get_initdb_command = () => {\n  if (process.platform === 'win32') {\n    return 'initdb.exe';\n  }\n\n  return 'initdb';\n};\n\nconst get_pg_ctl_command = () => {\n  if (process.platform === 'win32') {\n    return 'pgctl.exe';\n  }\n\n  return 'pgctl';\n};\n\nconst start_postgresql = async (port = 2610) => {\n  try {\n    const postgresql_port = port;\n    const joystick_postgresql_bin_path = `${os.homedir()}/.joystick/databases/postgresql/bin/bin`;\n\n    const joystick_pg_ctl_command = get_pg_ctl_command();\n    const joystick_initdb_command = get_initdb_command();\n    const joystick_postgres_command = get_postgres_command();\n    const joystick_createdb_command = get_createdb_command();\n    \n    const joystick_pg_ctl_path = `${joystick_postgresql_bin_path}/${joystick_pg_ctl_command}`;\n    const joystick_initdb_path = `${joystick_postgresql_bin_path}/${joystick_initdb_command}`;\n    const joystick_postgres_path = `${joystick_postgresql_bin_path}/${joystick_postgres_command}`;\n    const joystick_createdb_path = `${joystick_postgresql_bin_path}/${joystick_createdb_command}`;\n\n    const data_directory_exists = await setup_data_directory(port);\n\n    if (!data_directory_exists) {\n      if (process.platform === 'linux') {\n        await exec(`sudo -u postgres ./initdb -D ${process.cwd()}/.joystick/data/postgresql_${port} --no-locale`, {\n          cwd: joystick_postgresql_bin_path\n        });\n\n        // NOTE: For Linux, we need to set granular permissions on the data directory path\n        // to avoid access denied errors from the OS.\n        await exec(`sudo chmod 755 /root`);\n        await exec(`sudo chmod 755 /root/${process.project_folder}`);\n        await exec(`sudo chmod 755 /root/${process.project_folder}/.joystick`);\n        await exec(`sudo chmod 700 /root/${process.project_folder}/.joystick/data/postgresql_${postgresql_port}`);\n        await exec(`sudo chown -R postgres:postgres /root/${process.project_folder}/.joystick/data/postgresql_${postgresql_port}`);\n      } else {\n        await exec(`${joystick_initdb_path} -D .joystick/data/postgresql_${port} --no-locale`);\n      }\n    }\n\n    const existing_process_id = parseInt(await get_process_id_from_port(postgresql_port), 10);\n\n    if (existing_process_id) {\n      if (process.platform === 'linux') {\n        await exec(`${joystick_pg_ctl_path} kill KILL ${existing_process_id}`);\n      } else {\n        await exec(`${joystick_pg_ctl_path} kill KILL ${existing_process_id}`);\n      }\n    }\n\n    const database_process = process.platform === 'linux' ? child_process.spawn(\n      'sudo',\n      [\n        '-u',\n        'postgres',\n        './postgres',\n        `-p ${postgresql_port}`,\n        '-D',\n        get_platform_safe_path(`${process.cwd()}/.joystick/data/postgresql_${port}`),\n        '-c log_destination=stderr -c logging_collector=off -c log_min_messages=WARNING',\n      ],\n      { cwd: joystick_postgresql_bin_path, shell: '/bin/bash' }\n    ) : child_process.spawn(\n      joystick_postgres_path,\n      [\n        `-p ${postgresql_port}`,\n        '-D',\n        get_platform_safe_path(`.joystick/data/postgresql_${port}`),\n      ],\n    );\n\n    return new Promise((resolve) => {\n      database_process.stderr.on('data', async (data) => {\n        const stderr = data?.toString();\n\n        if (stderr.includes('database system is ready to accept connections')) {\n          const process_id = (await get_process_id_from_port(postgresql_port))?.replace('\\n', '');\n          const createdb_command = process.platform === 'linux'\n            ? `sudo -u postgres ${joystick_createdb_path} -h 127.0.0.1 -p ${postgresql_port} app`\n            : `${joystick_createdb_path} -h 127.0.0.1 -p ${postgresql_port} app`;\n\n          exec(createdb_command).then(() => {\n            resolve(parseInt(process_id, 10));\n          }).catch(({ stderr: error }) => {\n            if (error && error.includes('database \"app\" already exists')) {\n              resolve(parseInt(process_id, 10));\n            } else {\n              console.log(error);\n            }\n          });\n        }\n      });\n\n      database_process.stdout.on('data', async (data) => {\n        // NOTE: PostgreSQL (16) appears to route all output to stderr(?!). Have this for posterity\n        // sake and to avoid trapping useful information.\n        const stdout = data?.toString();\n        console.log(stdout);\n      });\n    });\n  } catch (exception) {\n    console.warn(exception);\n    process.exit(1);\n  }\n};\n\nexport default start_postgresql;"],
  "mappings": "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",
  "names": ["child_process", "fs", "util", "os", "get_platform_safe_path", "get_process_id_from_port", "path_exists", "exec", "rename", "setup_data_directory", "postgresql_port", "legacy_data_directory_exists", "data_directory_exists", "get_createdb_command", "get_postgres_command", "get_initdb_command", "get_pg_ctl_command", "start_postgresql", "port", "joystick_postgresql_bin_path", "joystick_pg_ctl_command", "joystick_initdb_command", "joystick_postgres_command", "joystick_createdb_command", "joystick_pg_ctl_path", "joystick_initdb_path", "joystick_postgres_path", "joystick_createdb_path", "existing_process_id", "database_process", "resolve", "data", "process_id", "createdb_command", "error", "stdout", "exception", "postgresql_default"]
}
