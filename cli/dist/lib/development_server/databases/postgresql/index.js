import g from"child_process";import A from"fs";import D from"util";import f from"os";import r from"path";import I from"../../../get_platform_safe_path.js";import y from"../../../get_process_id_from_port.js";import u from"../../../path_exists.js";const i=D.promisify(g.exec),{rename:v}=A.promises,R=()=>{const t=f.arch();if(t==="arm64")return"arm64";if(t==="x64")return"x86_64";throw new Error(`Unsupported architecture: ${t}`)},c=t=>{const s={...process.env},o=r.join(t,"lib");return process.platform==="darwin"?(s.DYLD_FALLBACK_LIBRARY_PATH=o,s.DYLD_LIBRARY_PATH=o):process.platform==="linux"&&(s.LD_LIBRARY_PATH=o),s},Y=async(t=2610)=>{const s=await u(".joystick/data/postgresql");let o=await u(`.joystick/data/postgresql_${t}`);return s&&!o&&(await v(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),o=!0),o},B=()=>process.platform==="win32"?"createdb.exe":"createdb",P=()=>process.platform==="win32"?"postgres.exe":"postgres",H=()=>process.platform==="win32"?"initdb.exe":"initdb",T=()=>process.platform==="win32"?"pgctl.exe":"pgctl",K=async(t=2610)=>{try{const s=t,o=R(),e=r.join(f.homedir(),".joystick","databases","postgresql",o),b=T(),j=H(),h=P(),x=B(),w=r.join(e,"bin",b),k=r.join(e,"bin",j),$=r.join(e,"bin",h),q=r.join(e,"bin",x);await Y(t)||await i(`${k} -D .joystick/data/postgresql_${t} --no-locale`,{env:c(e)});const p=parseInt(await y(s),10);p&&await i(`${w} kill KILL ${p}`,{env:c(e)});const _=g.spawn($,[`-p ${s}`,"-D",I(`.joystick/data/postgresql_${t}`)],{env:c(e)});return new Promise(d=>{_.stderr.on("data",async a=>{if((a?.toString()).includes("database system is ready to accept connections")){const l=(await y(s))?.replace(`
`,""),L=`${q} -h 127.0.0.1 -p ${s} app`;i(L,{env:c(e)}).then(()=>{d(parseInt(l,10))}).catch(({stderr:n})=>{n&&n.includes('database "app" already exists')?d(parseInt(l,10)):console.log(n)})}}),_.stdout.on("data",async a=>{const m=a?.toString();console.log(m)})})}catch(s){console.warn(s),process.exit(1)}};var N=K;export{N as default};
//# sourceMappingURL=index.js.map
