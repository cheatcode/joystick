import n from"child_process";import x from"fs";import q from"util";import I from"os";import"path";import f from"../../../get_platform_safe_path.js";import u from"../../../get_process_id_from_port.js";import y from"../../../path_exists.js";const e=q.promisify(n.exec),{rename:D,mkdir:L,readdir:O}=x.promises,K=async(t=2610)=>{const o=await y(".joystick/data/postgresql");let s=await y(`.joystick/data/postgresql_${t}`);return o&&!s&&(await D(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),s=!0),s||(await L(`.joystick/data/postgresql_${t}`,{recursive:!0}),s=!0),process.platform==="linux"&&(await e("sudo chmod 755 /root"),await e(`sudo chmod 755 /root/${process.project_folder}`),await e(`sudo chmod 755 /root/${process.project_folder}/.joystick`),await e(`sudo chmod 700 /root/${process.project_folder}/.joystick/data/postgresql_${t}`),await e(`sudo chown -R postgres:postgres /root/${process.project_folder}/.joystick/data/postgresql_${t}`)),s},S=()=>process.platform==="win32"?"createdb.exe":"createdb",v=()=>process.platform==="win32"?"postgres.exe":"postgres",P=()=>process.platform==="win32"?"initdb.exe":"initdb",R=()=>process.platform==="win32"?"pgctl.exe":"pgctl",z=async(t=2610)=>{try{const o=t,s=`${I.homedir()}/.joystick/databases/postgresql/bin/bin`,$=R(),w=P(),j=v(),k=S(),p=`${s}/${$}`,d=`${s}/${w}`,h=`${s}/${j}`,_=`${s}/${k}`;await K(t)||(process.platform==="linux"?await e(`sudo -u postgres ${d} -D .joystick/data/postgresql_${t} --options=--no-locale`):await e(`${d} -D .joystick/data/postgresql_${t} --options=--no-locale`));const r=parseInt(await u(o),10);r&&(process.platform==="linux"?await e(`${p} kill KILL ${r}`):await e(`${p} kill KILL ${r}`));const l=process.platform==="linux"?n.spawn("sudo -u postgres ./postgres",[`-p ${o}`,"-D",f(`${process.cwd()}/.joystick/data/postgresql_${t}`)],{cwd:s,shell:"/bin/bash"}):n.spawn(h,[`-p ${o}`,"-D",f(`.joystick/data/postgresql_${t}`)]);return new Promise(m=>{l.stderr.on("data",async c=>{const a=c?.toString();console.log(a),a?.includes("another server might be running")||console.warn(a)}),l.stdout.on("data",async c=>{const a=c?.toString();if(console.log(a),a.includes("database system is ready to accept connections")){const g=(await u(o))?.replace(`
`,""),b=process.platform==="linux"?`sudo -u postgres ${_} -h 127.0.0.1 -p ${o} app`:`${_} -h 127.0.0.1 -p ${o} app`;e(b).then(()=>{m(parseInt(g,10))}).catch(({stderr:i})=>{i&&i.includes('database "app" already exists')?m(parseInt(g,10)):console.log(i)})}})})}catch(o){console.warn(o),process.exit(1)}};var Q=z;export{Q as default};
