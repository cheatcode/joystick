import l from"child_process";import h from"fs";import q from"util";import b from"os";import u from"path";import p from"../../../get_platform_safe_path.js";import k from"../../../get_process_id_from_port.js";import g from"../../../path_exists.js";import L from"../../../get_architecture.js";const a=q.promisify(l.exec),{rename:I}=h.promises,D=async(s=2610)=>{const t=await g(".joystick/data/postgresql");let e=await g(`.joystick/data/postgresql_${s}`);return t&&!e&&(await I(".joystick/data/postgresql",`.joystick/data/postgresql_${s}`),e=!0),e&&(await g(`.joystick/data/postgresql_${s}/PG_VERSION`)||(e=!1)),e},P=()=>"createdb",v=()=>"postgres",E=()=>"initdb",S=()=>"pg_ctl",K=async(s=2610)=>{try{const t=s,e=L(),m=u.join(b.homedir(),".joystick","databases","postgresql",e),o=u.join(m,"bin"),c=S(),$=E(),Q=v(),w=P(),r=process.platform==="linux"&&process.getuid&&process.getuid()===0;await D(s)||(r?(await a(`mkdir -p ${process.cwd()}/.joystick/data/postgresql_${s}`),await a(`chown -R postgres:postgres ${process.cwd()}/.joystick/data`),await a(`sudo -u postgres ${o}/${$} -D ${process.cwd()}/.joystick/data/postgresql_${s} --auth-local=trust --auth-host=trust`)):await a(`./${$} -D ${process.cwd()}/.joystick/data/postgresql_${s}`,{cwd:o}));const n=parseInt(await k(t),10);n&&(r?await a(`sudo -u postgres ${o}/${c} kill KILL ${n}`):await a(`./${c} kill KILL ${n}`,{cwd:o}));const y=r?l.spawn("sudo",["-u","postgres",`${o}/${c}`,"-o",`"-p ${t}"`,"-D",p(`${process.cwd()}/.joystick/data/postgresql_${s}`),"-l",p(`${process.cwd()}/.joystick/data/postgresql_${s}/logfile`),"start","-w"]):l.spawn(`./${c}`,["-o",`"-p ${t}"`,"-D",p(`${process.cwd()}/.joystick/data/postgresql_${s}`),"-l",p(`${process.cwd()}/.joystick/data/postgresql_${s}/logfile`),"start","-w"],{cwd:o});return new Promise((j,d)=>{y.on("exit",async(i,G)=>{if(i===0){const f=(await k(t))?.replace(`
`,"");if(!f){d(new Error("PostgreSQL server failed to start"));return}const x=r?`sudo -u postgres ${o}/${w} -h 127.0.0.1 -p ${t} app`:`./${w} -h 127.0.0.1 -p ${t} app`;try{await a(x,{cwd:r?process.cwd():o})}catch({stderr:_}){(!_||!_.includes('database "app" already exists'))&&console.log(_)}j(parseInt(f,10))}else d(new Error(`PostgreSQL failed to start (exit code: ${i})`))}),y.on("error",i=>{d(i)})})}catch(t){console.warn(t),process.exit(1)}};var J=K;export{J as default};
//# sourceMappingURL=index.js.map
