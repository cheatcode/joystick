import m from"child_process";import k from"fs";import $ from"util";import l from"os";import g from"path";import q from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import y from"../../../path_exists.js";const a=$.promisify(m.exec),{rename:I}=k.promises,D=()=>{const t=l.arch();if(t==="arm64")return"arm64";if(t==="x64")return"x86_64";throw new Error(`Unsupported architecture: ${t}`)},L=async(t=2610)=>{const s=await y(".joystick/data/postgresql");let e=await y(`.joystick/data/postgresql_${t}`);return s&&!e&&(await I(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),e=!0),e},S=()=>process.platform==="win32"?"createdb.exe":"createdb",E=()=>process.platform==="win32"?"postgres.exe":"postgres",K=()=>process.platform==="win32"?"initdb.exe":"initdb",P=()=>process.platform==="win32"?"pgctl.exe":"pgctl",U=async(t=2610)=>{try{const s=t,e=D(),u=g.join(l.homedir(),".joystick","databases","postgresql",e),o=g.join(u,"bin"),w=P(),x=K(),h=E(),b=S();await L(t)||await a(`./${x} -D ${process.cwd()}/.joystick/data/postgresql_${t} --no-locale`,{cwd:o});const i=parseInt(await f(s),10);i&&await a(`./${w} kill KILL ${i}`,{cwd:o});const n=m.spawn(`./${h}`,[`-p ${s}`,"-D",q(`${process.cwd()}/.joystick/data/postgresql_${t}`)],{cwd:o});return new Promise(p=>{n.stderr.on("data",async r=>{if((r?.toString()).includes("database system is ready to accept connections")){const _=(await f(s))?.replace(`
`,""),j=`./${b} -h 127.0.0.1 -p ${s} app`;a(j,{cwd:o}).then(()=>{p(parseInt(_,10))}).catch(({stderr:c})=>{c&&c.includes('database "app" already exists')?p(parseInt(_,10)):console.log(c)})}}),n.stdout.on("data",async r=>{const d=r?.toString();console.log(d)})})}catch(s){console.warn(s),process.exit(1)}};var N=U;export{N as default};
//# sourceMappingURL=index.js.map
