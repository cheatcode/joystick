import d from"child_process";import x from"fs";import q from"util";import I from"os";import b from"path";import L from"../../../get_platform_safe_path.js";import j from"../../../get_process_id_from_port.js";import k from"../../../path_exists.js";import D from"../../../get_architecture.js";const o=q.promisify(d.exec),{rename:K}=x.promises,R=async(t=2610)=>{const s=await k(".joystick/data/postgresql");let a=await k(`.joystick/data/postgresql_${t}`);return s&&!a&&(await K(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),a=!0),a},S=()=>process.platform==="win32"?"createdb.exe":"createdb",P=()=>process.platform==="win32"?"postgres.exe":"postgres",z=()=>process.platform==="win32"?"initdb.exe":"initdb",A=()=>process.platform==="win32"?"pgctl.exe":"pgctl",B=()=>process.platform==="linux"&&process.getuid&&process.getuid()===0?"su postgres -c":"",C=async(t=2610)=>{try{const s=t,a=D(),_=b.join(I.homedir(),".joystick","databases","postgresql",a),e=b.join(_,"bin"),m=A(),l=z(),g=P(),w=S(),c=B();if(!await R(t))if(c){try{await o("id postgres")}catch{await o("useradd -r -s /bin/false postgres")}await o(`chown -R postgres:postgres ${process.cwd()}/.joystick/data/postgresql_${t}`,{cwd:process.cwd()}),await o(`chown -R postgres:postgres ${_}`,{cwd:process.cwd()});const r=`${c} "cd ${e} && ./${l} -D ${process.cwd()}/.joystick/data/postgresql_${t} --no-locale"`;await o(r,{cwd:process.cwd()})}else await o(`./${l} -D ${process.cwd()}/.joystick/data/postgresql_${t} --no-locale`,{cwd:e});const n=parseInt(await j(s),10);if(n)if(c){const r=`${c} "cd ${e} && ./${m} kill KILL ${n}"`;await o(r,{cwd:process.cwd()})}else await o(`./${m} kill KILL ${n}`,{cwd:e});const f=[`-p ${s}`,"-D",L(`${process.cwd()}/.joystick/data/postgresql_${t}`)],$=c?d.spawn("su",["postgres","-c",`cd ${e} && ./${g} ${f.join(" ")}`]):d.spawn(`./${g}`,f,{cwd:e});return new Promise(r=>{$.stderr.on("data",async i=>{if((i?.toString()).includes("database system is ready to accept connections")){const u=(await j(s))?.replace(`
`,""),h=c?`${c} "cd ${e} && ./${w} -h 127.0.0.1 -p ${s} app"`:`./${w} -h 127.0.0.1 -p ${s} app`;o(h,{cwd:c?process.cwd():e}).then(()=>{r(parseInt(u,10))}).catch(({stderr:p})=>{p&&p.includes('database "app" already exists')?r(parseInt(u,10)):console.log(p)})}}),$.stdout.on("data",async i=>{const y=i?.toString();console.log(y)})})}catch(s){console.warn(s),process.exit(1)}};var U=C;export{U as default};
//# sourceMappingURL=index.js.map
