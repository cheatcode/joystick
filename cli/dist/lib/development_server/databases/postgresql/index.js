import g from"child_process";import L from"fs";import S from"util";import j from"os";import l from"path";import P from"../../../get_platform_safe_path.js";import x from"../../../get_process_id_from_port.js";import b from"../../../path_exists.js";import I from"../../../get_architecture.js";const s=S.promisify(g.exec),{rename:Q}=L.promises,D=async(t=2610)=>{const c=await b(".joystick/data/postgresql");let d=await b(`.joystick/data/postgresql_${t}`);return c&&!d&&(await Q(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),d=!0),d},R=()=>process.platform==="win32"?"createdb.exe":"createdb",K=()=>process.platform==="win32"?"postgres.exe":"postgres",E=()=>process.platform==="win32"?"initdb.exe":"initdb",z=()=>process.platform==="win32"?"pgctl.exe":"pgctl",A=()=>process.platform==="linux"&&process.getuid&&process.getuid()===0?"su postgres -c":"",B=async(t=2610)=>{try{const c=t,d=I(),p=l.join(j.homedir(),".joystick","databases","postgresql",d),e=l.join(p,"bin"),$=z(),y=E(),f=K(),u=R(),r=A();if(!await D(t))if(r){try{await s("id postgres")}catch{await s("useradd -r -s /bin/false postgres")}await s(`mkdir -p ${process.cwd()}/.joystick/data/postgresql_${t}`,{cwd:process.cwd()}),await s(`mkdir -p ${process.cwd()}/.joystick/data`,{cwd:process.cwd()}),await s(`chmod 755 ${process.cwd()}`,{cwd:process.cwd()}),await s(`chmod 755 ${process.cwd()}/.joystick`,{cwd:process.cwd()}),await s(`chmod 755 ${process.cwd()}/.joystick/data`,{cwd:process.cwd()}),await s(`chown -R postgres:postgres ${process.cwd()}/.joystick/data/postgresql_${t}`,{cwd:process.cwd()}),await s(`chmod 755 ${j.homedir()}`,{cwd:process.cwd()}),await s(`chmod -R 755 ${l.dirname(p)}`,{cwd:process.cwd()}),await s(`chown -R postgres:postgres ${p}`,{cwd:process.cwd()});const a=`${r} "cd ${e} && ./${y} -D ${process.cwd()}/.joystick/data/postgresql_${t} --no-locale"`;await s(a,{cwd:process.cwd()})}else await s(`./${y} -D ${process.cwd()}/.joystick/data/postgresql_${t} --no-locale`,{cwd:e});const w=parseInt(await x(c),10);if(w)if(r){const a=`${r} "cd ${e} && ./${$} kill KILL ${w}"`;await s(a,{cwd:process.cwd()})}else await s(`./${$} kill KILL ${w}`,{cwd:e});const h=[`-p ${c}`,"-D",P(`${process.cwd()}/.joystick/data/postgresql_${t}`)],n=r?g.spawn("su",["postgres","-c",`cd ${e} && ./${f} ${h.join(" ")}`]):g.spawn(`./${f}`,h,{cwd:e});return new Promise((a,m)=>{n.stderr.on("data",async o=>{const i=o?.toString();if(console.log("PostgreSQL stderr:",i),i.includes("database system is ready to accept connections")){const k=(await x(c))?.replace(`
`,""),q=r?`${r} "cd ${e} && ./${u} -h 127.0.0.1 -p ${c} app"`:`./${u} -h 127.0.0.1 -p ${c} app`;s(q,{cwd:r?process.cwd():e}).then(()=>{a(parseInt(k,10))}).catch(({stderr:_})=>{_&&_.includes('database "app" already exists')?a(parseInt(k,10)):console.log(_)})}}),n.stdout.on("data",async o=>{const i=o?.toString();console.log("PostgreSQL stdout:",i)}),n.on("error",o=>{console.log("PostgreSQL process error:",o),m(o)}),n.on("exit",(o,i)=>{console.log(`PostgreSQL process exited with code ${o} and signal ${i}`),o!==0&&m(new Error(`PostgreSQL process exited with code ${o}`))})})}catch(c){console.warn(c),process.exit(1)}};var V=B;export{V as default};
//# sourceMappingURL=index.js.map
