import m from"child_process";import k from"fs";import h from"util";import $ from"os";import l from"path";import q from"../../../get_platform_safe_path.js";import g from"../../../get_process_id_from_port.js";import f from"../../../path_exists.js";import I from"../../../get_architecture.js";const a=h.promisify(m.exec),{rename:D}=k.promises,L=async(s=2610)=>{const t=await f(".joystick/data/postgresql");let o=await f(`.joystick/data/postgresql_${s}`);return t&&!o&&(await D(".joystick/data/postgresql",`.joystick/data/postgresql_${s}`),o=!0),o},S=()=>process.platform==="win32"?"createdb.exe":"createdb",K=()=>process.platform==="win32"?"postgres.exe":"postgres",P=()=>process.platform==="win32"?"initdb.exe":"initdb",z=()=>process.platform==="win32"?"pgctl.exe":"pgctl",A=async(s=2610)=>{try{const t=s,o=I(),y=l.join($.homedir(),".joystick","databases","postgresql",o),e=l.join(y,"bin"),w=z(),u=P(),b=K(),x=S();await L(s)||await a(`./${u} -D ${process.cwd()}/.joystick/data/postgresql_${s} --no-locale`,{cwd:e});const i=parseInt(await g(t),10);i&&await a(`./${w} kill KILL ${i}`,{cwd:e});const n=m.spawn(`./${b}`,[`-p ${t}`,"-D",q(`${process.cwd()}/.joystick/data/postgresql_${s}`)],{cwd:e});return new Promise(p=>{n.stderr.on("data",async c=>{if((c?.toString()).includes("database system is ready to accept connections")){const _=(await g(t))?.replace(`
`,""),j=`./${x} -h 127.0.0.1 -p ${t} app`;a(j,{cwd:e}).then(()=>{p(parseInt(_,10))}).catch(({stderr:r})=>{r&&r.includes('database "app" already exists')?p(parseInt(_,10)):console.log(r)})}}),n.stdout.on("data",async c=>{const d=c?.toString();console.log(d)})})}catch(t){console.warn(t),process.exit(1)}};var Q=A;export{Q as default};
//# sourceMappingURL=index.js.map
