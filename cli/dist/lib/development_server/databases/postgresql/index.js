import g from"child_process";import h from"fs";import x from"util";import b from"os";import q from"../../../get_platform_safe_path.js";import y from"../../../get_process_id_from_port.js";import f from"../../../path_exists.js";const e=x.promisify(g.exec),{rename:I,mkdir:L}=h.promises,D=async(t=2610)=>{const o=await f(".joystick/data/postgresql");let s=await f(`.joystick/data/postgresql_${t}`);if(o&&!s&&(await I(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),s=!0),s||(await L(`.joystick/data/postgresql_${t}`,{recursive:!0}),s=!0),process.platform==="linux")try{await e(`sudo chown postgres:postgres .joystick/data/postgresql_${t}`),await e(`sudo chmod 700 .joystick/data/postgresql_${t}`)}catch(r){throw console.error("Error setting permissions for data directory:",r),r}return s},K=()=>process.platform==="win32"?"createdb.exe":"createdb",S=()=>process.platform==="win32"?"postgres.exe":"postgres",v=()=>process.platform==="win32"?"initdb.exe":"initdb",E=()=>process.platform==="win32"?"pgctl.exe":"pgctl",P=async(t=2610)=>{try{const o=t,s=`${b.homedir()}/.joystick/databases/postgresql/bin/bin`,r=E(),u=v(),$=S(),k=K(),p=`${s}/${r}`,d=`${s}/${u}`,w=`${s}/${$}`,j=`${s}/${k}`;await D(t)||(process.platform==="linux"?await e(`sudo -u postgres ${d} -D .joystick/data/postgresql_${t} --options=--no-locale`):await e(`${d} -D .joystick/data/postgresql_${t} --options=--no-locale`));const i=parseInt(await y(o),10);i&&(process.platform==="linux"?await e(`${p} kill KILL ${i}`):await e(`${p} kill KILL ${i}`));const _=g.spawn(w,["-o",`"-p ${o}"`,"-D",q(`.joystick/data/postgresql_${t}`),"start"]);return new Promise(l=>{_.stderr.on("data",async c=>{const a=c?.toString();console.log(a),a?.includes("another server might be running")||console.warn(a)}),_.stdout.on("data",async c=>{const a=c?.toString();if(console.log(a),a.includes("database system is ready to accept connections")){const m=(await y(o))?.replace(`
`,"");e(`${j} -h 127.0.0.1 -p ${o} app`).then(()=>{l(parseInt(m,10))}).catch(({stderr:n})=>{n&&n.includes('database "app" already exists')?l(parseInt(m,10)):console.log(n)})}})})}catch(o){console.warn(o),process.exit(1)}};var M=P;export{M as default};
