import p from"child_process";import x from"fs";import q from"util";import I from"os";import k from"path";import L from"../../../get_platform_safe_path.js";import j from"../../../get_process_id_from_port.js";import b from"../../../path_exists.js";import D from"../../../get_architecture.js";const t=q.promisify(p.exec),{rename:K}=x.promises,R=async(s=2610)=>{const o=await b(".joystick/data/postgresql");let a=await b(`.joystick/data/postgresql_${s}`);return o&&!a&&(await K(".joystick/data/postgresql",`.joystick/data/postgresql_${s}`),a=!0),a},S=()=>process.platform==="win32"?"createdb.exe":"createdb",P=()=>process.platform==="win32"?"postgres.exe":"postgres",z=()=>process.platform==="win32"?"initdb.exe":"initdb",A=()=>process.platform==="win32"?"pgctl.exe":"pgctl",B=()=>process.platform==="linux"&&process.getuid&&process.getuid()===0?"su postgres -c":"",C=async(s=2610)=>{try{const o=s,a=D(),_=k.join(I.homedir(),".joystick","databases","postgresql",a),e=k.join(_,"bin"),m=A(),l=z(),g=P(),w=S(),c=B();if(!await R(s))if(c){try{await t("id postgres")}catch{await t("useradd -r -s /bin/false postgres")}await t(`mkdir -p ${process.cwd()}/.joystick/data/postgresql_${s}`,{cwd:process.cwd()}),await t(`chown -R postgres:postgres ${process.cwd()}/.joystick/data/postgresql_${s}`,{cwd:process.cwd()}),await t(`chown -R postgres:postgres ${_}`,{cwd:process.cwd()});const r=`${c} "cd ${e} && ./${l} -D ${process.cwd()}/.joystick/data/postgresql_${s} --no-locale"`;await t(r,{cwd:process.cwd()})}else await t(`./${l} -D ${process.cwd()}/.joystick/data/postgresql_${s} --no-locale`,{cwd:e});const n=parseInt(await j(o),10);if(n)if(c){const r=`${c} "cd ${e} && ./${m} kill KILL ${n}"`;await t(r,{cwd:process.cwd()})}else await t(`./${m} kill KILL ${n}`,{cwd:e});const $=[`-p ${o}`,"-D",L(`${process.cwd()}/.joystick/data/postgresql_${s}`)],f=c?p.spawn("su",["postgres","-c",`cd ${e} && ./${g} ${$.join(" ")}`]):p.spawn(`./${g}`,$,{cwd:e});return new Promise(r=>{f.stderr.on("data",async i=>{if((i?.toString()).includes("database system is ready to accept connections")){const u=(await j(o))?.replace(`
`,""),h=c?`${c} "cd ${e} && ./${w} -h 127.0.0.1 -p ${o} app"`:`./${w} -h 127.0.0.1 -p ${o} app`;t(h,{cwd:c?process.cwd():e}).then(()=>{r(parseInt(u,10))}).catch(({stderr:d})=>{d&&d.includes('database "app" already exists')?r(parseInt(u,10)):console.log(d)})}}),f.stdout.on("data",async i=>{const y=i?.toString();console.log(y)})})}catch(o){console.warn(o),process.exit(1)}};var U=C;export{U as default};
//# sourceMappingURL=index.js.map
