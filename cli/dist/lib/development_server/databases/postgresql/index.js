import l from"child_process";import h from"fs";import x from"util";import k from"os";import{fileURLToPath as j}from"url";import{dirname as b}from"path";import f from"../../../get_platform_safe_path.js";import y from"../../../get_process_id_from_port.js";import w from"../../../path_exists.js";const q=j(import.meta.url),I=b(q),s=x.promisify(l.exec),{rename:L,mkdir:D}=h.promises,P=async()=>{if(process.platform!=="linux")return{};const{stdout:t}=await s("id -u postgres"),{stdout:o}=await s("id -g postgres");return{uid:parseInt(t),gid:parseInt(o)}},R=async t=>{if(process.platform==="linux")try{await s(`sudo chown -R postgres:postgres ${t}`),await s(`sudo chmod -R 755 ${t}`)}catch(o){throw console.error("Error setting PostgreSQL permissions:",o),o}},S=async(t=2610)=>{const o=await w(".joystick/data/postgresql");let e=await w(`.joystick/data/postgresql_${t}`);if(o&&!e&&(await L(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),e=!0),e||(await D(`.joystick/data/postgresql_${t}`,{recursive:!0}),e=!0),process.platform==="linux")try{await s(`sudo chown postgres:postgres .joystick/data/postgresql_${t}`),await s(`sudo chmod 700 .joystick/data/postgresql_${t}`)}catch(r){throw console.error("Error setting permissions for data directory:",r),r}return e},E=()=>process.platform==="win32"?"createdb.exe":"createdb",K=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",v=async(t=2610)=>{try{const o=K(),e=E(),r=`${k.homedir()}/.joystick/databases/postgresql/bin`,a=`${r}/bin/${o}`,_=`${r}/bin/${e}`;await R(r),await S(t)||(process.platform==="linux"?await s(`sudo -u postgres ${a} init -D .joystick/data/postgresql_${t} --options=--no-locale`):await s(`${a} init -D .joystick/data/postgresql_${t} --options=--no-locale`));const i=t,n=parseInt(await y(i),10);n&&(process.platform==="linux"?await s(`sudo -u postgres ${a} kill KILL ${n}`):await s(`${a} kill KILL ${n}`));const{uid:T,gid:U}=await P(),m=process.platform!=="linux"?l.spawn(a,["-o",`"-p ${i}"`,"-D",f(`.joystick/data/postgresql_${t}`),"start"]):l.spawn(`${I}/start_postgresql_on_linux.sh`,[a,i,f(`.joystick/data/postgresql_${t}`)],{shell:!0});return new Promise(g=>{m.stderr.on("data",async p=>{const c=p?.toString();console.log(c),c?.includes("another server might be running")||console.warn(c)}),m.stdout.on("data",async p=>{const c=p?.toString();if(console.log(c),c.includes("database system is ready to accept connections")){const u=(await y(i))?.replace(`
`,""),$=process.platform==="linux"?`sudo -u postgres ${_} -h 127.0.0.1 -p ${i} app`:`${_} -h 127.0.0.1 -p ${i} app`;s($).then(()=>{g(parseInt(u,10))}).catch(({stderr:d})=>{d&&d.includes('database "app" already exists')?g(parseInt(u,10)):console.log(d)})}})})}catch(o){console.warn(o),process.exit(1)}};var N=v;export{N as default};
