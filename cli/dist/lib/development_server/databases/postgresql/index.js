import l from"child_process";import h from"fs";import x from"util";import k from"os";import f from"../../../get_platform_safe_path.js";import y from"../../../get_process_id_from_port.js";import w from"../../../path_exists.js";const s=x.promisify(l.exec),{rename:j,mkdir:b}=h.promises,q=async()=>{if(process.platform!=="linux")return{};const{stdout:t}=await s("id -u postgres"),{stdout:o}=await s("id -g postgres");return{uid:parseInt(t),gid:parseInt(o)}},I=async t=>{if(process.platform==="linux")try{await s(`sudo chown -R postgres:postgres ${t}`),await s(`sudo chmod -R 755 ${t}`)}catch(o){throw console.error("Error setting PostgreSQL permissions:",o),o}},L=async(t=2610)=>{const o=await w(".joystick/data/postgresql");let e=await w(`.joystick/data/postgresql_${t}`);if(o&&!e&&(await j(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),e=!0),e||(await b(`.joystick/data/postgresql_${t}`,{recursive:!0}),e=!0),process.platform==="linux")try{await s(`sudo chown postgres:postgres .joystick/data/postgresql_${t}`),await s(`sudo chmod 700 .joystick/data/postgresql_${t}`)}catch(a){throw console.error("Error setting permissions for data directory:",a),a}return e},D=()=>process.platform==="win32"?"createdb.exe":"createdb",S=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",E=async(t=2610)=>{try{const o=S(),e=D(),a=`${k.homedir()}/.joystick/databases/postgresql/bin`,c=`${a}/bin/${o}`,_=`${a}/bin/${e}`;await I(a),await L(t)||(process.platform==="linux"?await s(`sudo -u postgres ${c} init -D .joystick/data/postgresql_${t} --options=--no-locale`):await s(`${c} init -D .joystick/data/postgresql_${t} --options=--no-locale`));const r=t,n=parseInt(await y(r),10);n&&(process.platform==="linux"?await s(`sudo -u postgres ${c} kill KILL ${n}`):await s(`${c} kill KILL ${n}`));const{uid:P,gid:R}=await q(),g=process.platform!=="linux"?l.spawn(c,["-o",`"-p ${r}"`,"-D",f(`.joystick/data/postgresql_${t}`),"start"]):l.spawn("./start_postgresql_on_linux.sh",[r,f(`.joystick/data/postgresql_${t}`)],{shell:!0});return new Promise(m=>{g.stderr.on("data",async p=>{const i=p?.toString();console.log(i),i?.includes("another server might be running")||console.warn(i)}),g.stdout.on("data",async p=>{const i=p?.toString();if(console.log(i),i.includes("database system is ready to accept connections")){const u=(await y(r))?.replace(`
`,""),$=process.platform==="linux"?`sudo -u postgres ${_} -h 127.0.0.1 -p ${r} app`:`${_} -h 127.0.0.1 -p ${r} app`;s($).then(()=>{m(parseInt(u,10))}).catch(({stderr:d})=>{d&&d.includes('database "app" already exists')?m(parseInt(u,10)):console.log(d)})}})})}catch(o){console.warn(o),process.exit(1)}};var G=E;export{G as default};
