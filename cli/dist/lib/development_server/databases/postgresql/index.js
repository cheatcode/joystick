import g from"child_process";import b from"fs";import q from"util";import L from"os";import u from"path";import f from"../../../get_platform_safe_path.js";import k from"../../../get_process_id_from_port.js";import h from"../../../path_exists.js";import I from"../../../get_architecture.js";const a=q.promisify(g.exec),{rename:S}=b.promises,D=async(t=2610)=>{const s=await h(".joystick/data/postgresql");let c=await h(`.joystick/data/postgresql_${t}`);return s&&!c&&(await S(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),c=!0),c},P=()=>"createdb",Q=()=>"postgres",K=()=>"initdb",E=()=>"pg_ctl",R=async(t=2610)=>{try{const s=t,c=I(),j=u.join(L.homedir(),".joystick","databases","postgresql",c),e=u.join(j,"bin"),n=E(),m=K(),v=Q(),l=P(),r=process.platform==="linux"&&process.getuid&&process.getuid()===0;await D(t)||(r?(await a(`mkdir -p ${process.cwd()}/.joystick/data/postgresql_${t}`),await a(`chown -R postgres:postgres ${process.cwd()}/.joystick/data/postgresql_${t}`),await a(`sudo -u postgres ${e}/${m} -D ${process.cwd()}/.joystick/data/postgresql_${t}`)):await a(`./${m} -D ${process.cwd()}/.joystick/data/postgresql_${t}`,{cwd:e}));const p=parseInt(await k(s),10);p&&(r?await a(`sudo -u postgres ${e}/${n} kill KILL ${p}`):await a(`./${n} kill KILL ${p}`,{cwd:e}));const d=r?g.spawn("sudo",["-u","postgres",`${e}/${n}`,"-o",`"-p ${s}"`,"-D",f(`${process.cwd()}/.joystick/data/postgresql_${t}`),"start"]):g.spawn(`./${n}`,["-o",`"-p ${s}"`,"-D",f(`${process.cwd()}/.joystick/data/postgresql_${t}`),"start"],{cwd:e});return new Promise(($,w)=>{d.stderr.on("data",async o=>{const i=o?.toString();i?.includes("another server might be running")||console.warn(i)}),d.stdout.on("data",async o=>{if((o?.toString()).includes("database system is ready to accept connections")){const y=(await k(s))?.replace(`
`,""),x=r?`sudo -u postgres ${e}/${l} -h 127.0.0.1 -p ${s} app`:`./${l} -h 127.0.0.1 -p ${s} app`;a(x,{cwd:r?process.cwd():e}).then(()=>{$(parseInt(y,10))}).catch(({stderr:_})=>{_&&_.includes('database "app" already exists')?$(parseInt(y,10)):console.log(_)})}}),d.on("error",o=>{console.log("PostgreSQL process error:",o),w(o)}),d.on("exit",(o,i)=>{console.log(`PostgreSQL process exited with code ${o} and signal ${i}`),o!==0&&w(new Error(`PostgreSQL process exited with code ${o}`))})})}catch(s){console.warn(s),process.exit(1)}};var O=R;export{O as default};
//# sourceMappingURL=index.js.map
