import g from"child_process";import x from"fs";import k from"util";import j from"os";import b from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import y from"../../../path_exists.js";const s=k.promisify(g.exec),{rename:q,mkdir:I}=x.promises,L=async()=>{if(process.platform!=="linux")return{};const{stdout:t}=await s("id -u postgres"),{stdout:o}=await s("id -g postgres");return{uid:parseInt(t),gid:parseInt(o)}},D=async t=>{if(process.platform==="linux")try{await s(`sudo chown -R postgres:postgres ${t}`),await s(`sudo chmod -R 755 ${t}`)}catch(o){throw console.error("Error setting PostgreSQL permissions:",o),o}},S=async(t=2610)=>{const o=await y(".joystick/data/postgresql");let e=await y(`.joystick/data/postgresql_${t}`);if(o&&!e&&(await q(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),e=!0),e||(await I(`.joystick/data/postgresql_${t}`,{recursive:!0}),e=!0),process.platform==="linux")try{await s(`sudo chown postgres:postgres .joystick/data/postgresql_${t}`),await s(`sudo chmod 700 .joystick/data/postgresql_${t}`)}catch(r){throw console.error("Error setting permissions for data directory:",r),r}return e},E=()=>process.platform==="win32"?"createdb.exe":"createdb",K=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",P=async(t=2610)=>{try{const o=K(),e=E(),r=`${j.homedir()}/.joystick/databases/postgresql/bin`,a=`${r}/bin/${o}`,l=`${r}/bin/${e}`;await D(r),await S(t)||(process.platform==="linux"?await s(`sudo -u postgres ${a} init -D .joystick/data/postgresql_${t} --options=--no-locale`):await s(`${a} init -D .joystick/data/postgresql_${t} --options=--no-locale`));const i=t,c=parseInt(await f(i),10);c&&(process.platform==="linux"?await s(`sudo -u postgres ${a} kill KILL ${c}`):await s(`${a} kill KILL ${c}`));const{uid:w,gid:$}=await L(),_=g.spawn(a,["-o",`"-p ${i}"`,"-D",b(`.joystick/data/postgresql_${t}`),"start"],process.platform==="linux"?{uid:w,gid:$}:{});return new Promise(m=>{_.stderr.on("data",async n=>{const p=n?.toString();p?.includes("another server might be running")||console.warn(p)}),_.stdout.on("data",async n=>{if((n?.toString()).includes("database system is ready to accept connections")){const u=(await f(i))?.replace(`
`,""),h=process.platform==="linux"?`sudo -u postgres ${l} -h 127.0.0.1 -p ${i} app`:`${l} -h 127.0.0.1 -p ${i} app`;s(h).then(()=>{m(parseInt(u,10))}).catch(({stderr:d})=>{d&&d.includes('database "app" already exists')?m(parseInt(u,10)):console.log(d)})}})})}catch(o){console.warn(o),process.exit(1)}};var G=P;export{G as default};
