import l from"child_process";import k from"fs";import h from"util";import j from"os";import u from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import $ from"../../../path_exists.js";const s=h.promisify(l.exec),{rename:x,mkdir:b}=k.promises,q=async(t=2610)=>{const i=await $(".joystick/data/postgresql");let o=await $(`.joystick/data/postgresql_${t}`);if(i&&!o&&(await x(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),o=!0),o||(await b(`.joystick/data/postgresql_${t}`,{recursive:!0}),o=!0),process.platform==="linux")try{await s(`sudo chown postgres:postgres .joystick/data/postgresql_${t}`),await s(`sudo chmod 700 .joystick/data/postgresql_${t}`)}catch(c){throw console.error("Error setting permissions for data directory:",c),c}return o},I=()=>process.platform==="win32"?"createdb.exe":"createdb",D=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",L=async(t=2610)=>{try{const i=D(),o=I(),c=`${j.homedir()}/.joystick/databases/postgresql/bin`,a=`${c}/bin/${i}`,_=`${c}/bin/${o}`;await q(t)||(process.platform==="linux"?(await s(`sudo -u postgres ${a} initdb -D .joystick/data/postgresql_${t} --options=--no-locale`),await s(`chown -R postgres:postgres .joystick/data/postgresql_${t}`),await s(`chown -R 755 .joystick/data/postgresql_${t}`)):await s(`${a} initdb -D .joystick/data/postgresql_${t} --options=--no-locale`));const e=t,n=parseInt(await f(e),10);n&&(process.platform==="linux"?await s(`sudo -u postgres ${a} kill KILL ${n}`):await s(`${a} kill KILL ${n}`));const m=process.platform!=="linux"?l.spawn(a,["-o",`"-p ${e}"`,"-D",u(`.joystick/data/postgresql_${t}`),"start"]):l.spawn(`sudo -u postgres ${a}`,["-o",`"-p ${e}"`,"-D",u(`.joystick/data/postgresql_${t}`),"start"]);return new Promise(g=>{m.stderr.on("data",async p=>{const r=p?.toString();console.log(r),r?.includes("another server might be running")||console.warn(r)}),m.stdout.on("data",async p=>{const r=p?.toString();if(console.log(r),r.includes("database system is ready to accept connections")){const y=(await f(e))?.replace(`
`,""),w=process.platform==="linux"?`sudo -u postgres ${_} -h 127.0.0.1 -p ${e} app`:`${_} -h 127.0.0.1 -p ${e} app`;s(w).then(()=>{g(parseInt(y,10))}).catch(({stderr:d})=>{d&&d.includes('database "app" already exists')?g(parseInt(y,10)):console.log(d)})}})})}catch(i){console.warn(i),process.exit(1)}};var B=L;export{B as default};
