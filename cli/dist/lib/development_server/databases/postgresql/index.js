import g from"child_process";import h from"fs";import $ from"util";import l from"os";import k from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import u from"../../../path_exists.js";const e=$.promisify(g.exec),{rename:x,mkdir:b}=h.promises,j=async(t=2610)=>{const a=await u(".joystick/data/postgresql");let s=await u(`.joystick/data/postgresql_${t}`);if(a&&!s&&(await x(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),s=!0),s||(await b(`.joystick/data/postgresql_${t}`,{recursive:!0}),s=!0),process.platform==="linux")try{await e(`sudo chown postgres:postgres .joystick/data/postgresql_${t}`),await e(`sudo chmod 700 .joystick/data/postgresql_${t}`)}catch(r){throw console.error("Error setting permissions for data directory:",r),r}return s},q=()=>process.platform==="win32"?"createdb.exe":"createdb",I=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",D=async(t=2610)=>{try{const a=I(),s=q(),r=`${l.homedir()}/.joystick/databases/postgresql/bin`,p=`${l.platform()==="linux"?"sudo -u postgres ":""}${r}/bin/${a}`,w=`${l.homedir()}/.joystick/databases/postgresql/bin/bin/${s}`;await j(t)||await e(`${p} init -D .joystick/data/postgresql_${t} --options=--no-locale`).catch(o=>{console.warn(o)});const c=t,m=parseInt(await f(c),10);m&&await e(`${p} kill KILL ${m}`);try{const o=g.spawn(`${p}`,["-o",`"-p ${c}"`,"-D",k(`.joystick/data/postgresql_${t}`),"start"].filter(i=>!!i));return new Promise(i=>{o.stderr.on("data",async _=>{const n=_?.toString();console.warn(n),n?.includes("another server might be running")||console.warn(n)}),o.stdout.on("data",async _=>{if((_?.toString()).includes("database system is ready to accept connections")){const y=(await f(c))?.replace(`
`,"");e(`${w} -h 127.0.0.1 -p ${c} app`).then(d=>{i(parseInt(y,10))}).catch(({stderr:d})=>{d&&d.includes('database "app" already exists')?i(parseInt(y,10)):console.log(d)})}})})}catch(o){console.warn(o)}}catch(a){console.warn(a),process.exit(1)}};var B=D;export{B as default};
