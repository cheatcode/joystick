import y from"child_process";import j from"fs";import b from"util";import q from"os";import I from"../../../get_platform_safe_path.js";import u from"../../../get_process_id_from_port.js";import $ from"../../../path_exists.js";const e=b.promisify(y.exec),{rename:L,mkdir:D}=j.promises,K=async(t=2610)=>{const o=await $(".joystick/data/postgresql");let s=await $(`.joystick/data/postgresql_${t}`);if(o&&!s&&(await L(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),s=!0),s||(await D(`.joystick/data/postgresql_${t}`,{recursive:!0}),s=!0),process.platform==="linux")try{await e(`sudo chown postgres:postgres .joystick/data/postgresql_${t}`),await e(`sudo chmod 700 .joystick/data/postgresql_${t}`)}catch(r){throw console.error("Error setting permissions for data directory:",r),r}return s},S=()=>process.platform==="win32"?"createdb.exe":"createdb",v=()=>process.platform==="win32"?"postgres.exe":"postgres",E=()=>process.platform==="win32"?"initdb.exe":"initdb",P=()=>process.platform==="win32"?"pgctl.exe":"pgctl",z=async(t=2610)=>{try{const o=t,s=`${q.homedir()}/.joystick/databases/postgresql/bin/bin`,r=P(),k=E(),w=v(),x=S(),p=`${s}/${r}`,d=`${s}/${k}`,_=`${s}/${w}`,l=`${s}/${x}`;await K(t)||(process.platform==="linux"?await e(`sudo -u postgres ${d} -D .joystick/data/postgresql_${t} --options=--no-locale`):await e(`${d} -D .joystick/data/postgresql_${t} --options=--no-locale`));const c=parseInt(await u(o),10);c&&(process.platform==="linux"?await e(`${p} kill KILL ${c}`):await e(`${p} kill KILL ${c}`));const m=y.spawn(process.platform==="linux"?`sudo -u postgres ${_}`:_,["-o",`"-p ${o}"`,"-D",I(`.joystick/data/postgresql_${t}`)]);return new Promise(g=>{m.stderr.on("data",async i=>{const a=i?.toString();console.log(a),a?.includes("another server might be running")||console.warn(a)}),m.stdout.on("data",async i=>{const a=i?.toString();if(console.log(a),a.includes("database system is ready to accept connections")){const f=(await u(o))?.replace(`
`,""),h=process.platform==="linux"?`sudo -u postgres ${l} -h 127.0.0.1 -p ${o} app`:`${l} -h 127.0.0.1 -p ${o} app`;e(h).then(()=>{g(parseInt(f,10))}).catch(({stderr:n})=>{n&&n.includes('database "app" already exists')?g(parseInt(f,10)):console.log(n)})}})})}catch(o){console.warn(o),process.exit(1)}};var N=z;export{N as default};
