import l from"child_process";import k from"fs";import w from"util";import x from"os";import f from"../../../get_platform_safe_path.js";import y from"../../../get_process_id_from_port.js";import u from"../../../path_exists.js";const c=w.promisify(l.exec),{rename:j,mkdir:h}=k.promises,q=async(t=2610)=>{const e=await u(".joystick/data/postgresql");let s=await u(`.joystick/data/postgresql_${t}`);return e&&!s&&(await j(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),s=!0),s||(await h(`.joystick/data/postgresql_${t}`,{recursive:!0}),s=!0),s},I=()=>process.platform==="win32"?"createdb.exe":"createdb",D=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",L=async(t=2610)=>{try{const e=D(),s=I(),d=`${x.homedir()}/.joystick/databases/postgresql/bin`,i=`${d}/bin/${e}`,$=`${d}/bin/${s}`;await q(t)||(process.platform==="linux"?await c(`initdb -D .joystick/data/postgresql_${t} --options=--no-locale`):await c(`${i} initdb -D .joystick/data/postgresql_${t} --options=--no-locale`));const o=t,r=parseInt(await y(o),10);r&&(process.platform==="linux"?await c(`pg_ctl kill KILL ${r}`):await c(`${i} kill KILL ${r}`));const _=process.platform!=="linux"?l.spawn(i,["-o",`"-p ${o}"`,"-D",f(`.joystick/data/postgresql_${t}`),"start"]):l.spawn("pg_ctl",["-o",`"-p ${o}"`,"-D",f(`.joystick/data/postgresql_${t}`),"start"]);return new Promise(m=>{_.stderr.on("data",async n=>{const a=n?.toString();console.log(a),a?.includes("another server might be running")||console.warn(a)}),_.stdout.on("data",async n=>{const a=n?.toString();if(console.log(a),a.includes("database system is ready to accept connections")){const g=(await y(o))?.replace(`
`,""),b=process.platform==="linux"?`createdb -h 127.0.0.1 -p ${o} app`:`${$} -h 127.0.0.1 -p ${o} app`;c(b).then(()=>{m(parseInt(g,10))}).catch(({stderr:p})=>{p&&p.includes('database "app" already exists')?m(parseInt(g,10)):console.log(p)})}})})}catch(e){console.warn(e),process.exit(1)}};var E=L;export{E as default};
