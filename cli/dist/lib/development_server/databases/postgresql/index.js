import n from"child_process";import x from"fs";import q from"util";import I from"os";import"path";import g from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import u from"../../../path_exists.js";const e=q.promisify(n.exec),{rename:D,mkdir:L,readdir:M}=x.promises,K=async(t=2610)=>{const o=await u(".joystick/data/postgresql");let s=await u(`.joystick/data/postgresql_${t}`);return o&&!s&&(await D(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),s=!0),s||(await L(`.joystick/data/postgresql_${t}`,{recursive:!0}),s=!0),process.platform==="linux"&&(await e("sudo chmod 755 /root"),await e(`sudo chmod 755 /root/${process.project_folder}`),await e(`sudo chmod 755 /root/${process.project_folder}/.joystick`),await e(`sudo chmod 700 /root/${process.project_folder}/.joystick/data/postgresql_${t}`),await e(`sudo chown -R postgres:postgres /root/${process.project_folder}/.joystick/data/postgresql_${t}`)),s},N=()=>process.platform==="win32"?"createdb.exe":"createdb",R=()=>process.platform==="win32"?"postgres.exe":"postgres",S=()=>process.platform==="win32"?"initdb.exe":"initdb",v=()=>process.platform==="win32"?"pgctl.exe":"pgctl",A=async(t=2610)=>{try{const o=t,s=`${I.homedir()}/.joystick/databases/postgresql/bin/bin`,y=v(),$=S(),w=R(),j=N(),p=`${s}/${y}`,k=`${s}/${$}`,h=`${s}/${w}`,d=`${s}/${j}`;await K(t)&&(process.platform==="linux"?await e(`sudo -u postgres ./initdb -D ${process.cwd()}/.joystick/data/postgresql_${t} --no-locale`,{cwd:s}):await e(`${k} -D .joystick/data/postgresql_${t} --options=--no-locale`));const a=parseInt(await f(o),10);a&&(process.platform==="linux"?await e(`${p} kill KILL ${a}`):await e(`${p} kill KILL ${a}`));const _=process.platform==="linux"?n.spawn("sudo",["-u","postgres","./postgres",`-p ${o}`,"-D",g(`${process.cwd()}/.joystick/data/postgresql_${t}`),"-c log_destination=stderr -c logging_collector=off -c log_min_messages=WARNING"],{cwd:s,shell:"/bin/bash"}):n.spawn(h,[`-p ${o}`,"-D",g(`.joystick/data/postgresql_${t}`)]);return new Promise(l=>{_.stderr.on("data",async r=>{const c=r?.toString();c?.includes("another server might be running")||console.warn({stderr:c})}),_.stdout.on("data",async r=>{if((r?.toString()).includes("database system is ready to accept connections")){const m=(await f(o))?.replace(`
`,""),b=process.platform==="linux"?`sudo -u postgres ${d} -h 127.0.0.1 -p ${o} app`:`${d} -h 127.0.0.1 -p ${o} app`;e(b).then(()=>{l(parseInt(m,10))}).catch(({stderr:i})=>{i&&i.includes('database "app" already exists')?l(parseInt(m,10)):console.log(i)})}})})}catch(o){console.warn(o),process.exit(1)}};var O=A;export{O as default};
