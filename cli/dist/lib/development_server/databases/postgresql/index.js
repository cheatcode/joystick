import w from"child_process";import q from"fs";import I from"util";import h from"os";import m from"path";import L from"../../../get_platform_safe_path.js";import j from"../../../get_process_id_from_port.js";import b from"../../../path_exists.js";import D from"../../../get_architecture.js";const s=I.promisify(w.exec),{rename:R}=q.promises,K=async(t=2610)=>{const c=await b(".joystick/data/postgresql");let a=await b(`.joystick/data/postgresql_${t}`);return c&&!a&&(await R(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),a=!0),a},S=()=>process.platform==="win32"?"createdb.exe":"createdb",P=()=>process.platform==="win32"?"postgres.exe":"postgres",z=()=>process.platform==="win32"?"initdb.exe":"initdb",A=()=>process.platform==="win32"?"pgctl.exe":"pgctl",B=()=>process.platform==="linux"&&process.getuid&&process.getuid()===0?"su postgres -c":"",C=async(t=2610)=>{try{const c=t,a=D(),d=m.join(h.homedir(),".joystick","databases","postgresql",a),o=m.join(d,"bin"),_=A(),l=z(),g=P(),$=S(),e=B();if(!await K(t))if(e){try{await s("id postgres")}catch{await s("useradd -r -s /bin/false postgres")}await s(`mkdir -p ${process.cwd()}/.joystick/data/postgresql_${t}`,{cwd:process.cwd()}),await s(`mkdir -p ${process.cwd()}/.joystick/data`,{cwd:process.cwd()}),await s(`chmod 755 ${process.cwd()}`,{cwd:process.cwd()}),await s(`chmod 755 ${process.cwd()}/.joystick`,{cwd:process.cwd()}),await s(`chmod 755 ${process.cwd()}/.joystick/data`,{cwd:process.cwd()}),await s(`chown -R postgres:postgres ${process.cwd()}/.joystick/data/postgresql_${t}`,{cwd:process.cwd()}),await s(`chmod 755 ${h.homedir()}`,{cwd:process.cwd()}),await s(`chmod -R 755 ${m.dirname(d)}`,{cwd:process.cwd()}),await s(`chown -R postgres:postgres ${d}`,{cwd:process.cwd()});const r=`${e} "cd ${o} && ./${l} -D ${process.cwd()}/.joystick/data/postgresql_${t} --no-locale"`;await s(r,{cwd:process.cwd()})}else await s(`./${l} -D ${process.cwd()}/.joystick/data/postgresql_${t} --no-locale`,{cwd:o});const p=parseInt(await j(c),10);if(p)if(e){const r=`${e} "cd ${o} && ./${_} kill KILL ${p}"`;await s(r,{cwd:process.cwd()})}else await s(`./${_} kill KILL ${p}`,{cwd:o});const y=[`-p ${c}`,"-D",L(`${process.cwd()}/.joystick/data/postgresql_${t}`)],f=e?w.spawn("su",["postgres","-c",`cd ${o} && ./${g} ${y.join(" ")}`]):w.spawn(`./${g}`,y,{cwd:o});return new Promise(r=>{f.stderr.on("data",async i=>{if((i?.toString()).includes("database system is ready to accept connections")){const k=(await j(c))?.replace(`
`,""),x=e?`${e} "cd ${o} && ./${$} -h 127.0.0.1 -p ${c} app"`:`./${$} -h 127.0.0.1 -p ${c} app`;s(x,{cwd:e?process.cwd():o}).then(()=>{r(parseInt(k,10))}).catch(({stderr:n})=>{n&&n.includes('database "app" already exists')?r(parseInt(k,10)):console.log(n)})}}),f.stdout.on("data",async i=>{const u=i?.toString();console.log(u)})})}catch(c){console.warn(c),process.exit(1)}};var U=C;export{U as default};
//# sourceMappingURL=index.js.map
