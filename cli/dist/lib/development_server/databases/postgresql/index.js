import l from"child_process";import k from"fs";import b from"util";import j from"os";import f from"../../../get_platform_safe_path.js";import y from"../../../get_process_id_from_port.js";import $ from"../../../path_exists.js";const s=b.promisify(l.exec),{rename:q,mkdir:I}=k.promises,L=async()=>{if(process.platform!=="linux")return{};const{stdout:t}=await s("id -u postgres"),{stdout:o}=await s("id -g postgres");return{uid:parseInt(t),gid:parseInt(o)}},A=async t=>{if(process.platform==="linux")try{await s(`sudo chown -R postgres:postgres ${t}`),await s(`sudo chmod -R 755 ${t}`)}catch(o){throw console.error("Error setting PostgreSQL permissions:",o),o}},D=async(t=2610)=>{const o=await $(".joystick/data/postgresql");let a=await $(`.joystick/data/postgresql_${t}`);if(o&&!a&&(await q(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),a=!0),a||(await I(`.joystick/data/postgresql_${t}`,{recursive:!0}),a=!0),process.platform==="linux")try{await s(`sudo chown postgres:postgres .joystick/data/postgresql_${t}`),await s(`sudo chmod 700 .joystick/data/postgresql_${t}`)}catch(e){throw console.error("Error setting permissions for data directory:",e),e}return a},P=()=>process.platform==="win32"?"createdb.exe":"createdb",R=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",H=async(t=2610)=>{try{const o=R(),a=P(),e=`${j.homedir()}/.joystick/databases/postgresql/bin`,r=`${e}/bin/${o}`,_=`${e}/bin/${a}`;await A(e),await D(t)||(process.platform==="linux"?await s(`sudo -u postgres ${r} init -D .joystick/data/postgresql_${t} --options=--no-locale`):await s(`${r} init -D .joystick/data/postgresql_${t} --options=--no-locale`));const i=t,c=parseInt(await y(i),10);c&&(process.platform==="linux"?await s(`sudo -u postgres ${r} kill KILL ${c}`):await s(`${r} kill KILL ${c}`));const{uid:w,gid:h}=await L(),u=process.platform!=="linux"?l.spawn(r,["-o",`"-p ${i}"`,"-D",f(`.joystick/data/postgresql_${t}`),"start"]):l.spawn("sudo",["-u","postgres","env",`PATH=${e}/bin:$PATH`,`LD_LIBRARY_PATH=${e}/lib:$LD_LIBRARY_PATH`,r,"-o",`"-p ${i}"`,"-D",f(`.joystick/data/postgresql_${t}`),"start"],{shell:"/bin/bash",uid:w,gid:h});return new Promise(g=>{u.stderr.on("data",async n=>{const p=n?.toString();p?.includes("another server might be running")||console.warn(p)}),u.stdout.on("data",async n=>{if((n?.toString()).includes("database system is ready to accept connections")){const m=(await y(i))?.replace(`
`,""),x=process.platform==="linux"?`sudo -u postgres ${_} -h 127.0.0.1 -p ${i} app`:`${_} -h 127.0.0.1 -p ${i} app`;s(x).then(()=>{g(parseInt(m,10))}).catch(({stderr:d})=>{d&&d.includes('database "app" already exists')?g(parseInt(m,10)):console.log(d)})}})})}catch(o){console.warn(o),process.exit(1)}};var z=H;export{z as default};
