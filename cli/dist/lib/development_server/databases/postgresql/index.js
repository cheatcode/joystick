import l from"child_process";import $ from"fs";import x from"util";import b from"os";import y from"path";import j from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import w from"../../../path_exists.js";import k from"../../../get_architecture.js";const d=x.promisify(l.exec),{rename:q}=$.promises,L=async(o=2610)=>{const s=await w(".joystick/data/postgresql");let e=await w(`.joystick/data/postgresql_${o}`);return s&&!e&&(await q(".joystick/data/postgresql",`.joystick/data/postgresql_${o}`),e=!0),e},S=()=>"createdb",I=()=>"postgres",P=()=>"initdb",Q=()=>"pg_ctl",D=async(o=2610)=>{try{const s=o,e=k(),u=y.join(b.homedir(),".joystick","databases","postgresql",e),r=y.join(u,"bin"),i=Q(),E=P(),K=I(),h=S();await L(o)||await d(`./${i} init -D ${process.cwd()}/.joystick/data/postgresql_${o}`,{cwd:r});const p=parseInt(await f(s),10);p&&await d(`./${i} kill KILL ${p}`,{cwd:r});const c=l.spawn(`./${i}`,["-o",`"-p ${s}"`,"-D",j(`${process.cwd()}/.joystick/data/postgresql_${o}`),"start"],{cwd:r});return new Promise((_,m)=>{c.stderr.on("data",async t=>{const a=t?.toString();a?.includes("another server might be running")||console.warn(a)}),c.stdout.on("data",async t=>{if((t?.toString()).includes("database system is ready to accept connections")){const g=(await f(s))?.replace(`
`,"");d(`./${h} -h 127.0.0.1 -p ${s} app`,{cwd:r}).then(()=>{_(parseInt(g,10))}).catch(({stderr:n})=>{n&&n.includes('database "app" already exists')?_(parseInt(g,10)):console.log(n)})}}),c.on("error",t=>{console.log("PostgreSQL process error:",t),m(t)}),c.on("exit",(t,a)=>{console.log(`PostgreSQL process exited with code ${t} and signal ${a}`),t!==0&&m(new Error(`PostgreSQL process exited with code ${t}`))})})}catch(s){console.warn(s),process.exit(1)}};var N=D;export{N as default};
//# sourceMappingURL=index.js.map
