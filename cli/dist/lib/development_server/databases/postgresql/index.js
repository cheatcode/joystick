import g from"child_process";import x from"fs";import w from"util";import p from"os";import k from"../../../get_platform_safe_path.js";import y from"../../../get_process_id_from_port.js";import u from"../../../path_exists.js";const _=w.promisify(g.exec),{rename:j}=x.promises,h=async(t=2610)=>{const s=await u(".joystick/data/postgresql");let o=await u(`.joystick/data/postgresql_${t}`);return s&&!o&&(await j(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),o=!0),o},q=()=>process.platform==="win32"?"createdb.exe":"createdb",I=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",D=async(t=2610)=>{try{const s=I(),o=q(),a=`${p.homedir()}/.joystick/databases/postgresql/bin`,$=await h(t),i=p.platform()==="linux"?`cd ${a}/bin && sudo -u joystick ./pg_ctl`:`${a}/bin/${s}`,b=p.platform()==="linux"?`cd ${a}/bin && sudo -u joystick ./createdb`:`${a}/bin/${o}`;$||await _(`${i} init -D .joystick/data/postgresql_${t} --options=--no-locale`);const e=t,l=parseInt(await y(e),10);l&&await _(`${i} kill KILL ${l}`);const m=g.spawn(`${i}`,["-o",`"-p ${e}"`,"-D",k(`.joystick/data/postgresql_${t}`),"start"].filter(c=>!!c));return new Promise(c=>{m.stderr.on("data",async n=>{const d=n?.toString();d?.includes("another server might be running")||console.warn(d)}),m.stdout.on("data",async n=>{if((n?.toString()).includes("database system is ready to accept connections")){const f=(await y(e))?.replace(`
`,"");_(`${b} -h 127.0.0.1 -p ${e} app`).then(r=>{c(parseInt(f,10))}).catch(({stderr:r})=>{r&&r.includes('database "app" already exists')?c(parseInt(f,10)):console.log(r)})}})})}catch(s){console.warn(s),process.exit(1)}};var B=D;export{B as default};
