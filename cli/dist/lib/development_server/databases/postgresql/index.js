import u from"child_process";import k from"fs";import x from"util";import h from"os";import y from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import $ from"../../../path_exists.js";const s=x.promisify(u.exec),{rename:b,mkdir:j}=k.promises,q=async(t=2610)=>{const i=await $(".joystick/data/postgresql");let o=await $(`.joystick/data/postgresql_${t}`);if(i&&!o&&(await b(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),o=!0),o||(await j(`.joystick/data/postgresql_${t}`,{recursive:!0}),o=!0),process.platform==="linux")try{await s(`sudo chown postgres:postgres .joystick/data/postgresql_${t}`),await s(`sudo chmod 700 .joystick/data/postgresql_${t}`)}catch(c){throw console.error("Error setting permissions for data directory:",c),c}return o},I=()=>process.platform==="win32"?"createdb.exe":"createdb",D=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",L=async(t=2610)=>{try{const i=D(),o=I(),c=`${h.homedir()}/.joystick/databases/postgresql/bin`,a=`${c}/bin/${i}`,l=`${c}/bin/${o}`;await q(t)||(process.platform==="linux"?await s(`sudo -u postgres ${a} initdb -D .joystick/data/postgresql_${t} --options=--no-locale`):await s(`${a} initdb -D .joystick/data/postgresql_${t} --options=--no-locale`));const e=t,n=parseInt(await f(e),10);n&&(process.platform==="linux"?await s(`sudo -u postgres ${a} kill KILL ${n}`):await s(`${a} kill KILL ${n}`));const _=process.platform!=="linux"?u.spawn(a,["-o",`"-p ${e}"`,"-D",y(`.joystick/data/postgresql_${t}`),"start"]):await s(`sudo -u postgres ${a} -o "-p ${e}" -D ${y(`.joystick/data/postgresql_${t}`)} start`);return new Promise(m=>{_.stderr.on("data",async p=>{const r=p?.toString();console.log(r),r?.includes("another server might be running")||console.warn(r)}),_.stdout.on("data",async p=>{const r=p?.toString();if(console.log(r),r.includes("database system is ready to accept connections")){const g=(await f(e))?.replace(`
`,""),w=process.platform==="linux"?`sudo -u postgres ${l} -h 127.0.0.1 -p ${e} app`:`${l} -h 127.0.0.1 -p ${e} app`;s(w).then(()=>{m(parseInt(g,10))}).catch(({stderr:d})=>{d&&d.includes('database "app" already exists')?m(parseInt(g,10)):console.log(d)})}})})}catch(i){console.warn(i),process.exit(1)}};var C=L;export{C as default};
