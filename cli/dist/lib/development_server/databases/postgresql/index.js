import n from"child_process";import b from"fs";import q from"util";import P from"os";import"path";import f from"../../../get_platform_safe_path.js";import u from"../../../get_process_id_from_port.js";import y from"../../../path_exists.js";const r=q.promisify(n.exec),{rename:I,mkdir:D,readdir:O}=b.promises,L=async(t=2610)=>{const o=await y(".joystick/data/postgresql");let s=await y(`.joystick/data/postgresql_${t}`);return o&&!s&&(await I(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),s=!0),s||(await D(`.joystick/data/postgresql_${t}`,{recursive:!0}),s=!0),process.platform==="linux"&&(await execPromise("sudo chmod 755 /root"),await execPromise(`sudo chmod 755 /root/${process.project_folder}`),await execPromise(`sudo chmod 755 /root/${process.project_folder}/.joystick`),await execPromise(`sudo chmod 700 /root/${process.project_folder}/.joystick/data/postgresql_${t}`),await execPromise(`sudo chown -R postgres:postgres /root/${process.project_folder}/.joystick/data/postgresql_${t}`)),s},K=()=>process.platform==="win32"?"createdb.exe":"createdb",S=()=>process.platform==="win32"?"postgres.exe":"postgres",v=()=>process.platform==="win32"?"initdb.exe":"initdb",R=()=>process.platform==="win32"?"pgctl.exe":"pgctl",z=async(t=2610)=>{try{const o=t,s=`${P.homedir()}/.joystick/databases/postgresql/bin/bin`,$=R(),j=v(),w=S(),x=K(),p=`${s}/${$}`,d=`${s}/${j}`,k=`${s}/${w}`,_=`${s}/${x}`;await L(t)||(process.platform==="linux"?await r(`sudo -u postgres ${d} -D .joystick/data/postgresql_${t} --options=--no-locale`):await r(`${d} -D .joystick/data/postgresql_${t} --options=--no-locale`));const a=parseInt(await u(o),10);a&&(process.platform==="linux"?await r(`${p} kill KILL ${a}`):await r(`${p} kill KILL ${a}`));const l=process.platform==="linux"?n.spawn(`cd ${s} && sudo -u postgres ./postgres`,[`-p ${o}`,"-D",f(`.joystick/data/postgresql_${t}`)]):n.spawn(k,[`-p ${o}`,"-D",f(`.joystick/data/postgresql_${t}`)]);return new Promise(m=>{l.stderr.on("data",async c=>{const e=c?.toString();console.log(e),e?.includes("another server might be running")||console.warn(e)}),l.stdout.on("data",async c=>{const e=c?.toString();if(console.log(e),e.includes("database system is ready to accept connections")){const g=(await u(o))?.replace(`
`,""),h=process.platform==="linux"?`sudo -u postgres ${_} -h 127.0.0.1 -p ${o} app`:`${_} -h 127.0.0.1 -p ${o} app`;r(h).then(()=>{m(parseInt(g,10))}).catch(({stderr:i})=>{i&&i.includes('database "app" already exists')?m(parseInt(g,10)):console.log(i)})}})})}catch(o){console.warn(o),process.exit(1)}};var Q=z;export{Q as default};
