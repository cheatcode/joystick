import i from"child_process";import x from"fs";import q from"util";import I from"os";import"path";import m from"../../../get_platform_safe_path.js";import g from"../../../get_process_id_from_port.js";import f from"../../../path_exists.js";const e=q.promisify(i.exec),{rename:D,mkdir:L,readdir:M}=x.promises,K=async(t=2610)=>{const o=await f(".joystick/data/postgresql");let s=await f(`.joystick/data/postgresql_${t}`);return o&&!s&&(await D(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),s=!0),s||(await L(`.joystick/data/postgresql_${t}`,{recursive:!0}),s=!0),process.platform==="linux"&&(await e("sudo chmod 755 /root"),await e(`sudo chmod 755 /root/${process.project_folder}`),await e(`sudo chmod 755 /root/${process.project_folder}/.joystick`),await e(`sudo chmod 700 /root/${process.project_folder}/.joystick/data/postgresql_${t}`),await e(`sudo chown -R postgres:postgres /root/${process.project_folder}/.joystick/data/postgresql_${t}`)),s},N=()=>process.platform==="win32"?"createdb.exe":"createdb",R=()=>process.platform==="win32"?"postgres.exe":"postgres",S=()=>process.platform==="win32"?"initdb.exe":"initdb",A=()=>process.platform==="win32"?"pgctl.exe":"pgctl",G=async(t=2610)=>{try{const o=t,s=`${I.homedir()}/.joystick/databases/postgresql/bin/bin`,u=A(),y=S(),$=R(),w=N(),n=`${s}/${u}`,j=`${s}/${y}`,k=`${s}/${$}`,p=`${s}/${w}`;await K(t)&&(process.platform==="linux"?await e(`sudo -u postgres ./initdb -D ${process.cwd()}/.joystick/data/postgresql_${t} --no-locale`,{cwd:s}):await e(`${j} -D .joystick/data/postgresql_${t} --no-locale`));const a=parseInt(await g(o),10);a&&(process.platform==="linux"?await e(`${n} kill KILL ${a}`):await e(`${n} kill KILL ${a}`));const d=process.platform==="linux"?i.spawn("sudo",["-u","postgres","./postgres",`-p ${o}`,"-D",m(`${process.cwd()}/.joystick/data/postgresql_${t}`),"-c log_destination=stderr -c logging_collector=off -c log_min_messages=WARNING"],{cwd:s,shell:"/bin/bash"}):i.spawn(k,[`-p ${o}`,"-D",m(`.joystick/data/postgresql_${t}`)]);return new Promise(_=>{d.stderr.on("data",async r=>{if((r?.toString()).includes("database system is ready to accept connections")){const l=(await g(o))?.replace(`
`,""),b=process.platform==="linux"?`sudo -u postgres ${p} -h 127.0.0.1 -p ${o} app`:`${p} -h 127.0.0.1 -p ${o} app`;e(b).then(()=>{_(parseInt(l,10))}).catch(({stderr:c})=>{c&&c.includes('database "app" already exists')?_(parseInt(l,10)):console.log(c)})}}),d.stdout.on("data",async r=>{const h=r?.toString()})})}catch(o){console.warn(o),process.exit(1)}};var O=G;export{O as default};
