import y from"child_process";import $ from"fs";import b from"util";import p from"os";import x from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import g from"../../../path_exists.js";const d=b.promisify(y.exec),{rename:k}=$.promises,w=async(t=2610)=>{const s=await g(".joystick/data/postgresql");let a=await g(`.joystick/data/postgresql_${t}`);return s&&!a&&(await k(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),a=!0),a},h=()=>process.platform==="win32"?"createdb.exe":"createdb",j=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",q=async(t=2610)=>{try{const s=j(),a=h(),c=`${p.platform()==="linux"?"sudo -u joystick ":""}${p.homedir()}/.joystick/databases/postgresql/bin/bin/${s}`,u=`${p.homedir()}/.joystick/databases/postgresql/bin/bin/${a}`;await w(t)||await d(`${c} init -D .joystick/data/postgresql_${t} --options=--no-locale`);const e=t,_=parseInt(await f(e),10);_&&await d(`${c} kill KILL ${_}`);const l=y.spawn(`${c}`,["-o",`"-p ${e}"`,"-D",x(`.joystick/data/postgresql_${t}`),"start"].filter(o=>!!o));return new Promise(o=>{l.stderr.on("data",async i=>{const n=i?.toString();n?.includes("another server might be running")||console.warn(n)}),l.stdout.on("data",async i=>{if((i?.toString()).includes("database system is ready to accept connections")){const m=(await f(e))?.replace(`
`,"");d(`${u} -h 127.0.0.1 -p ${e} app`).then(r=>{o(parseInt(m,10))}).catch(({stderr:r})=>{r&&r.includes('database "app" already exists')?o(parseInt(m,10)):console.log(r)})}})})}catch(s){console.warn(s),process.exit(1)}};var A=q;export{A as default};
