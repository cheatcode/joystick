import g from"child_process";import h from"fs";import b from"util";import $ from"os";import f from"path";import j from"../../../get_platform_safe_path.js";import y from"../../../get_process_id_from_port.js";import w from"../../../path_exists.js";import k from"../../../get_architecture.js";const p=b.promisify(g.exec),{rename:q}=h.promises,L=async(o=2610)=>{const s=await w(".joystick/data/postgresql");let e=await w(`.joystick/data/postgresql_${o}`);return s&&!e&&(await q(".joystick/data/postgresql",`.joystick/data/postgresql_${o}`),e=!0),e},S=()=>process.platform==="win32"?"createdb.exe":"createdb",I=()=>process.platform==="win32"?"postgres.exe":"postgres",P=()=>process.platform==="win32"?"initdb.exe":"initdb",Q=()=>process.platform==="win32"?"pgctl.exe":"pgctl",D=async(o=2610)=>{try{const s=o,e=k(),u=f.join($.homedir(),".joystick","databases","postgresql",e),a=f.join(u,"bin"),i=Q(),E=P(),K=I(),x=S();await L(o)||await p(`./${i} init -D ${process.cwd()}/.joystick/data/postgresql_${o}`,{cwd:a});const d=parseInt(await y(s),10);d&&await p(`./${i} kill KILL ${d}`,{cwd:a});const c=g.spawn(`./${i}`,["-o",`"-p ${s}"`,"-D",j(`${process.cwd()}/.joystick/data/postgresql_${o}`),"start"],{cwd:a});return new Promise((_,m)=>{c.stderr.on("data",async t=>{const r=t?.toString();r?.includes("another server might be running")||console.warn(r)}),c.stdout.on("data",async t=>{if((t?.toString()).includes("database system is ready to accept connections")){const l=(await y(s))?.replace(`
`,"");p(`./${x} -h 127.0.0.1 -p ${s} app`,{cwd:a}).then(()=>{_(parseInt(l,10))}).catch(({stderr:n})=>{n&&n.includes('database "app" already exists')?_(parseInt(l,10)):console.log(n)})}}),c.on("error",t=>{console.log("PostgreSQL process error:",t),m(t)}),c.on("exit",(t,r)=>{console.log(`PostgreSQL process exited with code ${t} and signal ${r}`),t!==0&&m(new Error(`PostgreSQL process exited with code ${t}`))})})}catch(s){console.warn(s),process.exit(1)}};var N=D;export{N as default};
//# sourceMappingURL=index.js.map
