import m from"child_process";import h from"fs";import q from"util";import v from"os";import I from"path";import D from"../../../get_platform_safe_path.js";import l from"../../../get_process_id_from_port.js";import g from"../../../path_exists.js";const c=q.promisify(m.exec),{rename:L}=h.promises,e=o=>{const s={...process.env};return process.platform==="darwin"&&(s.DYLD_LIBRARY_PATH=I.join(o,"lib")),s},A=async(o=2610)=>{const s=await g(".joystick/data/postgresql");let t=await g(`.joystick/data/postgresql_${o}`);return s&&!t&&(await L(".joystick/data/postgresql",`.joystick/data/postgresql_${o}`),t=!0),t},P=()=>process.platform==="win32"?"createdb.exe":"createdb",R=()=>process.platform==="win32"?"postgres.exe":"postgres",S=()=>process.platform==="win32"?"initdb.exe":"initdb",Y=()=>process.platform==="win32"?"pgctl.exe":"pgctl",B=async(o=2610)=>{try{const s=o,t=`${v.homedir()}/.joystick/databases/postgresql`,y=Y(),f=S(),b=R(),u=P(),$=`${t}/bin/${y}`,j=`${t}/bin/${f}`,k=`${t}/bin/${b}`,w=`${t}/bin/${u}`;await A(o)||await c(`${j} -D .joystick/data/postgresql_${o} --no-locale`,{env:e(t)});const n=parseInt(await l(s),10);n&&await c(`${$} kill KILL ${n}`,{env:e(t)});const i=m.spawn(k,[`-p ${s}`,"-D",D(`.joystick/data/postgresql_${o}`)],{env:e(t)});return new Promise(p=>{i.stderr.on("data",async a=>{if((a?.toString()).includes("database system is ready to accept connections")){const d=(await l(s))?.replace(`
`,""),x=`${w} -h 127.0.0.1 -p ${s} app`;c(x,{env:e(t)}).then(()=>{p(parseInt(d,10))}).catch(({stderr:r})=>{r&&r.includes('database "app" already exists')?p(parseInt(d,10)):console.log(r)})}}),i.stdout.on("data",async a=>{const _=a?.toString();console.log(_)})})}catch(s){console.warn(s),process.exit(1)}};var M=B;export{M as default};
//# sourceMappingURL=index.js.map
