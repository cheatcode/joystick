import i from"child_process";import x from"fs";import q from"util";import I from"os";import g from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import y from"../../../path_exists.js";const o=q.promisify(i.exec),{rename:D}=x.promises,L=async(e=2610)=>{const t=await y(".joystick/data/postgresql");let s=await y(`.joystick/data/postgresql_${e}`);return t&&!s&&(await D(".joystick/data/postgresql",`.joystick/data/postgresql_${e}`),s=!0),s},K=()=>process.platform==="win32"?"createdb.exe":"createdb",N=()=>process.platform==="win32"?"postgres.exe":"postgres",R=()=>process.platform==="win32"?"initdb.exe":"initdb",S=()=>process.platform==="win32"?"pgctl.exe":"pgctl",A=async(e=2610)=>{try{const t=e,s=`${I.homedir()}/.joystick/databases/postgresql/bin/bin`,$=S(),u=R(),w=N(),j=K(),n=`${s}/${$}`,k=`${s}/${u}`,b=`${s}/${w}`,p=`${s}/${j}`;await L(e)||(process.platform==="linux"?(await o(`sudo -u postgres ./initdb -D ${process.cwd()}/.joystick/data/postgresql_${e} --no-locale`,{cwd:s}),await o("sudo chmod 755 /root"),await o(`sudo chmod 755 /root/${process.project_folder}`),await o(`sudo chmod 755 /root/${process.project_folder}/.joystick`),await o(`sudo chmod 700 /root/${process.project_folder}/.joystick/data/postgresql_${t}`),await o(`sudo chown -R postgres:postgres /root/${process.project_folder}/.joystick/data/postgresql_${t}`)):await o(`${k} -D .joystick/data/postgresql_${e} --no-locale`));const a=parseInt(await f(t),10);a&&(process.platform==="linux"?await o(`${n} kill KILL ${a}`):await o(`${n} kill KILL ${a}`));const d=process.platform==="linux"?i.spawn("sudo",["-u","postgres","./postgres",`-p ${t}`,"-D",g(`${process.cwd()}/.joystick/data/postgresql_${e}`),"-c log_destination=stderr -c logging_collector=off -c log_min_messages=WARNING"],{cwd:s,shell:"/bin/bash"}):i.spawn(b,[`-p ${t}`,"-D",g(`.joystick/data/postgresql_${e}`)]);return new Promise(_=>{d.stderr.on("data",async c=>{if((c?.toString()).includes("database system is ready to accept connections")){const m=(await f(t))?.replace(`
`,""),h=process.platform==="linux"?`sudo -u postgres ${p} -h 127.0.0.1 -p ${t} app`:`${p} -h 127.0.0.1 -p ${t} app`;o(h).then(()=>{_(parseInt(m,10))}).catch(({stderr:r})=>{r&&r.includes('database "app" already exists')?_(parseInt(m,10)):console.log(r)})}}),d.stdout.on("data",async c=>{const l=c?.toString();console.log(l)})})}catch(t){console.warn(t),process.exit(1)}};var H=A;export{H as default};
