import g from"child_process";import x from"fs";import b from"util";import q from"os";import k from"path";import d from"../../../get_platform_safe_path.js";import h from"../../../get_process_id_from_port.js";import m from"../../../path_exists.js";import L from"../../../get_architecture.js";const r=b.promisify(g.exec),{rename:I}=x.promises,D=async(t=2610)=>{const s=await m(".joystick/data/postgresql");let e=await m(`.joystick/data/postgresql_${t}`);return s&&!e&&(await I(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),e=!0),e&&(await m(`.joystick/data/postgresql_${t}/PG_VERSION`)||(e=!1)),e},P=()=>"createdb",v=()=>"postgres",E=()=>"initdb",S=()=>"pg_ctl",U=async(t=2610)=>{try{const s=t,e=L(),$=k.join(q.homedir(),".joystick","databases","postgresql",e),o=k.join($,"bin"),p=S(),w=E(),K=v(),f=P(),c=process.platform==="linux"&&process.getuid&&process.getuid()===0;if(!await D(t)){const i=`${process.cwd()}/.joystick/data/postgresql_${t}`,a="--auth-local=trust --auth-host=trust -U postgres";c?(await r(`mkdir -p ${i}`),await r(`chown -R postgres:postgres ${process.cwd()}/.joystick/data`),await r(`sudo -u postgres ${o}/${w} -D ${i} ${a}`)):await r(`./${w} -D ${i} ${a}`,{cwd:o})}const _=parseInt(await h(s),10);_&&(c?await r(`sudo -u postgres ${o}/${p} kill KILL ${_}`):await r(`./${p} kill KILL ${_}`,{cwd:o}));const u=c?g.spawn("sudo",["-u","postgres",`${o}/${p}`,"-o",`"-p ${s}"`,"-D",d(`${process.cwd()}/.joystick/data/postgresql_${t}`),"-l",d(`${process.cwd()}/.joystick/data/postgresql_${t}/logfile`),"start","-w"]):g.spawn(`./${p}`,["-o",`"-p ${s}"`,"-D",d(`${process.cwd()}/.joystick/data/postgresql_${t}`),"-l",d(`${process.cwd()}/.joystick/data/postgresql_${t}/logfile`),"start","-w"],{cwd:o});return new Promise((i,a)=>{u.on("exit",async n=>{if(n===0){const y=(await h(s))?.replace(`
`,"");if(!y){a(new Error("PostgreSQL server failed to start"));return}const j=c?`sudo -u postgres ${o}/${f} -h 127.0.0.1 -p ${s} -U postgres app`:`./${f} -h 127.0.0.1 -p ${s} -U postgres app`;try{await r(j,{cwd:c?process.cwd():o})}catch({stderr:l}){(!l||!l.includes('database "app" already exists'))&&console.log(l)}i(parseInt(y,10))}else a(new Error(`PostgreSQL failed to start (exit code: ${n})`))}),u.on("error",n=>{a(n)})})}catch(s){console.warn(s),process.exit(1)}};var F=U;export{F as default};
//# sourceMappingURL=index.js.map
