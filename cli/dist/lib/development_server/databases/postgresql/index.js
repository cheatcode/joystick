import m from"child_process";import b from"fs";import $ from"util";import y from"os";import w from"../../../get_platform_safe_path.js";import g from"../../../get_process_id_from_port.js";import f from"../../../path_exists.js";const p=$.promisify(m.exec),{rename:x}=b.promises,h=async(t=2610)=>{const s=await f(".joystick/data/postgresql");let e=await f(`.joystick/data/postgresql_${t}`);return s&&!e&&(await x(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),e=!0),e},k=()=>process.platform==="win32"?"createdb.exe":"createdb",j=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",q=async(t=2610)=>{try{const s=j(),e=k(),c=`${y.homedir()}/.joystick/databases/postgresql/bin/bin/${s}`,u=`${y.homedir()}/.joystick/databases/postgresql/bin/bin/${e}`;await h(t)||await p(`${c} init -D .joystick/data/postgresql_${t} --options=--no-locale`);const a=t,d=parseInt(await g(a),10);d&&await p(`${c} kill KILL ${d}`);const _=m.spawn(`${c}`,["-o",`"-p ${a}"`,"-D",w(`.joystick/data/postgresql_${t}`),"start"].filter(o=>!!o));return new Promise(o=>{_.stderr.on("data",async i=>{const n=i?.toString();n?.includes("another server might be running")||console.warn(n)}),_.stdout.on("data",async i=>{if((i?.toString()).includes("database system is ready to accept connections")){const l=(await g(a))?.replace(`
`,"");p(`${u} -h 127.0.0.1 -p ${a} app`).then(r=>{o(parseInt(l,10))}).catch(({stderr:r})=>{r&&r.includes('database "app" already exists')?o(parseInt(l,10)):console.log(r)})}})})}catch(s){console.warn(s),process.exit(1)}};var A=q;export{A as default};
