import n from"child_process";import b from"fs";import x from"util";import q from"os";import"path";import I from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import g from"../../../path_exists.js";const e=x.promisify(n.exec),{rename:D,mkdir:L,readdir:N}=b.promises,v=async(s=2610)=>{const o=await g(".joystick/data/postgresql");let t=await g(`.joystick/data/postgresql_${s}`);return o&&!t&&(await D(".joystick/data/postgresql",`.joystick/data/postgresql_${s}`),t=!0),t||(await L(`.joystick/data/postgresql_${s}`,{recursive:!0}),t=!0),process.platform==="linux"&&(await e("sudo chmod 755 /root"),await e(`sudo chmod 755 /root/${process.project_folder}`),await e(`sudo chmod 755 /root/${process.project_folder}/.joystick`),await e(`sudo chmod 700 /root/${process.project_folder}/.joystick/data/postgresql_${s}`),await e(`sudo chown -R postgres:postgres /root/${process.project_folder}/.joystick/data/postgresql_${s}`)),t},A=()=>process.platform==="win32"?"createdb.exe":"createdb",K=()=>process.platform==="win32"?"postgres.exe":"postgres",P=()=>process.platform==="win32"?"initdb.exe":"initdb",S=()=>process.platform==="win32"?"pgctl.exe":"pgctl",G=async(s=2610)=>{try{const o=s,t=`${q.homedir()}/.joystick/databases/postgresql/bin/bin`,u=S(),y=P(),$=K(),w=A(),p=`${t}/${u}`,h=`${t}/${y}`,j=`${t}/${$}`,d=`${t}/${w}`;await v(s)&&(process.platform==="linux"?await e(`sudo -u postgres ./initdb -D ${process.cwd()}/.joystick/data/postgresql_${s} --no-locale`,{cwd:t}):await e(`${h} -D .joystick/data/postgresql_${s} --options=--no-locale`));const a=parseInt(await f(o),10);a&&(process.platform==="linux"?await e(`${p} kill KILL ${a}`):await e(`${p} kill KILL ${a}`));const _=process.platform==="linux"?n.spawn("sudo",["-u","postgres","bash","-c",`PGDATA="${pgdata_path}" ./postgres -p ${o} > /dev/null 2>&1`],{cwd:t,shell:"/bin/bash",stdio:["ignore","pipe","pipe"]}):n.spawn(j,[`-p ${o}`,"-D",I(`.joystick/data/postgresql_${s}`)]);return new Promise(l=>{_.stderr.on("data",async r=>{const c=r?.toString();c?.includes("another server might be running")||console.warn(c)}),_.stdout.on("data",async r=>{if((r?.toString()).includes("database system is ready to accept connections")){const m=(await f(o))?.replace(`
`,""),k=process.platform==="linux"?`sudo -u postgres ${d} -h 127.0.0.1 -p ${o} app`:`${d} -h 127.0.0.1 -p ${o} app`;e(k).then(()=>{l(parseInt(m,10))}).catch(({stderr:i})=>{i&&i.includes('database "app" already exists')?l(parseInt(m,10)):console.log(i)})}})})}catch(o){console.warn(o),process.exit(1)}};var O=G;export{O as default};
