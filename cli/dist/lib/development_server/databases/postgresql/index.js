import g from"child_process";import b from"fs";import q from"util";import L from"os";import h from"path";import k from"../../../get_platform_safe_path.js";import j from"../../../get_process_id_from_port.js";import l from"../../../path_exists.js";import I from"../../../get_architecture.js";const c=q.promisify(g.exec),{rename:S}=b.promises,P=async(t=2610)=>{const s=await l(".joystick/data/postgresql");let a=await l(`.joystick/data/postgresql_${t}`);return s&&!a&&(await S(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),a=!0),a&&(await l(`.joystick/data/postgresql_${t}/PG_VERSION`)||(a=!1)),a},D=()=>"createdb",Q=()=>"postgres",v=()=>"initdb",E=()=>"pg_ctl",K=async(t=2610)=>{try{const s=t,a=I(),m=h.join(L.homedir(),".joystick","databases","postgresql",a),e=h.join(m,"bin"),n=E(),u=v(),R=Q(),$=D(),r=process.platform==="linux"&&process.getuid&&process.getuid()===0;await P(t)||(r?(await c(`mkdir -p ${process.cwd()}/.joystick/data/postgresql_${t}`),await c(`chown -R postgres:postgres ${process.cwd()}/.joystick/data`),await c(`sudo -u postgres ${e}/${u} -D ${process.cwd()}/.joystick/data/postgresql_${t} --auth-local=trust --auth-host=trust`)):await c(`./${u} -D ${process.cwd()}/.joystick/data/postgresql_${t}`,{cwd:e}));const p=parseInt(await j(s),10);p&&(r?await c(`sudo -u postgres ${e}/${n} kill KILL ${p}`):await c(`./${n} kill KILL ${p}`,{cwd:e}));const d=r?g.spawn("sudo",["-u","postgres",`${e}/${n}`,"-o",`"-p ${s}"`,"-D",k(`${process.cwd()}/.joystick/data/postgresql_${t}`),"start"]):g.spawn(`./${n}`,["-o",`"-p ${s}"`,"-D",k(`${process.cwd()}/.joystick/data/postgresql_${t}`),"start"],{cwd:e});return new Promise((w,y)=>{d.stderr.on("data",async o=>{const i=o?.toString();i?.includes("another server might be running")||console.warn(i)}),d.stdout.on("data",async o=>{if((o?.toString()).includes("database system is ready to accept connections")){const f=(await j(s))?.replace(`
`,""),x=r?`sudo -u postgres ${e}/${$} -h 127.0.0.1 -p ${s} app`:`./${$} -h 127.0.0.1 -p ${s} app`;c(x,{cwd:r?process.cwd():e}).then(()=>{w(parseInt(f,10))}).catch(({stderr:_})=>{_&&_.includes('database "app" already exists')?w(parseInt(f,10)):console.log(_)})}}),d.on("error",o=>{console.log("PostgreSQL process error:",o),y(o)}),d.on("exit",(o,i)=>{console.log(`PostgreSQL process exited with code ${o} and signal ${i}`),o!==0&&y(new Error(`PostgreSQL process exited with code ${o}`))})})}catch(s){console.warn(s),process.exit(1)}};var J=K;export{J as default};
//# sourceMappingURL=index.js.map
