import g from"child_process";import k from"fs";import h from"util";import j from"os";import b from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import y from"../../../path_exists.js";const s=h.promisify(g.exec),{rename:q,mkdir:I}=k.promises,L=async()=>{if(process.platform!=="linux")return{};const{stdout:t}=await s("id -u postgres"),{stdout:o}=await s("id -g postgres");return{uid:parseInt(t),gid:parseInt(o)}},D=async(t=2610)=>{const o=await y(".joystick/data/postgresql");let a=await y(`.joystick/data/postgresql_${t}`);if(o&&!a&&(await q(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),a=!0),a||(await I(`.joystick/data/postgresql_${t}`,{recursive:!0}),a=!0),process.platform==="linux")try{await s(`sudo chown postgres:postgres .joystick/data/postgresql_${t}`),await s(`sudo chmod 700 .joystick/data/postgresql_${t}`)}catch(e){throw console.error("Error setting permissions for data directory:",e),e}return a},K=()=>process.platform==="win32"?"createdb.exe":"createdb",S=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",v=async(t=2610)=>{try{const o=S(),a=K(),e=`${j.homedir()}/.joystick/databases/postgresql/bin`,r=`${e}/bin/${o}`,l=`${e}/bin/${a}`;await D(t)||(process.platform==="linux"?await s(`sudo -u postgres ${r} init -D .joystick/data/postgresql_${t} --options=--no-locale`):await s(`${r} init -D .joystick/data/postgresql_${t} --options=--no-locale`));const i=t,c=parseInt(await f(i),10);c&&(process.platform==="linux"?await s(`sudo -u postgres ${r} kill KILL ${c}`):await s(`${r} kill KILL ${c}`));const{uid:w,gid:$}=await L(),_=g.spawn(r,["-o",`"-p ${i}"`,"-D",b(`.joystick/data/postgresql_${t}`),"start"],process.platform==="linux"?{uid:w,gid:$}:{});return new Promise(m=>{_.stderr.on("data",async n=>{const p=n?.toString();p?.includes("another server might be running")||console.warn(p)}),_.stdout.on("data",async n=>{if((n?.toString()).includes("database system is ready to accept connections")){const u=(await f(i))?.replace(`
`,""),x=process.platform==="linux"?`sudo -u postgres ${l} -h 127.0.0.1 -p ${i} app`:`${l} -h 127.0.0.1 -p ${i} app`;s(x).then(()=>{m(parseInt(u,10))}).catch(({stderr:d})=>{d&&d.includes('database "app" already exists')?m(parseInt(u,10)):console.log(d)})}})})}catch(o){console.warn(o),process.exit(1)}};var H=v;export{H as default};
