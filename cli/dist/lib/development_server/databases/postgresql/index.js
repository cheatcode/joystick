import y from"child_process";import b from"fs";import k from"util";import p from"os";import x from"../../../get_platform_safe_path.js";import g from"../../../get_process_id_from_port.js";import f from"../../../path_exists.js";const d=k.promisify(y.exec),{rename:h}=b.promises,j=async(t=2610)=>{const s=await f(".joystick/data/postgresql");let o=await f(`.joystick/data/postgresql_${t}`);return s&&!o&&(await h(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),o=!0),o},w=()=>process.platform==="win32"?"createdb.exe":"createdb",q=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",I=async(t=2610)=>{try{const s=q(),o=w(),u=`${p.homedir()}/.joystick/databases/postgresql/bin`,c=`${p.platform()==="linux"?"sudo -u joystick ":""}${u}/bin/${s}`,$=`${p.homedir()}/.joystick/databases/postgresql/bin/bin/${o}`;await j(t)||await d(`${c} init -D .joystick/data/postgresql_${t} --options=--no-locale`);const a=t,_=parseInt(await g(a),10);_&&await d(`${c} kill KILL ${_}`);const l=y.spawn(`${c}`,["-o",`"-p ${a}"`,"-D",x(`.joystick/data/postgresql_${t}`),"start"].filter(e=>!!e));return new Promise(e=>{l.stderr.on("data",async i=>{const n=i?.toString();n?.includes("another server might be running")||console.warn(n)}),l.stdout.on("data",async i=>{if((i?.toString()).includes("database system is ready to accept connections")){const m=(await g(a))?.replace(`
`,"");d(`${$} -h 127.0.0.1 -p ${a} app`).then(r=>{e(parseInt(m,10))}).catch(({stderr:r})=>{r&&r.includes('database "app" already exists')?e(parseInt(m,10)):console.log(r)})}})})}catch(s){console.warn(s),process.exit(1)}};var B=I;export{B as default};
