import g from"child_process";import b from"fs";import k from"util";import p from"os";import x from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import u from"../../../path_exists.js";const d=k.promisify(g.exec),{rename:h}=b.promises,j=async(t=2610)=>{const s=await u(".joystick/data/postgresql");let o=await u(`.joystick/data/postgresql_${t}`);return s&&!o&&(await h(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),o=!0),o},w=()=>process.platform==="win32"?"createdb.exe":"createdb",q=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",I=async(t=2610)=>{try{const s=q(),o=w(),_=`${p.homedir()}/.joystick/databases/postgresql/bin`,i=`${p.platform()==="linux"?`sudo -u joystick /usr/bin/env PATH=${_}:$PATH `:""}${_}/bin/${s}`,$=`${p.homedir()}/.joystick/databases/postgresql/bin/bin/${o}`;await j(t)||await d(`${i} init -D .joystick/data/postgresql_${t} --options=--no-locale`);const e=t,l=parseInt(await f(e),10);l&&await d(`${i} kill KILL ${l}`);const m=g.spawn(`${i}`,["-o",`"-p ${e}"`,"-D",x(`.joystick/data/postgresql_${t}`),"start"].filter(a=>!!a));return new Promise(a=>{m.stderr.on("data",async c=>{const n=c?.toString();n?.includes("another server might be running")||console.warn(n)}),m.stdout.on("data",async c=>{if((c?.toString()).includes("database system is ready to accept connections")){const y=(await f(e))?.replace(`
`,"");d(`${$} -h 127.0.0.1 -p ${e} app`).then(r=>{a(parseInt(y,10))}).catch(({stderr:r})=>{r&&r.includes('database "app" already exists')?a(parseInt(y,10)):console.log(r)})}})})}catch(s){console.warn(s),process.exit(1)}};var K=I;export{K as default};
