import g from"child_process";import w from"fs";import h from"util";import _ from"os";import k from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import u from"../../../path_exists.js";const a=h.promisify(g.exec),{rename:b,mkdir:j}=w.promises,x=async(t=2610)=>{const o=await u(".joystick/data/postgresql");let s=await u(`.joystick/data/postgresql_${t}`);if(o&&!s&&(await b(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),s=!0),s||(await j(`.joystick/data/postgresql_${t}`,{recursive:!0}),s=!0),process.platform==="linux")try{await a(`sudo chown postgres:postgres .joystick/data/postgresql_${t}`),await a(`sudo chmod 700 .joystick/data/postgresql_${t}`)}catch(e){throw console.error("Error setting permissions for data directory:",e),e}return s},q=()=>process.platform==="win32"?"createdb.exe":"createdb",I=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",D=async(t=2610)=>{try{const o=I(),s=q(),e=`${_.homedir()}/.joystick/databases/postgresql/bin`,n=`${_.platform()==="linux"?"sudo -u postgres ":""}${e}/bin/${o}`,$=`${_.homedir()}/.joystick/databases/postgresql/bin/bin/${s}`;await x(t)||await a(`${n} init -D .joystick/data/postgresql_${t} --options=--no-locale`);const r=t,l=parseInt(await f(r),10);l&&await a(`${n} kill KILL ${l}`);const m=g.spawn(`${n}`,["-o",`"-p ${r}"`,"-D",k(`.joystick/data/postgresql_${t}`),"start"].filter(i=>!!i));return new Promise(i=>{m.stderr.on("data",async d=>{const p=d?.toString();p?.includes("another server might be running")||console.warn(p)}),m.stdout.on("data",async d=>{if((d?.toString()).includes("database system is ready to accept connections")){const y=(await f(r))?.replace(`
`,"");a(`${$} -h 127.0.0.1 -p ${r} app`).then(c=>{i(parseInt(y,10))}).catch(({stderr:c})=>{c&&c.includes('database "app" already exists')?i(parseInt(y,10)):console.log(c)})}})})}catch(o){console.warn(o),process.exit(1)}};var B=D;export{B as default};
