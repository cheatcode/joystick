import d from"child_process";import w from"fs";import h from"util";import q from"os";import I from"../../../get_platform_safe_path.js";import m from"../../../get_process_id_from_port.js";import l from"../../../path_exists.js";const c=h.promisify(d.exec),{rename:D}=w.promises,L=async(o=2610)=>{const t=await l(".joystick/data/postgresql");let s=await l(`.joystick/data/postgresql_${o}`);return t&&!s&&(await D(".joystick/data/postgresql",`.joystick/data/postgresql_${o}`),s=!0),s},S=()=>process.platform==="win32"?"createdb.exe":"createdb",K=()=>process.platform==="win32"?"postgres.exe":"postgres",P=()=>process.platform==="win32"?"initdb.exe":"initdb",z=()=>process.platform==="win32"?"pgctl.exe":"pgctl",A=async(o=2610)=>{try{const t=o,s=`${q.homedir()}/.joystick/databases/postgresql`,g=z(),y=P(),f=K(),$=S(),u=`${s}/${g}`,k=`${s}/${y}`,b=`${s}/${f}`,j=`${s}/${$}`;await L(o)||await c(`${k} -D .joystick/data/postgresql_${o} --no-locale`);const r=parseInt(await m(t),10);r&&await c(`${u} kill KILL ${r}`);const i=d.spawn(b,[`-p ${t}`,"-D",I(`.joystick/data/postgresql_${o}`)]);return new Promise(n=>{i.stderr.on("data",async e=>{if((e?.toString()).includes("database system is ready to accept connections")){const _=(await m(t))?.replace(`
`,""),x=`${j} -h 127.0.0.1 -p ${t} app`;c(x).then(()=>{n(parseInt(_,10))}).catch(({stderr:a})=>{a&&a.includes('database "app" already exists')?n(parseInt(_,10)):console.log(a)})}}),i.stdout.on("data",async e=>{const p=e?.toString();console.log(p)})})}catch(t){console.warn(t),process.exit(1)}};var N=A;export{N as default};
//# sourceMappingURL=index.js.map
