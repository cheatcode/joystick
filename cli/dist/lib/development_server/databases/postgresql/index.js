import n from"child_process";import x from"fs";import j from"util";import h from"os";import f from"../../../get_platform_safe_path.js";import y from"../../../get_process_id_from_port.js";import w from"../../../path_exists.js";const a=j.promisify(n.exec),{rename:b,mkdir:q}=x.promises,I=async(t=2610)=>{const r=await w(".joystick/data/postgresql");let s=await w(`.joystick/data/postgresql_${t}`);if(r&&!s&&(await b(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),s=!0),s||(await q(`.joystick/data/postgresql_${t}`,{recursive:!0}),s=!0),process.platform==="linux")try{await a(`sudo chown postgres:postgres .joystick/data/postgresql_${t}`),await a(`sudo chmod 700 .joystick/data/postgresql_${t}`)}catch(i){throw console.error("Error setting permissions for data directory:",i),i}return s},D=()=>process.platform==="win32"?"createdb.exe":"createdb",L=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",S=async(t=2610)=>{try{const r=L(),s=D(),i=`${h.homedir()}/.joystick/databases/postgresql/bin`,o=`${i}/bin/${r}`,m=`${i}/bin/${s}`;await I(t)||(process.platform==="linux"?await a(`sudo -u postgres ${o} init -D .joystick/data/postgresql_${t} --options=--no-locale`):await a(`${o} init -D .joystick/data/postgresql_${t} --options=--no-locale`));const e=t,p=parseInt(await y(e),10);p&&(process.platform==="linux"?await a(`sudo -u postgres ${o} kill KILL ${p}`):await a(`${o} kill KILL ${p}`));let c;return process.platform==="linux"?c=n.spawn("sudo",["-u","postgres",o,"-o",`-p ${e}`,"-D",f(`.joystick/data/postgresql_${t}`),"start"]):c=n.spawn(o,["-o",`"-p ${e}"`,"-D",f(`.joystick/data/postgresql_${t}`),"start"]),new Promise(g=>{c.stderr.on("data",async d=>{const l=d?.toString();l?.includes("another server might be running")||console.warn(l)}),c.stdout.on("data",async d=>{if((d?.toString()).includes("database system is ready to accept connections")){const u=(await y(e))?.replace(`
`,""),$=process.platform==="linux"?["sudo",["-u","postgres",m,"-h","127.0.0.1","-p",e.toString(),"app"]]:[m,["-h","127.0.0.1","-p",e.toString(),"app"]];n.execFile(...$,(k,v,_)=>{k?_&&_.includes('database "app" already exists')?g(parseInt(u,10)):console.log(_):g(parseInt(u,10))})}})})}catch(r){console.warn(r),process.exit(1)}};var G=S;export{G as default};
