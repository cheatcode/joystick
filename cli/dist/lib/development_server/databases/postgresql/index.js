import $ from"child_process";import L from"fs";import S from"util";import j from"os";import y from"path";import P from"../../../get_platform_safe_path.js";import b from"../../../get_process_id_from_port.js";import x from"../../../path_exists.js";import Q from"../../../get_architecture.js";const s=S.promisify($.exec),{rename:D}=L.promises,I=async(c=2610)=>{const r=await x(".joystick/data/postgresql");let n=await x(`.joystick/data/postgresql_${c}`);return r&&!n&&(await D(".joystick/data/postgresql",`.joystick/data/postgresql_${c}`),n=!0),n},v=()=>process.platform==="win32"?"createdb.exe":"createdb",B=()=>process.platform==="win32"?"postgres.exe":"postgres",R=()=>process.platform==="win32"?"initdb.exe":"initdb",K=()=>process.platform==="win32"?"pgctl.exe":"pgctl",E=()=>process.platform==="linux"&&process.getuid&&process.getuid()===0?"su postgres -c":"",z=async(c=2610)=>{try{const r=c,n=Q(),l=y.join(j.homedir(),".joystick","databases","postgresql",n),a=y.join(l,"bin"),u=K(),f=R(),g=B(),h=v(),o=E();if(!await I(c))if(o){try{await s("id postgres")}catch{await s("useradd -r -s /bin/bash postgres")}await s(`mkdir -p ${process.cwd()}/.joystick/data/postgresql_${c}`,{cwd:process.cwd()}),await s(`mkdir -p ${process.cwd()}/.joystick/data`,{cwd:process.cwd()}),await s(`chmod 755 ${process.cwd()}`,{cwd:process.cwd()}),await s(`chmod 755 ${process.cwd()}/.joystick`,{cwd:process.cwd()}),await s(`chmod 755 ${process.cwd()}/.joystick/data`,{cwd:process.cwd()}),await s(`chown -R postgres:postgres ${process.cwd()}/.joystick/data/postgresql_${c}`,{cwd:process.cwd()}),await s(`chmod 755 ${j.homedir()}`,{cwd:process.cwd()}),await s(`chmod -R 755 ${y.dirname(l)}`,{cwd:process.cwd()}),await s(`chown -R postgres:postgres ${l}`,{cwd:process.cwd()});const i=`${o} "cd ${a} && ./${f} -D ${process.cwd()}/.joystick/data/postgresql_${c} --no-locale"`;await s(i,{cwd:process.cwd()})}else await s(`./${f} -D ${process.cwd()}/.joystick/data/postgresql_${c} --no-locale`,{cwd:a});const _=parseInt(await b(r),10);if(_)if(o){const i=`${o} "cd ${a} && ./${u} kill KILL ${_}"`;await s(i,{cwd:process.cwd()})}else await s(`./${u} kill KILL ${_}`,{cwd:a});const k=[`-p ${r}`,"-D",P(`${process.cwd()}/.joystick/data/postgresql_${c}`)];if(o){const i=`${o} "whoami"`;try{const{stdout:t,stderr:d}=await s(i,{cwd:process.cwd()});console.log("Basic su test stdout:",t),console.log("Basic su test stderr:",d)}catch(t){console.log("Basic su test error:",t)}const p=`${o} "cd ${a} && ./${g} --version"`;try{const{stdout:t,stderr:d}=await s(p,{cwd:process.cwd()});console.log("PostgreSQL version test stdout:",t),console.log("PostgreSQL version test stderr:",d)}catch(t){console.log("PostgreSQL version test error:",t)}const e=`${o} "ls -la ${process.cwd()}/.joystick/data/postgresql_${c}"`;try{const{stdout:t,stderr:d}=await s(e,{cwd:process.cwd()});console.log("Data directory test stdout:",t),console.log("Data directory test stderr:",d)}catch(t){console.log("Data directory test error:",t)}}const w=o?$.spawn("su",["postgres","-c",`cd ${a} && ./${g} ${k.join(" ")}`],{stdio:["pipe","pipe","pipe"]}):$.spawn(`./${g}`,k,{cwd:a});return new Promise((i,p)=>{w.stderr.on("data",async e=>{const t=e?.toString();if(console.log("PostgreSQL stderr:",t),t.includes("database system is ready to accept connections")){const d=(await b(r))?.replace(`
`,""),q=o?`${o} "cd ${a} && ./${h} -h 127.0.0.1 -p ${r} app"`:`./${h} -h 127.0.0.1 -p ${r} app`;s(q,{cwd:o?process.cwd():a}).then(()=>{i(parseInt(d,10))}).catch(({stderr:m})=>{m&&m.includes('database "app" already exists')?i(parseInt(d,10)):console.log(m)})}}),w.stdout.on("data",async e=>{const t=e?.toString();console.log("PostgreSQL stdout:",t)}),w.on("error",e=>{console.log("PostgreSQL process error:",e),p(e)}),w.on("exit",(e,t)=>{console.log(`PostgreSQL process exited with code ${e} and signal ${t}`),e!==0&&p(new Error(`PostgreSQL process exited with code ${e}`))})})}catch(r){console.warn(r),process.exit(1)}};var U=z;export{U as default};
//# sourceMappingURL=index.js.map
