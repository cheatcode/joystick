import u from"child_process";import $ from"fs";import b from"util";import k from"os";import w from"../../../get_platform_safe_path.js";import y from"../../../get_process_id_from_port.js";import g from"../../../path_exists.js";const c=b.promisify(u.exec),{rename:x,mkdir:h}=$.promises,j=async(t=2610)=>{const o=await g(".joystick/data/postgresql");let s=await g(`.joystick/data/postgresql_${t}`);return o&&!s&&(await x(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),s=!0),s||(await h(`.joystick/data/postgresql_${t}`,{recursive:!0}),s=!0),s},q=()=>process.platform==="win32"?"createdb.exe":"createdb",I=()=>process.platform==="win32"?"pg_ctl.exe":"pg_ctl",D=async(t=2610)=>{try{const o=I(),s=q(),p=`${k.homedir()}/.joystick/databases/postgresql/bin`,r=`${p}/bin/${o}`,f=`${p}/bin/${s}`;await j(t)||await c(`${r} initdb -D .joystick/data/postgresql_${t} --options=--no-locale`);const a=t,d=parseInt(await y(a),10);d&&await c(`${r} kill KILL ${d}`);const _=await c(r,["-o",`"-p ${a}"`,"-D",w(`.joystick/data/postgresql_${t}`),"start"]);return new Promise(l=>{_.stderr.on("data",async i=>{const e=i?.toString();console.log(e),e?.includes("another server might be running")||console.warn(e)}),_.stdout.on("data",async i=>{const e=i?.toString();if(console.log(e),e.includes("database system is ready to accept connections")){const m=(await y(a))?.replace(`
`,"");c(`${f} -h 127.0.0.1 -p ${a} app`).then(()=>{l(parseInt(m,10))}).catch(({stderr:n})=>{n&&n.includes('database "app" already exists')?l(parseInt(m,10)):console.log(n)})}})})}catch(o){console.warn(o),process.exit(1)}};var C=D;export{C as default};
