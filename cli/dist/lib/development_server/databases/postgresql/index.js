import g from"child_process";import x from"fs";import b from"util";import q from"os";import y from"path";import u from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import k from"../../../path_exists.js";import L from"../../../get_architecture.js";const a=b.promisify(g.exec),{rename:I}=x.promises,S=async(t=2610)=>{const s=await k(".joystick/data/postgresql");let r=await k(`.joystick/data/postgresql_${t}`);return s&&!r&&(await I(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),r=!0),r},D=()=>"createdb",P=()=>"postgres",Q=()=>"initdb",K=()=>"pg_ctl",E=async(t=2610)=>{try{const s=t,r=L(),h=y.join(q.homedir(),".joystick","databases","postgresql",r),e=y.join(h,"bin"),c=K(),R=Q(),v=P(),m=D(),i=process.platform==="linux"&&process.getuid&&process.getuid()===0;await S(t)||(i?(await a(`mkdir -p ${process.cwd()}/.joystick/data/postgresql_${t}`),await a(`chown -R postgres:postgres ${process.cwd()}/.joystick/data/postgresql_${t}`),await a(`sudo -u postgres ${e}/${c} init -D ${process.cwd()}/.joystick/data/postgresql_${t}`)):await a(`./${c} init -D ${process.cwd()}/.joystick/data/postgresql_${t}`,{cwd:e}));const p=parseInt(await f(s),10);p&&(i?await a(`sudo -u postgres ${e}/${c} kill KILL ${p}`):await a(`./${c} kill KILL ${p}`,{cwd:e}));const d=i?g.spawn("sudo",["-u","postgres",`${e}/${c}`,"-o",`"-p ${s}"`,"-D",u(`${process.cwd()}/.joystick/data/postgresql_${t}`),"start"]):g.spawn(`./${c}`,["-o",`"-p ${s}"`,"-D",u(`${process.cwd()}/.joystick/data/postgresql_${t}`),"start"],{cwd:e});return new Promise((l,$)=>{d.stderr.on("data",async o=>{const n=o?.toString();n?.includes("another server might be running")||console.warn(n)}),d.stdout.on("data",async o=>{if((o?.toString()).includes("database system is ready to accept connections")){const w=(await f(s))?.replace(`
`,""),j=i?`sudo -u postgres ${e}/${m} -h 127.0.0.1 -p ${s} app`:`./${m} -h 127.0.0.1 -p ${s} app`;a(j,{cwd:i?process.cwd():e}).then(()=>{l(parseInt(w,10))}).catch(({stderr:_})=>{_&&_.includes('database "app" already exists')?l(parseInt(w,10)):console.log(_)})}}),d.on("error",o=>{console.log("PostgreSQL process error:",o),$(o)}),d.on("exit",(o,n)=>{console.log(`PostgreSQL process exited with code ${o} and signal ${n}`),o!==0&&$(new Error(`PostgreSQL process exited with code ${o}`))})})}catch(s){console.warn(s),process.exit(1)}};var O=E;export{O as default};
//# sourceMappingURL=index.js.map
