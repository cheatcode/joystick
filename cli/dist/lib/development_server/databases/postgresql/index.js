import m from"child_process";import L from"fs";import S from"util";import P from"os";import b from"path";import k from"../../../get_platform_safe_path.js";import j from"../../../get_process_id_from_port.js";import u from"../../../path_exists.js";import q from"../../../get_architecture.js";const i=S.promisify(m.exec),{rename:Q}=L.promises,I=async(s=2610)=>{const o=await u(".joystick/data/postgresql");let r=await u(`.joystick/data/postgresql_${s}`);if(console.log(`PostgreSQL: legacy_data_directory_exists = ${o}`),console.log(`PostgreSQL: data_directory_exists = ${r}`),console.log(`PostgreSQL: checking paths: .joystick/data/postgresql and .joystick/data/postgresql_${s}`),o&&!r&&(console.log("PostgreSQL: Renaming legacy directory to port-specific directory"),await Q(".joystick/data/postgresql",`.joystick/data/postgresql_${s}`),r=!0),r){const d=await u(`.joystick/data/postgresql_${s}/PG_VERSION`);console.log(`PostgreSQL: PG_VERSION file exists = ${d}`),d||(console.log("PostgreSQL: Directory exists but is not initialized, will run initdb"),r=!1)}return r},D=()=>"createdb",R=()=>"postgres",E=()=>"initdb",z=()=>"pg_ctl",G=async(s=2610)=>{try{const o=s,r=q(),d=b.join(P.homedir(),".joystick","databases","postgresql",r),c=b.join(d,"bin"),l=z(),y=E(),K=R(),$=D(),a=process.platform==="linux"&&process.getuid&&process.getuid()===0,f=await I(s);if(console.log(`PostgreSQL: data_directory_exists = ${f}`),console.log(`PostgreSQL: checking directory ${process.cwd()}/.joystick/data/postgresql_${s}`),!f)if(a){await i(`mkdir -p ${process.cwd()}/.joystick/data/postgresql_${s}`),await i(`chown -R postgres:postgres ${process.cwd()}/.joystick/data`),console.log("PostgreSQL: Running initdb to initialize database cluster...");try{const t=await i(`sudo -u postgres ${c}/${y} -D ${process.cwd()}/.joystick/data/postgresql_${s} --auth-local=trust --auth-host=trust`);console.log("PostgreSQL: initdb completed successfully"),t.stdout&&console.log("initdb stdout:",t.stdout),t.stderr&&console.log("initdb stderr:",t.stderr)}catch(t){throw console.error("PostgreSQL: initdb failed:",t.message),t.stdout&&console.log("initdb stdout:",t.stdout),t.stderr&&console.log("initdb stderr:",t.stderr),t}}else await i(`./${y} -D ${process.cwd()}/.joystick/data/postgresql_${s}`,{cwd:c});const g=parseInt(await j(o),10);g&&(a?await i(`sudo -u postgres ${c}/${l} kill KILL ${g}`):await i(`./${l} kill KILL ${g}`,{cwd:c}));const p=a?m.spawn("sudo",["-u","postgres",`${c}/${l}`,"-o",`"-p ${o}"`,"-D",k(`${process.cwd()}/.joystick/data/postgresql_${s}`),"start"]):m.spawn(`./${l}`,["-o",`"-p ${o}"`,"-D",k(`${process.cwd()}/.joystick/data/postgresql_${s}`),"start"],{cwd:c});return new Promise((t,w)=>{p.stderr.on("data",async e=>{const n=e?.toString();n?.includes("another server might be running")||console.warn(n)}),p.stdout.on("data",async e=>{if((e?.toString()).includes("database system is ready to accept connections")){const h=(await j(o))?.replace(`
`,""),x=a?`sudo -u postgres ${c}/${$} -h 127.0.0.1 -p ${o} app`:`./${$} -h 127.0.0.1 -p ${o} app`;i(x,{cwd:a?process.cwd():c}).then(()=>{t(parseInt(h,10))}).catch(({stderr:_})=>{_&&_.includes('database "app" already exists')?t(parseInt(h,10)):console.log(_)})}}),p.on("error",e=>{console.log("PostgreSQL process error:",e),w(e)}),p.on("exit",(e,n)=>{console.log(`PostgreSQL process exited with code ${e} and signal ${n}`),e!==0&&w(new Error(`PostgreSQL process exited with code ${e}`))})})}catch(o){console.warn(o),process.exit(1)}};var J=G;export{J as default};
//# sourceMappingURL=index.js.map
