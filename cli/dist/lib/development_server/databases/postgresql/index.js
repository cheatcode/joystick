import g from"child_process";import x from"fs";import q from"util";import L from"os";import w from"path";import f from"../../../get_platform_safe_path.js";import b from"../../../get_process_id_from_port.js";import h from"../../../path_exists.js";import S from"../../../get_architecture.js";const c=q.promisify(g.exec),{rename:P}=x.promises,Q=async(s=2610)=>{const o=await h(".joystick/data/postgresql");let a=await h(`.joystick/data/postgresql_${s}`);return o&&!a&&(await P(".joystick/data/postgresql",`.joystick/data/postgresql_${s}`),a=!0),a},I=()=>"createdb",D=()=>"postgres",K=()=>"initdb",R=()=>"pg_ctl",z=async(s=2610)=>{try{const o=s,a=S(),k=w.join(L.homedir(),".joystick","databases","postgresql",a),r=w.join(k,"bin"),d=R(),m=K(),E=D(),u=I(),i=process.platform==="linux"&&process.getuid&&process.getuid()===0;if(!await Q(s))if(i){await c(`mkdir -p ${process.cwd()}/.joystick/data/postgresql_${s}`),await c(`chown -R postgres:postgres ${process.cwd()}/.joystick/data`),console.log("PostgreSQL: Running initdb to initialize database cluster...");try{const t=await c(`sudo -u postgres ${r}/${m} -D ${process.cwd()}/.joystick/data/postgresql_${s} --auth-local=trust --auth-host=trust`);console.log("PostgreSQL: initdb completed successfully"),t.stdout&&console.log("initdb stdout:",t.stdout),t.stderr&&console.log("initdb stderr:",t.stderr)}catch(t){throw console.error("PostgreSQL: initdb failed:",t.message),t.stdout&&console.log("initdb stdout:",t.stdout),t.stderr&&console.log("initdb stderr:",t.stderr),t}}else await c(`./${m} -D ${process.cwd()}/.joystick/data/postgresql_${s}`,{cwd:r});const l=parseInt(await b(o),10);l&&(i?await c(`sudo -u postgres ${r}/${d} kill KILL ${l}`):await c(`./${d} kill KILL ${l}`,{cwd:r}));const p=i?g.spawn("sudo",["-u","postgres",`${r}/${d}`,"-o",`"-p ${o}"`,"-D",f(`${process.cwd()}/.joystick/data/postgresql_${s}`),"start"]):g.spawn(`./${d}`,["-o",`"-p ${o}"`,"-D",f(`${process.cwd()}/.joystick/data/postgresql_${s}`),"start"],{cwd:r});return new Promise((t,y)=>{p.stderr.on("data",async e=>{const n=e?.toString();n?.includes("another server might be running")||console.warn(n)}),p.stdout.on("data",async e=>{if((e?.toString()).includes("database system is ready to accept connections")){const $=(await b(o))?.replace(`
`,""),j=i?`sudo -u postgres ${r}/${u} -h 127.0.0.1 -p ${o} app`:`./${u} -h 127.0.0.1 -p ${o} app`;c(j,{cwd:i?process.cwd():r}).then(()=>{t(parseInt($,10))}).catch(({stderr:_})=>{_&&_.includes('database "app" already exists')?t(parseInt($,10)):console.log(_)})}}),p.on("error",e=>{console.log("PostgreSQL process error:",e),y(e)}),p.on("exit",(e,n)=>{console.log(`PostgreSQL process exited with code ${e} and signal ${n}`),e!==0&&y(new Error(`PostgreSQL process exited with code ${e}`))})})}catch(o){console.warn(o),process.exit(1)}};var O=z;export{O as default};
//# sourceMappingURL=index.js.map
