import g from"child_process";import I from"fs";import D from"util";import f from"os";import e from"path";import L from"../../../get_platform_safe_path.js";import y from"../../../get_process_id_from_port.js";import u from"../../../path_exists.js";const i=D.promisify(g.exec),{rename:A}=I.promises,P=()=>{const t=f.arch();if(t==="arm64")return"arm64";if(t==="x64")return"x86_64";throw new Error(`Unsupported architecture: ${t}`)},c=t=>{const s={...process.env};return process.platform==="darwin"&&(s.DYLD_LIBRARY_PATH=e.join(t,"lib")),s},R=async(t=2610)=>{const s=await u(".joystick/data/postgresql");let r=await u(`.joystick/data/postgresql_${t}`);return s&&!r&&(await A(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),r=!0),r},S=()=>process.platform==="win32"?"createdb.exe":"createdb",Y=()=>process.platform==="win32"?"postgres.exe":"postgres",B=()=>process.platform==="win32"?"initdb.exe":"initdb",E=()=>process.platform==="win32"?"pgctl.exe":"pgctl",H=async(t=2610)=>{try{const s=t,r=P(),o=e.join(f.homedir(),".joystick","databases","postgresql",r),j=E(),b=B(),h=Y(),w=S(),x=e.join(o,"bin",j),k=e.join(o,"bin",b),$=e.join(o,"bin",h),q=e.join(o,"bin",w);await R(t)||await i(`${k} -D .joystick/data/postgresql_${t} --no-locale`,{env:c(o)});const p=parseInt(await y(s),10);p&&await i(`${x} kill KILL ${p}`,{env:c(o)});const _=g.spawn($,[`-p ${s}`,"-D",L(`.joystick/data/postgresql_${t}`)],{env:c(o)});return new Promise(d=>{_.stderr.on("data",async a=>{if((a?.toString()).includes("database system is ready to accept connections")){const l=(await y(s))?.replace(`
`,""),v=`${q} -h 127.0.0.1 -p ${s} app`;i(v,{env:c(o)}).then(()=>{d(parseInt(l,10))}).catch(({stderr:n})=>{n&&n.includes('database "app" already exists')?d(parseInt(l,10)):console.log(n)})}}),_.stdout.on("data",async a=>{const m=a?.toString();console.log(m)})})}catch(s){console.warn(s),process.exit(1)}};var N=H;export{N as default};
//# sourceMappingURL=index.js.map
