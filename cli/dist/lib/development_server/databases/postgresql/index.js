import u from"child_process";import h from"fs";import P from"util";import I from"os";import i from"path";import j from"../../../get_platform_safe_path.js";import k from"../../../get_process_id_from_port.js";import b from"../../../path_exists.js";const n=P.promisify(u.exec),{rename:L,mkdir:D}=h.promises,S=async(t=2610)=>{const o=await b(".joystick/data/postgresql");let s=await b(`.joystick/data/postgresql_${t}`);if(o&&!s&&(await L(".joystick/data/postgresql",`.joystick/data/postgresql_${t}`),s=!0),s||(await D(`.joystick/data/postgresql_${t}`,{recursive:!0}),s=!0),process.platform==="linux"){const e=process.cwd().split(i.sep),a=e.indexOf("root");if(a===-1)throw new Error("Not in expected directory structure.");const d=i.join("/",...e.slice(0,a+4),"data"),c=(await h.readdir(d)).find(_=>_.startsWith(`postgresql_${t}`));if(!c)throw new Error("PostgreSQL data directory not found.");const p=i.join(d,c);await execPromise("sudo chmod 755 /root"),await execPromise(`sudo chmod 755 ${i.join("/root",e[a+1])}`),await execPromise(`sudo chmod 755 ${i.join("/root",e[a+1],".joystick")}`),await execPromise(`sudo chmod 700 ${p}`),await execPromise(`sudo chown -R postgres:postgres ${p}`)}return s},E=()=>process.platform==="win32"?"createdb.exe":"createdb",K=()=>process.platform==="win32"?"postgres.exe":"postgres",v=()=>process.platform==="win32"?"initdb.exe":"initdb",N=()=>process.platform==="win32"?"pgctl.exe":"pgctl",O=async(t=2610)=>{try{const o=t,s=`${I.homedir()}/.joystick/databases/postgresql/bin/bin`,y=N(),e=v(),a=K(),d=E(),l=`${s}/${y}`,c=`${s}/${e}`,p=`${s}/${a}`,_=`${s}/${d}`;await S(t)||(process.platform==="linux"?await n(`sudo -u postgres ${c} -D .joystick/data/postgresql_${t} --options=--no-locale`):await n(`${c} -D .joystick/data/postgresql_${t} --options=--no-locale`));const m=parseInt(await k(o),10);m&&(process.platform==="linux"?await n(`${l} kill KILL ${m}`):await n(`${l} kill KILL ${m}`));const w=process.platform==="linux"?u.spawn(`cd ${s} && sudo -u postgres ./postgres`,[`-p ${o}`,"-D",j(`.joystick/data/postgresql_${t}`)]):u.spawn(p,[`-p ${o}`,"-D",j(`.joystick/data/postgresql_${t}`)]);return new Promise($=>{w.stderr.on("data",async g=>{const r=g?.toString();console.log(r),r?.includes("another server might be running")||console.warn(r)}),w.stdout.on("data",async g=>{const r=g?.toString();if(console.log(r),r.includes("database system is ready to accept connections")){const x=(await k(o))?.replace(`
`,""),q=process.platform==="linux"?`sudo -u postgres ${_} -h 127.0.0.1 -p ${o} app`:`${_} -h 127.0.0.1 -p ${o} app`;n(q).then(()=>{$(parseInt(x,10))}).catch(({stderr:f})=>{f&&f.includes('database "app" already exists')?$(parseInt(x,10)):console.log(f)})}})})}catch(o){console.warn(o),process.exit(1)}};var H=O;export{H as default};
