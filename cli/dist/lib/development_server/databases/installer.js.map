{
  "version": 3,
  "sources": ["../../../../src/lib/development_server/databases/installer.js"],
  "sourcesContent": ["import fs from 'fs';\nimport path from 'path';\nimport os from 'os';\nimport { promisify } from 'util';\nimport { pipeline } from 'stream';\nimport { execFile } from 'child_process';\nimport get_architecture from '../../get_architecture.js';\n\nconst stream_pipeline = promisify(pipeline);\nconst exec_file_async = promisify(execFile);\n\nconst database_versions = {\n  mongodb: '8',\n  postgresql: '17',\n  redis: '7',\n};\n\nconst database_display_names = {\n  mongodb: 'MongoDB',\n  postgresql: 'PostgreSQL',\n  redis: 'Redis',\n};\n\nconst get_platform = () => {\n  const platform = os.platform();\n  if (platform === 'darwin') return 'macos';\n  if (platform === 'linux') return 'linux';\n  throw new Error(`Unsupported platform: ${platform}. Please use WSL2 on Windows.`);\n};\n\n\nconst build_download_url = (database, version, platform, architecture) => {\n  const cache_buster = Date.now();\n  return `https://cdn.joystickjs.com/${database}/${version}/${platform}/${architecture}.tar.gz?t=${cache_buster}`;\n};\n\nconst check_if_file_exists = async (file_path) => {\n  try {\n    await fs.promises.access(file_path);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nconst download_file = async (url, file_path) => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`Failed to download ${url}: ${response.statusText}`);\n  }\n  await stream_pipeline(response.body, fs.createWriteStream(file_path));\n};\n\nconst make_files_executable = async (directory) => {\n  try {\n    if (!(await check_if_file_exists(directory))) {\n      return; // Directory doesn't exist, skip\n    }\n\n    const files = await fs.promises.readdir(directory);\n    for (const file of files) {\n      const file_path = path.join(directory, file);\n      const stats = await fs.promises.stat(file_path);\n      if (stats.isFile()) {\n        await fs.promises.chmod(file_path, '755');\n      } else if (stats.isDirectory()) {\n        // Recursively make files executable in subdirectories\n        await make_files_executable(file_path);\n      }\n    }\n  } catch (error) {\n    // Skip errors, but don't warn as this is expected during installation\n  }\n};\n\nconst install_database = async (database_name) => {\n  const platform = get_platform();\n  const architecture = get_architecture();\n  const base_directory = path.join(os.homedir(), '.joystick', 'databases', database_name);\n  const architecture_directory = path.join(base_directory, architecture);\n\n  // Check if the architecture-specific directory exists\n  if (await check_if_file_exists(architecture_directory)) {\n    return; // Already installed for this architecture\n  }\n\n  const version = database_versions[database_name];\n\n  if (!version) {\n    throw new Error(`Unsupported database: ${database_name}`);\n  }\n\n  const download_url = build_download_url(database_name, version, platform, architecture);\n  const archive_filename = `${database_name}.tar.gz`;\n  const archive_path = path.join(base_directory, archive_filename);\n  const display_name = database_display_names[database_name] || database_name;\n\n  process.loader.print(`${display_name} (${architecture}) not found. Downloading... (this may take a few minutes)`);\n\n  // Create the base directory\n  await fs.promises.mkdir(base_directory, { recursive: true });\n  await download_file(download_url, archive_path);\n\n  process.loader.print(`Installing ${display_name} (${architecture})...`);\n\n  // Create architecture directory and extract there\n  await fs.promises.mkdir(architecture_directory, { recursive: true });\n  await exec_file_async('tar', ['-xzf', archive_path, '-C', architecture_directory]);\n  await fs.promises.unlink(archive_path);\n  await make_files_executable(architecture_directory);\n\n  process.loader.print(`${display_name} (${architecture}) installed!`);\n};\n\nexport default install_database;\n"],
  "mappings": "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",
  "names": ["fs", "path", "os", "promisify", "pipeline", "execFile", "get_architecture", "stream_pipeline", "exec_file_async", "database_versions", "database_display_names", "get_platform", "platform", "build_download_url", "database", "version", "architecture", "cache_buster", "check_if_file_exists", "file_path", "download_file", "url", "response", "make_files_executable", "directory", "files", "file", "stats", "install_database", "database_name", "base_directory", "architecture_directory", "download_url", "archive_filename", "archive_path", "display_name", "installer_default"]
}
