import e from"fs";import a from"path";import p from"os";import{promisify as f}from"util";import{pipeline as w}from"stream";import{execFile as u}from"child_process";import h from"../../get_architecture.js";const _=f(w),$=f(u),y={mongodb:"8",postgresql:"17",redis:"7"},g={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},x=()=>{const t=p.platform();if(t==="darwin")return"macos";if(t==="linux")return"linux";throw new Error(`Unsupported platform: ${t}. Please use WSL2 on Windows.`)},k=(t,r,o,s)=>{const i=Date.now();return`https://cdn.joystickjs.com/${t}/${r}/${o}/${s}.tar.gz?t=${i}`},j=async t=>{try{return await e.promises.access(t),!0}catch{return!1}},b=async(t,r)=>{const o=await fetch(t);if(!o.ok)throw new Error(`Failed to download ${t}: ${o.statusText}`);await _(o.body,e.createWriteStream(r))},v=async t=>{const r=await e.promises.readdir(t);for(const o of r){const s=a.join(t,o);(await e.promises.stat(s)).isFile()&&await e.promises.chmod(s,"755")}},z=async t=>{const r=x(),o=h(),s=a.join(p.homedir(),".joystick","databases",t),i=a.join(s,o);if(await j(i))return;const l=y[t];if(!l)throw new Error(`Unsupported database: ${t}`);const d=k(t,l,r,o),m=`${t}.tar.gz`,n=a.join(s,m),c=g[t]||t;process.loader.print(`${c} (${o}) not found. Downloading... (this may take a few minutes)`),await e.promises.mkdir(s,{recursive:!0}),await b(d,n),process.loader.print(`Installing ${c} (${o})...`),await $("tar",["-xzf",n,"-C",s]),await e.promises.unlink(n),await v(i),process.loader.print(`${c} (${o}) installed!`)};var P=z;export{P as default};
//# sourceMappingURL=installer.js.map
