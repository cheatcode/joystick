import r from"fs";import e from"path";import d from"os";import{promisify as h}from"util";import{pipeline as j}from"stream";import{execFile as k}from"child_process";import x from"../../get_architecture.js";const v=h(j),q=h(k),D={mongodb:"8",postgresql:"17",redis:"7"},S={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},F=()=>{const t=d.platform();if(t==="darwin")return"macos";if(t==="linux")return"linux";throw new Error(`Unsupported platform: ${t}. Please use WSL2 on Windows.`)},W=(t,a,s,o)=>{const i=Date.now();return`https://cdn.joystickjs.com/${t}/${a}/${s}/${o}.tar.gz?t=${i}`},c=async t=>{try{return await r.promises.access(t),!0}catch{return!1}},z=async(t,a)=>{const s=await fetch(t);if(!s.ok)throw new Error(`Failed to download ${t}: ${s.statusText}`);await v(s.body,r.createWriteStream(a))},f=async(t,a=null)=>{try{if(!await c(t))return;const s=await r.promises.readdir(t);for(const o of s){const i=e.join(t,o),n=await r.promises.stat(i);n.isFile()?await r.promises.chmod(i,"755"):n.isDirectory()&&await f(i)}}catch{}},g=async t=>{if(process.platform!=="linux"||!process.getuid||process.getuid()!==0)return;const{exec:a}=await import("child_process"),{promisify:s}=await import("util"),o=s(a);try{try{await o("id postgres")}catch{await o("useradd -r -s /bin/bash postgres")}const i=d.homedir();await o(`chmod 755 ${i}`),await o(`chmod 755 ${e.join(i,".joystick")}`),await o(`chmod 755 ${e.join(i,".joystick","databases")}`),await o(`chmod 755 ${e.join(i,".joystick","databases","postgresql")}`),await o(`chmod 755 ${t}`),await o(`chown -R postgres:postgres ${t}`);const n=e.join(t,"bin");await c(n)&&await o(`chmod -R 755 ${n}`)}catch(i){console.warn(`Warning: Could not set up postgres user ownership: ${i.message}`)}},E=async()=>{const t=e.join(d.homedir(),".joystick","databases"),a=e.join(d.homedir(),".joystick","removed_old_databases");await c(a)||await c(t)&&(console.log(`
\u{1F504} Upgrading database binaries to include required shared libraries...`),await r.promises.rm(t,{recursive:!0,force:!0}),await r.promises.writeFile(a,new Date().toISOString()),console.log(`\u2705 Old database binaries removed. New binaries will be downloaded automatically.
`))},R=async t=>{await E();const a=F(),s=x(),o=e.join(d.homedir(),".joystick","databases",t),i=e.join(o,s);if(await c(i))return;const n=D[t];if(!n)throw new Error(`Unsupported database: ${t}`);const u=W(t,n,a,s),_=`${t}.tar.gz`,l=e.join(o,_),p=S[t]||t;process.loader.print(`${p} (${s}) not found. Downloading... (this may take a few minutes)`),await r.promises.mkdir(o,{recursive:!0}),await z(u,l),process.loader.print(`Installing ${p} (${s})...`),await q("tar",["-xzf",l,"-C",o]),await r.promises.unlink(l);const m=e.join(o,s);if(await c(m))await f(m),t==="postgresql"&&await g(m);else{await r.promises.mkdir(i,{recursive:!0});const y=await r.promises.readdir(o);for(const w of y){const $=e.join(o,w),b=e.join(i,w);w!==s&&await r.promises.rename($,b)}await f(i),t==="postgresql"&&await g(i)}process.loader.print(`${p} (${s}) installed!`)};var M=R;export{M as default};
//# sourceMappingURL=installer.js.map
