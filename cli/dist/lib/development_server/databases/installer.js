import r from"fs";import i from"path";import w from"os";import{promisify as g}from"util";import{pipeline as x}from"stream";import{execFile as k}from"child_process";import b from"../../get_architecture.js";const S=g(x),q=g(k),L={mongodb:"8",postgresql:"17",redis:"7"},P={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},v=()=>{const s=w.platform();if(s==="darwin")return"macos";if(s==="linux")return"linux";throw new Error(`Unsupported platform: ${s}. Please use WSL2 on Windows.`)},Q=(s,a,e,t)=>{const o=Date.now();return`https://cdn.joystickjs.com/${s}/${a}/${e}/${t}.tar.gz?t=${o}`},d=async s=>{try{return await r.promises.access(s),!0}catch{return!1}},D=async(s,a)=>{const e=await fetch(s);if(!e.ok)throw new Error(`Failed to download ${s}: ${e.statusText}`);await S(e.body,r.createWriteStream(a))},m=async(s,a=null)=>{try{if(!await d(s))return;const e=await r.promises.readdir(s);for(const t of e){const o=i.join(s,t),n=await r.promises.stat(o);n.isFile()?await r.promises.chmod(o,"755"):n.isDirectory()&&await m(o)}}catch{}},h=async s=>{if(process.platform!=="linux"||!process.getuid||process.getuid()!==0)return;const{exec:a}=await import("child_process"),{promisify:e}=await import("util"),t=e(a);try{try{await t("id postgres"),console.log("PostgreSQL setup: postgres user already exists")}catch{console.log("PostgreSQL setup: creating postgres user"),await t("useradd -r -s /bin/bash postgres")}const o=require("os").homedir();console.log("PostgreSQL setup: setting directory permissions"),await t(`chmod 755 ${o}`),await t(`chmod 755 ${i.join(o,".joystick")}`),await t(`chmod 755 ${i.join(o,".joystick","databases")}`),await t(`chmod 755 ${i.join(o,".joystick","databases","postgresql")}`),console.log("PostgreSQL setup: changing ownership to postgres user"),await t(`chown -R postgres:postgres ${s}`),console.log("PostgreSQL setup: completed successfully")}catch(o){console.warn(`Warning: Could not set up postgres user ownership: ${o.message}`)}},W=async s=>{const a=v(),e=b(),t=i.join(w.homedir(),".joystick","databases",s),o=i.join(t,e);if(await d(o))return;const n=L[s];if(!n)throw new Error(`Unsupported database: ${s}`);const y=Q(s,n,a,e),_=`${s}.tar.gz`,c=i.join(t,_),p=P[s]||s;process.loader.print(`${p} (${e}) not found. Downloading... (this may take a few minutes)`),await r.promises.mkdir(t,{recursive:!0}),await D(y,c),process.loader.print(`Installing ${p} (${e})...`),await q("tar",["-xzf",c,"-C",t]),await r.promises.unlink(c);const l=i.join(t,e);if(await d(l))await m(l),s==="postgresql"&&await h(l);else{await r.promises.mkdir(o,{recursive:!0});const $=await r.promises.readdir(t);for(const u of $){const f=i.join(t,u),j=i.join(o,u);(await r.promises.stat(f)).isDirectory()||await r.promises.rename(f,j)}await m(o),s==="postgresql"&&await h(o)}process.loader.print(`${p} (${e}) installed!`)};var M=W;export{M as default};
//# sourceMappingURL=installer.js.map
