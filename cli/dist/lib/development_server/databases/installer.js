import r from"fs";import e from"path";import m from"os";import{promisify as _}from"util";import{pipeline as x}from"stream";import{execFile as k}from"child_process";import b from"../../get_architecture.js";const q=_(x),v=_(k),D={mongodb:"8",postgresql:"17",redis:"7"},W={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},z=()=>{const t=m.platform();if(t==="darwin")return"macos";if(t==="linux")return"linux";throw new Error(`Unsupported platform: ${t}. Please use WSL2 on Windows.`)},E=(t,a,i,s)=>{const o=Date.now();return`https://cdn.joystickjs.com/${t}/${a}/${i}/${s}.tar.gz?t=${o}`},c=async t=>{try{return await r.promises.access(t),!0}catch{return!1}},F=async(t,a)=>{const i=await fetch(t);if(!i.ok)throw new Error(`Failed to download ${t}: ${i.statusText}`);await q(i.body,r.createWriteStream(a))},w=async(t,a=null)=>{try{if(!await c(t))return;const i=await r.promises.readdir(t);for(const s of i){const o=e.join(t,s),n=await r.promises.stat(o);n.isFile()?await r.promises.chmod(o,"755"):n.isDirectory()&&await w(o)}}catch{}},g=async t=>{if(process.platform!=="linux"||!process.getuid||process.getuid()!==0)return;const{exec:a}=await import("child_process"),{promisify:i}=await import("util"),s=i(a);try{try{await s("id postgres")}catch{await s("useradd -r -s /bin/bash postgres")}const o=m.homedir();await s(`chmod 755 ${o}`),await s(`chmod 755 ${e.join(o,".joystick")}`),await s(`chmod 755 ${e.join(o,".joystick","databases")}`),await s(`chmod 755 ${e.join(o,".joystick","databases","postgresql")}`),await s(`chmod 755 ${t}`),await s(`chown -R postgres:postgres ${t}`);const n=e.join(t,"bin");await c(n)&&await s(`chmod -R 755 ${n}`)}catch(o){console.warn(`Warning: Could not set up postgres user ownership: ${o.message}`)}},R=async t=>{const a=z(),i=b(),s=e.join(m.homedir(),".joystick","databases",t),o=e.join(s,i);if(await c(o))return;const n=D[t];if(!n)throw new Error(`Unsupported database: ${t}`);const f=E(t,n,a,i),$=`${t}.tar.gz`,p=e.join(s,$),l=W[t]||t;process.loader.print(`${l} (${i}) not found. Downloading... (this may take a few minutes)`),await r.promises.mkdir(s,{recursive:!0}),await F(f,p),process.loader.print(`Installing ${l} (${i})...`),await v("tar",["-xzf",p,"-C",s]),await r.promises.unlink(p);const d=e.join(s,i);if(await c(d))await w(d),t==="postgresql"&&await g(d);else{await r.promises.mkdir(o,{recursive:!0});const y=await r.promises.readdir(s);for(const u of y){const h=e.join(s,u),j=e.join(o,u);(await r.promises.stat(h)).isDirectory()||await r.promises.rename(h,j)}await w(o),t==="postgresql"&&await g(o)}process.loader.print(`${l} (${i}) installed!`)};var Q=R;export{Q as default};
//# sourceMappingURL=installer.js.map
