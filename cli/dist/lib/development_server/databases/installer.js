import r from"fs";import c from"path";import l from"os";import{promisify as p}from"util";import{pipeline as d}from"stream";import{execFile as w}from"child_process";import u from"../../get_architecture.js";const h=p(d),_=p(w),y={mongodb:"8",postgresql:"17",redis:"7"},$={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},g=()=>{const t=l.platform();if(t==="darwin")return"macos";if(t==="linux")return"linux";throw new Error(`Unsupported platform: ${t}. Please use WSL2 on Windows.`)},x=(t,o,s,e)=>{const i=Date.now();return`https://cdn.joystickjs.com/${t}/${o}/${s}/${e}.tar.gz?t=${i}`},k=async t=>{try{return await r.promises.access(t),!0}catch{return!1}},b=async(t,o)=>{const s=await fetch(t);if(!s.ok)throw new Error(`Failed to download ${t}: ${s.statusText}`);await h(s.body,r.createWriteStream(o))},j=async t=>{const o=await r.promises.readdir(t);for(const s of o){const e=c.join(t,s);(await r.promises.stat(e)).isFile()&&await r.promises.chmod(e,"755")}},v=async t=>{const o=c.join(l.homedir(),".joystick","databases",t);if(await k(o))return;const s=g(),e=u(),i=y[t];if(!i)throw new Error(`Unsupported database: ${t}`);const f=x(t,i,s,e),m=`${t}.tar.gz`,a=c.join(o,m),n=$[t]||t;process.loader.print(`${n} not found. Downloading... (this may take a few minutes)`),await r.promises.mkdir(o,{recursive:!0}),await b(f,a),process.loader.print(`Installing ${n}...`),await _("tar",["-xzf",a,"-C",o]),await r.promises.unlink(a),await j(o),process.loader.print(`${n} installed!`)};var L=v;export{L as default};
//# sourceMappingURL=installer.js.map
