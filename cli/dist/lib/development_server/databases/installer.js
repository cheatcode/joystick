import s from"fs";import a from"path";import w from"os";import{promisify as u}from"util";import{pipeline as j}from"stream";import{execFile as x}from"child_process";import k from"../../get_architecture.js";const b=u(j),v=u(x),D={mongodb:"8",postgresql:"17",redis:"7"},z={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},E=()=>{const t=w.platform();if(t==="darwin")return"macos";if(t==="linux")return"linux";throw new Error(`Unsupported platform: ${t}. Please use WSL2 on Windows.`)},F=(t,i,o,r)=>{const e=Date.now();return`https://cdn.joystickjs.com/${t}/${i}/${o}/${r}.tar.gz?t=${e}`},p=async t=>{try{return await s.promises.access(t),!0}catch{return!1}},S=async(t,i)=>{const o=await fetch(t);if(!o.ok)throw new Error(`Failed to download ${t}: ${o.statusText}`);await b(o.body,s.createWriteStream(i))},f=async t=>{try{if(!await p(t))return;const i=await s.promises.readdir(t);for(const o of i){const r=a.join(t,o),e=await s.promises.stat(r);e.isFile()?await s.promises.chmod(r,"755"):e.isDirectory()&&await f(r)}}catch{}},W=async t=>{const i=E(),o=k(),r=a.join(w.homedir(),".joystick","databases",t),e=a.join(r,o);if(await p(e))return;const d=D[t];if(!d)throw new Error(`Unsupported database: ${t}`);const h=F(t,d,i,o),_=`${t}.tar.gz`,n=a.join(r,_),c=z[t]||t;process.loader.print(`${c} (${o}) not found. Downloading... (this may take a few minutes)`),await s.promises.mkdir(r,{recursive:!0}),await S(h,n),process.loader.print(`Installing ${c} (${o})...`),await v("tar",["-xzf",n,"-C",r]),await s.promises.unlink(n);const m=a.join(r,o);if(await p(m))await f(m);else{await s.promises.mkdir(e,{recursive:!0});const $=await s.promises.readdir(r);for(const l of $){const y=a.join(r,l),g=a.join(e,l);l!==o&&await s.promises.rename(y,g)}await f(e)}process.loader.print(`${c} (${o}) installed!`)};var M=W;export{M as default};
//# sourceMappingURL=installer.js.map
