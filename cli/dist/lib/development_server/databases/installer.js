import i from"fs";import a from"path";import p from"os";import{promisify as f}from"util";import{pipeline as h}from"stream";import{execFile as _}from"child_process";import $ from"../../get_architecture.js";const y=f(h),g=f(_),x={mongodb:"8",postgresql:"17",redis:"7"},k={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},j=()=>{const t=p.platform();if(t==="darwin")return"macos";if(t==="linux")return"linux";throw new Error(`Unsupported platform: ${t}. Please use WSL2 on Windows.`)},b=(t,s,o,r)=>{const e=Date.now();return`https://cdn.joystickjs.com/${t}/${s}/${o}/${r}.tar.gz?t=${e}`},m=async t=>{try{return await i.promises.access(t),!0}catch{return!1}},v=async(t,s)=>{const o=await fetch(t);if(!o.ok)throw new Error(`Failed to download ${t}: ${o.statusText}`);await y(o.body,i.createWriteStream(s))},d=async t=>{try{if(!await m(t))return;const s=await i.promises.readdir(t);for(const o of s){const r=a.join(t,o),e=await i.promises.stat(r);e.isFile()?await i.promises.chmod(r,"755"):e.isDirectory()&&await d(r)}}catch{}},D=async t=>{const s=j(),o=$(),r=a.join(p.homedir(),".joystick","databases",t),e=a.join(r,o);if(await m(e))return;const l=x[t];if(!l)throw new Error(`Unsupported database: ${t}`);const w=b(t,l,s,o),u=`${t}.tar.gz`,n=a.join(r,u),c=k[t]||t;process.loader.print(`${c} (${o}) not found. Downloading... (this may take a few minutes)`),await i.promises.mkdir(r,{recursive:!0}),await v(w,n),process.loader.print(`Installing ${c} (${o})...`),await g("tar",["-xzf",n,"-C",r]),await i.promises.unlink(n),await d(e),process.loader.print(`${c} (${o}) installed!`)};var P=D;export{P as default};
//# sourceMappingURL=installer.js.map
