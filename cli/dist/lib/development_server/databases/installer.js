import s from"fs";import a from"path";import c from"os";import{promisify as l}from"util";import{pipeline as m}from"stream";import{execFile as u}from"child_process";const w=l(m),d=l(u),h={mongodb:"8",postgresql:"16",redis:"7"},_=()=>{const t=c.platform();if(t==="darwin")return"macos";if(t==="linux")return"linux";throw new Error(`Unsupported platform: ${t}. Please use WSL2 on Windows.`)},$=()=>{const t=c.arch();if(t==="arm64")return"arm64";if(t==="x64")return"x86_64";throw new Error(`Unsupported architecture: ${t}`)},x=(t,r,o,e)=>{const i=Date.now();return`https://cdn.joystickjs.com/${t}/${r}/${o}/${e}.tar.gz?t=${i}`},y=async t=>{try{return await s.promises.access(t),!0}catch{return!1}},g=async(t,r)=>{const o=await fetch(t);if(!o.ok)throw new Error(`Failed to download ${t}: ${o.statusText}`);await w(o.body,s.createWriteStream(r))},k=async t=>{const r=await s.promises.readdir(t);for(const o of r){const e=a.join(t,o);(await s.promises.stat(e)).isFile()&&await s.promises.chmod(e,"755")}},j=async t=>{const r=a.join(c.homedir(),".joystick","databases",t);if(await y(r))return;const o=_(),e=$(),i=h[t];if(!i)throw new Error(`Unsupported database: ${t}`);const p=x(t,i,o,e),f=`${t}.tar.gz`,n=a.join(r,f);process.loader.print(`${t} not found. Downloading... (this may take a few minutes)`),await s.promises.mkdir(r,{recursive:!0}),await g(p,n),process.loader.print(`Installing ${t}...`),await d("tar",["-xzf",n,"-C",r]),await s.promises.unlink(n),await k(r),process.loader.print(`${t} installed!`)};var W=j;export{W as default};
//# sourceMappingURL=installer.js.map
