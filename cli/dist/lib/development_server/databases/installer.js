import i from"fs";import n from"path";import h from"os";import{promisify as g}from"util";import{pipeline as x}from"stream";import{execFile as j}from"child_process";import k from"../../get_architecture.js";const v=g(x),b=g(j),D={mongodb:"8",postgresql:"17",redis:"7"},S={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},W=()=>{const t=h.platform();if(t==="darwin")return"macos";if(t==="linux")return"linux";throw new Error(`Unsupported platform: ${t}. Please use WSL2 on Windows.`)},q=(t,a,o,s)=>{const r=Date.now();return`https://cdn.joystickjs.com/${t}/${a}/${o}/${s}.tar.gz?t=${r}`},f=async t=>{try{return await i.promises.access(t),!0}catch{return!1}},z=async(t,a)=>{const o=await fetch(t);if(!o.ok)throw new Error(`Failed to download ${t}: ${o.statusText}`);await v(o.body,i.createWriteStream(a))},m=async(t,a=null)=>{try{if(!await f(t))return;const o=await i.promises.readdir(t);for(const s of o){const r=n.join(t,s),e=await i.promises.stat(r);e.isFile()?await i.promises.chmod(r,"755"):e.isDirectory()&&await m(r,a)}if(a==="postgresql"&&process.platform==="linux"&&process.getuid&&process.getuid()===0){const{exec:s}=await import("child_process"),{promisify:r}=await import("util"),e=r(s);try{try{await e("id postgres")}catch{await e("useradd -r -s /bin/bash postgres")}await e(`chown -R postgres:postgres ${t}`)}catch{console.warn("Warning: Could not set up postgres user ownership. PostgreSQL may not start as root.")}}}catch{}},E=async t=>{const a=W(),o=k(),s=n.join(h.homedir(),".joystick","databases",t),r=n.join(s,o);if(await f(r))return;const e=D[t];if(!e)throw new Error(`Unsupported database: ${t}`);const c=q(t,e,a,o),_=`${t}.tar.gz`,p=n.join(s,_),l=S[t]||t;process.loader.print(`${l} (${o}) not found. Downloading... (this may take a few minutes)`),await i.promises.mkdir(s,{recursive:!0}),await z(c,p),process.loader.print(`Installing ${l} (${o})...`),await b("tar",["-xzf",p,"-C",s]),await i.promises.unlink(p);const w=n.join(s,o);if(await f(w))await m(w,t);else{await i.promises.mkdir(r,{recursive:!0});const y=await i.promises.readdir(s);for(const d of y){const u=n.join(s,d),$=n.join(r,d);(await i.promises.stat(u)).isDirectory()||await i.promises.rename(u,$)}await m(r,t)}process.loader.print(`${l} (${o}) installed!`)};var I=E;export{I as default};
//# sourceMappingURL=installer.js.map
