import e from"fs";import a from"path";import g from"os";import{promisify as y}from"util";import{pipeline as j}from"stream";import{execFile as x}from"child_process";import k from"../../get_architecture.js";const b=y(j),v=y(x),q={mongodb:"8",postgresql:"17",redis:"7"},D={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},S=()=>{const t=g.platform();if(t==="darwin")return"macos";if(t==="linux")return"linux";throw new Error(`Unsupported platform: ${t}. Please use WSL2 on Windows.`)},W=(t,n,o,r)=>{const i=Date.now();return`https://cdn.joystickjs.com/${t}/${n}/${o}/${r}.tar.gz?t=${i}`},d=async t=>{try{return await e.promises.access(t),!0}catch{return!1}},z=async(t,n)=>{const o=await fetch(t);if(!o.ok)throw new Error(`Failed to download ${t}: ${o.statusText}`);await b(o.body,e.createWriteStream(n))},m=async(t,n=null)=>{try{if(!await d(t))return;const o=await e.promises.readdir(t);for(const r of o){const i=a.join(t,r),s=await e.promises.stat(i);s.isFile()?await e.promises.chmod(i,"755"):s.isDirectory()&&await m(i,n)}if(n==="postgresql"&&process.platform==="linux"&&process.getuid&&process.getuid()===0){const{exec:r}=await import("child_process"),{promisify:i}=await import("util"),s=i(r);try{try{await s("id postgres")}catch{await s("useradd -r -s /bin/bash postgres")}const c=require("os").homedir();await s(`chmod 755 ${c}`),await s(`chmod 755 ${a.join(c,".joystick")}`),await s(`chmod 755 ${a.join(c,".joystick","databases")}`),await s(`chmod 755 ${a.join(c,".joystick","databases","postgresql")}`),await s(`chown -R postgres:postgres ${t}`),await s(`chmod -R 755 ${t}`)}catch{console.warn("Warning: Could not set up postgres user ownership. PostgreSQL may not start as root.")}}}catch{}},E=async t=>{const n=S(),o=k(),r=a.join(g.homedir(),".joystick","databases",t),i=a.join(r,o);if(await d(i))return;const s=q[t];if(!s)throw new Error(`Unsupported database: ${t}`);const c=W(t,s,n,o),f=`${t}.tar.gz`,p=a.join(r,f),l=D[t]||t;process.loader.print(`${l} (${o}) not found. Downloading... (this may take a few minutes)`),await e.promises.mkdir(r,{recursive:!0}),await z(c,p),process.loader.print(`Installing ${l} (${o})...`),await v("tar",["-xzf",p,"-C",r]),await e.promises.unlink(p);const w=a.join(r,o);if(await d(w))await m(w,t);else{await e.promises.mkdir(i,{recursive:!0});const $=await e.promises.readdir(r);for(const u of $){const h=a.join(r,u),_=a.join(i,u);(await e.promises.stat(h)).isDirectory()||await e.promises.rename(h,_)}await m(i,t)}process.loader.print(`${l} (${o}) installed!`)};var I=E;export{I as default};
//# sourceMappingURL=installer.js.map
