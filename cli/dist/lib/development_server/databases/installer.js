import e from"fs";import r from"path";import f from"os";import{promisify as h}from"util";import{pipeline as x}from"stream";import{execFile as k}from"child_process";import b from"../../get_architecture.js";const q=h(x),v=h(k),D={mongodb:"8",postgresql:"17",redis:"7"},W={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},z=()=>{const t=f.platform();if(t==="darwin")return"macos";if(t==="linux")return"linux";throw new Error(`Unsupported platform: ${t}. Please use WSL2 on Windows.`)},E=(t,a,s,o)=>{const i=Date.now();return`https://cdn.joystickjs.com/${t}/${a}/${s}/${o}.tar.gz?t=${i}`},c=async t=>{try{return await e.promises.access(t),!0}catch{return!1}},F=async(t,a)=>{const s=await fetch(t);if(!s.ok)throw new Error(`Failed to download ${t}: ${s.statusText}`);await q(s.body,e.createWriteStream(a))},w=async(t,a=null)=>{try{if(!await c(t))return;const s=await e.promises.readdir(t);for(const o of s){const i=r.join(t,o),n=await e.promises.stat(i);n.isFile()?await e.promises.chmod(i,"755"):n.isDirectory()&&await w(i)}}catch{}},_=async t=>{if(process.platform!=="linux"||!process.getuid||process.getuid()!==0)return;const{exec:a}=await import("child_process"),{promisify:s}=await import("util"),o=s(a);try{try{await o("id postgres")}catch{await o("useradd -r -s /bin/bash postgres")}const i=f.homedir();await o(`chmod 755 ${i}`),await o(`chmod 755 ${r.join(i,".joystick")}`),await o(`chmod 755 ${r.join(i,".joystick","databases")}`),await o(`chmod 755 ${r.join(i,".joystick","databases","postgresql")}`),await o(`chmod 755 ${t}`),await o(`chown -R postgres:postgres ${t}`);const n=r.join(t,"bin");await c(n)&&await o(`chmod -R 755 ${n}`)}catch(i){console.warn(`Warning: Could not set up postgres user ownership: ${i.message}`)}},R=async t=>{const a=z(),s=b(),o=r.join(f.homedir(),".joystick","databases",t),i=r.join(o,s);if(await c(i))return;const n=D[t];if(!n)throw new Error(`Unsupported database: ${t}`);const u=E(t,n,a,s),g=`${t}.tar.gz`,p=r.join(o,g),l=W[t]||t;process.loader.print(`${l} (${s}) not found. Downloading... (this may take a few minutes)`),await e.promises.mkdir(o,{recursive:!0}),await F(u,p),process.loader.print(`Installing ${l} (${s})...`),await v("tar",["-xzf",p,"-C",o]),await e.promises.unlink(p);const d=r.join(o,s);if(await c(d))await w(d),t==="postgresql"&&await _(d);else{await e.promises.mkdir(i,{recursive:!0});const $=await e.promises.readdir(o);for(const m of $){const y=r.join(o,m),j=r.join(i,m);m!==s&&await e.promises.rename(y,j)}await w(i),t==="postgresql"&&await _(i)}process.loader.print(`${l} (${s}) installed!`)};var M=R;export{M as default};
//# sourceMappingURL=installer.js.map
