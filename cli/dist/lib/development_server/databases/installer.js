import r from"fs";import i from"path";import m from"os";import{promisify as h}from"util";import{pipeline as x}from"stream";import{execFile as b}from"child_process";import k from"../../get_architecture.js";const S=h(x),L=h(b),P={mongodb:"8",postgresql:"17",redis:"7"},Q={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},q=()=>{const s=m.platform();if(s==="darwin")return"macos";if(s==="linux")return"linux";throw new Error(`Unsupported platform: ${s}. Please use WSL2 on Windows.`)},v=(s,a,e,t)=>{const o=Date.now();return`https://cdn.joystickjs.com/${s}/${a}/${e}/${t}.tar.gz?t=${o}`},c=async s=>{try{return await r.promises.access(s),!0}catch{return!1}},D=async(s,a)=>{const e=await fetch(s);if(!e.ok)throw new Error(`Failed to download ${s}: ${e.statusText}`);await S(e.body,r.createWriteStream(a))},u=async(s,a=null)=>{try{if(!await c(s))return;const e=await r.promises.readdir(s);for(const t of e){const o=i.join(s,t),n=await r.promises.stat(o);n.isFile()?await r.promises.chmod(o,"755"):n.isDirectory()&&await u(o)}}catch{}},y=async s=>{if(process.platform!=="linux"||!process.getuid||process.getuid()!==0)return;const{exec:a}=await import("child_process"),{promisify:e}=await import("util"),t=e(a);try{try{await t("id postgres"),console.log("PostgreSQL setup: postgres user already exists")}catch{console.log("PostgreSQL setup: creating postgres user"),await t("useradd -r -s /bin/bash postgres")}const o=m.homedir();console.log("PostgreSQL setup: setting directory permissions"),await t(`chmod 755 ${o}`),await t(`chmod 755 ${i.join(o,".joystick")}`),await t(`chmod 755 ${i.join(o,".joystick","databases")}`),await t(`chmod 755 ${i.join(o,".joystick","databases","postgresql")}`),await t(`chmod 755 ${s}`),console.log("PostgreSQL setup: changing ownership to postgres user"),await t(`chown -R postgres:postgres ${s}`);const n=i.join(s,"bin");await c(n)&&(await t(`chmod -R 755 ${n}`),console.log("PostgreSQL setup: made all binaries executable")),console.log("PostgreSQL setup: completed successfully")}catch(o){console.warn(`Warning: Could not set up postgres user ownership: ${o.message}`)}},W=async s=>{const a=q(),e=k(),t=i.join(m.homedir(),".joystick","databases",s),o=i.join(t,e);if(await c(o))return;const n=P[s];if(!n)throw new Error(`Unsupported database: ${s}`);const w=v(s,n,a,e),_=`${s}.tar.gz`,p=i.join(t,_),l=Q[s]||s;process.loader.print(`${l} (${e}) not found. Downloading... (this may take a few minutes)`),await r.promises.mkdir(t,{recursive:!0}),await D(w,p),process.loader.print(`Installing ${l} (${e})...`),await L("tar",["-xzf",p,"-C",t]),await r.promises.unlink(p);const d=i.join(t,e);if(await c(d))await u(d),s==="postgresql"&&await y(d);else{await r.promises.mkdir(o,{recursive:!0});const $=await r.promises.readdir(t);for(const f of $){const g=i.join(t,f),j=i.join(o,f);(await r.promises.stat(g)).isDirectory()||await r.promises.rename(g,j)}await u(o),s==="postgresql"&&await y(o)}process.loader.print(`${l} (${e}) installed!`)};var M=W;export{M as default};
//# sourceMappingURL=installer.js.map
