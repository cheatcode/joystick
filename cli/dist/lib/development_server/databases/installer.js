import r from"fs";import a from"path";import u from"os";import{promisify as h}from"util";import{pipeline as j}from"stream";import{execFile as x}from"child_process";import k from"../../get_architecture.js";const b=h(j),v=h(x),D={mongodb:"8",postgresql:"17",redis:"7"},z={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},E=()=>{const t=u.platform();if(t==="darwin")return"macos";if(t==="linux")return"linux";throw new Error(`Unsupported platform: ${t}. Please use WSL2 on Windows.`)},F=(t,e,o,s)=>{const i=Date.now();return`https://cdn.joystickjs.com/${t}/${e}/${o}/${s}.tar.gz?t=${i}`},l=async t=>{try{return await r.promises.access(t),!0}catch{return!1}},S=async(t,e)=>{const o=await fetch(t);if(!o.ok)throw new Error(`Failed to download ${t}: ${o.statusText}`);await b(o.body,r.createWriteStream(e))},p=async t=>{try{if(!await l(t))return;const e=await r.promises.readdir(t);for(const o of e){const s=a.join(t,o),i=await r.promises.stat(s);i.isFile()?await r.promises.chmod(s,"755"):i.isDirectory()&&await p(s)}}catch{}},W=async t=>{const e=E(),o=k(),s=a.join(u.homedir(),".joystick","databases",t),i=a.join(s,o);if(await l(i))return;const f=D[t];if(!f)throw new Error(`Unsupported database: ${t}`);const _=F(t,f,e,o),y=`${t}.tar.gz`,n=a.join(s,y),c=z[t]||t;process.loader.print(`${c} (${o}) not found. Downloading... (this may take a few minutes)`),await r.promises.mkdir(s,{recursive:!0}),await S(_,n),process.loader.print(`Installing ${c} (${o})...`),await v("tar",["-xzf",n,"-C",s]),await r.promises.unlink(n);const m=a.join(s,o);if(await l(m))await p(m);else{await r.promises.mkdir(i,{recursive:!0});const $=await r.promises.readdir(s);for(const d of $){const w=a.join(s,d),g=a.join(i,d);(await r.promises.stat(w)).isDirectory()||await r.promises.rename(w,g)}await p(i)}process.loader.print(`${c} (${o}) installed!`)};var Q=W;export{Q as default};
//# sourceMappingURL=installer.js.map
