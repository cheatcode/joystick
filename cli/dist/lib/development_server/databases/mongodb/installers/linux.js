import o from"fs";import t from"path";import k from"os";import{promisify as w}from"util";import{pipeline as v}from"stream";import{execFile as D}from"child_process";const B=w(v),h=w(D),M=async(e=null)=>{const n=t.join(k.homedir(),".joystick","databases","mongodb"),i=t.join(n,"bin"),a=t.join(i,"bin");if(await z(n))return;await C(n,i,a);const p="https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2204-7.0.2.tgz",l="https://downloads.mongodb.com/compass/mongosh-2.2.12-linux-x64.tgz",u=t.basename(new URL(p).pathname),m=t.join(n,u),b=t.basename(new URL(l).pathname),c=t.join(n,b);process.loader.print("MongoDB not found. Downloading... (this may take a few minutes)"),await g(p,m),await g(l,c),process.loader.print("Installing MongoDB..."),await h("tar",["-xzf",m,"-C",n]);const d=(await o.promises.readdir(n)).find(s=>s.startsWith("mongodb-"));if(!d)throw new Error("Could not find extracted MongoDB directory");const f=t.join(n,d,"bin"),y=await o.promises.readdir(f);for(const s of y)await o.promises.rename(t.join(f,s),t.join(a,s));const r=t.join(n,"mongosh_temp");await o.promises.mkdir(r,{recursive:!0}),await h("tar",["-xzf",c,"-C",r]);const _=(await o.promises.readdir(r)).find(s=>s.startsWith("mongosh-"));if(!_)throw new Error("Could not find mongosh directory in extracted contents");const x=t.join(r,_,"bin","mongosh"),j=t.join(a,"mongosh");await o.promises.copyFile(x,j),await o.promises.unlink(m),await o.promises.unlink(c),await o.promises.rm(r,{recursive:!0,force:!0}),await o.promises.rm(t.join(n,d),{recursive:!0,force:!0}),await F(a),process.loader.print("MongoDB and MongoDB Shell installed!")},g=async(e,n)=>{const i=await fetch(e);if(!i.ok)throw new Error(`Failed to download: ${i.statusText}`);await B(i.body,o.createWriteStream(n))},z=async e=>{try{return await o.promises.access(e),!0}catch{return!1}},C=async(e,n,i)=>{await o.promises.mkdir(e,{recursive:!0}),await o.promises.mkdir(n,{recursive:!0}),await o.promises.mkdir(i,{recursive:!0})},F=async e=>{const n=await o.promises.readdir(e);for(const i of n)await o.promises.chmod(t.join(e,i),"755")};var I=M;export{I as default};
