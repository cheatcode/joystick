import o from"fs";import i from"path";import k from"os";import{promisify as h}from"util";import{pipeline as v}from"stream";import{execFile as D}from"child_process";const B=h(v),w=h(D),M=async(e=null)=>{const n=i.join(k.homedir(),".joystick","databases","mongodb"),t=i.join(n,"bin"),a=i.join(t,"bin");if(await z(n))return;await C(n,t,a);const p="https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2204-7.0.2.tgz",l="https://downloads.mongodb.com/compass/mongosh-2.2.12-linux-x64.tgz",u=i.basename(new URL(p).pathname),m=i.join(n,u),b=i.basename(new URL(l).pathname),c=i.join(n,b);process.loader.print("MongoDB not found. Downloading... (patience is a virtue\u2014it's chonky)"),await g(p,m),await g(l,c),process.loader.print("Installing MongoDB..."),await w("tar",["-xzf",m,"-C",n]);const d=(await o.promises.readdir(n)).find(r=>r.startsWith("mongodb-"));if(!d)throw new Error("Could not find extracted MongoDB directory");const f=i.join(n,d,"bin"),y=await o.promises.readdir(f);for(const r of y)await o.promises.rename(i.join(f,r),i.join(a,r));const s=i.join(n,"mongosh_temp");await o.promises.mkdir(s,{recursive:!0}),await w("tar",["-xzf",c,"-C",s]);const _=(await o.promises.readdir(s)).find(r=>r.startsWith("mongosh-"));if(!_)throw new Error("Could not find mongosh directory in extracted contents");const x=i.join(s,_,"bin","mongosh"),j=i.join(a,"mongosh");await o.promises.copyFile(x,j),await o.promises.unlink(m),await o.promises.unlink(c),await o.promises.rm(s,{recursive:!0,force:!0}),await o.promises.rm(i.join(n,d),{recursive:!0,force:!0}),await F(a),process.loader.print("MongoDB and MongoDB Shell installed!")},g=async(e,n)=>{const t=await fetch(e);if(!t.ok)throw new Error(`Failed to download: ${t.statusText}`);await B(t.body,o.createWriteStream(n))},z=async e=>{try{return await o.promises.access(e),!0}catch{return!1}},C=async(e,n,t)=>{await o.promises.mkdir(e,{recursive:!0}),await o.promises.mkdir(n,{recursive:!0}),await o.promises.mkdir(t,{recursive:!0})},F=async e=>{const n=await o.promises.readdir(e);for(const t of n)await o.promises.chmod(i.join(e,t),"755")};var I=M;export{I as default};
