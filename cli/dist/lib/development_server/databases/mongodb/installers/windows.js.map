{
  "version": 3,
  "sources": ["../../../../../../src/lib/development_server/databases/mongodb/installers/windows.js"],
  "sourcesContent": ["import fs from 'fs';\nimport path from 'path';\nimport os from 'os';\nimport { promisify } from 'util';\nimport { pipeline } from 'stream';\nimport { execFile } from 'child_process';\n\nconst stream_pipeline = promisify(pipeline);\nconst exec_file_async = promisify(execFile);\n\nconst download_mongodb_windows = async () => {\n  const base_directory = path.join(os.homedir(), '.joystick', 'databases', 'mongodb');\n  const bin_directory = path.join(base_directory, 'bin');\n\n  if (await check_if_file_exists(base_directory)) {\n    return;\n  }\n\n  await create_directories(base_directory, bin_directory);\n\n  const download_url = 'https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-7.0.2.zip';\n  const file_name = path.basename(new URL(download_url).pathname);\n  const file_path = path.join(base_directory, file_name);\n\n  if (await check_if_file_exists(file_path)) {\n    return;\n  }\n\n  process.loader.print('MongoDB not found. Downloading... (this may take a few minutes)');\n  await download_file(download_url, file_path);\n  process.loader.print('Installing MongoDB...');\n  \n  const temp_directory = path.join(base_directory, 'temp');\n  await exec_file_async('powershell', ['Expand-Archive', '-Path', file_path, '-DestinationPath', temp_directory]);\n  const extracted_folder = (await fs.promises.readdir(temp_directory))[0];\n  const extracted_path = path.join(temp_directory, extracted_folder);\n  \n  // Remove existing bin directory if it exists\n  if (await check_if_file_exists(bin_directory)) {\n    await fs.promises.rm(bin_directory, { recursive: true, force: true });\n  }\n  \n  // Copy the entire contents of the extracted folder to the bin directory\n  await fs.promises.cp(extracted_path, bin_directory, { recursive: true });\n\n  // Download and install mongosh\n  const mongosh_url = 'https://downloads.mongodb.com/compass/mongosh-2.2.12-win32-x64.zip';\n  const mongosh_file_path = path.join(base_directory, 'mongosh.zip');\n  await download_file(mongosh_url, mongosh_file_path);\n  \n  const mongosh_temp_directory = path.join(base_directory, 'mongosh_temp');\n  await exec_file_async('powershell', ['Expand-Archive', '-Path', mongosh_file_path, '-DestinationPath', mongosh_temp_directory]);\n  \n  const mongosh_extracted_folder = (await fs.promises.readdir(mongosh_temp_directory))[0];\n  const mongosh_bin_path = path.join(mongosh_temp_directory, mongosh_extracted_folder, 'bin', 'mongosh.exe');\n  \n  await fs.promises.copyFile(mongosh_bin_path, path.join(bin_directory, 'bin', 'mongosh.exe'));\n  \n  // Clean up temporary files\n  await fs.promises.unlink(file_path);\n  await fs.promises.unlink(mongosh_file_path);\n  await fs.promises.rm(temp_directory, { recursive: true, force: true });\n  await fs.promises.rm(mongosh_temp_directory, { recursive: true, force: true });\n\n  process.loader.print('MongoDB installed!');\n};\n\nconst download_file = async (url, file_path) => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`Failed to download: ${response.statusText}`);\n  }\n  await stream_pipeline(response.body, fs.createWriteStream(file_path));\n};\n\nconst check_if_file_exists = async (file_path) => {\n  try {\n    await fs.promises.access(file_path);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nconst create_directories = async (base_directory, bin_directory) => {\n  await fs.promises.mkdir(base_directory, { recursive: true });\n  await fs.promises.mkdir(bin_directory, { recursive: true });\n};\n\nexport default download_mongodb_windows;"],
  "mappings": "AAAA,OAAOA,MAAQ,KACf,OAAOC,MAAU,OACjB,OAAOC,MAAQ,KACf,OAAS,aAAAC,MAAiB,OAC1B,OAAS,YAAAC,MAAgB,SACzB,OAAS,YAAAC,MAAgB,gBAEzB,MAAMC,EAAkBH,EAAUC,CAAQ,EACpCG,EAAkBJ,EAAUE,CAAQ,EAEpCG,EAA2B,SAAY,CAC3C,MAAMC,EAAiBR,EAAK,KAAKC,EAAG,QAAQ,EAAG,YAAa,YAAa,SAAS,EAC5EQ,EAAgBT,EAAK,KAAKQ,EAAgB,KAAK,EAErD,GAAI,MAAME,EAAqBF,CAAc,EAC3C,OAGF,MAAMG,EAAmBH,EAAgBC,CAAa,EAEtD,MAAMG,EAAe,sEACfC,EAAYb,EAAK,SAAS,IAAI,IAAIY,CAAY,EAAE,QAAQ,EACxDE,EAAYd,EAAK,KAAKQ,EAAgBK,CAAS,EAErD,GAAI,MAAMH,EAAqBI,CAAS,EACtC,OAGF,QAAQ,OAAO,MAAM,iEAAiE,EACtF,MAAMC,EAAcH,EAAcE,CAAS,EAC3C,QAAQ,OAAO,MAAM,uBAAuB,EAE5C,MAAME,EAAiBhB,EAAK,KAAKQ,EAAgB,MAAM,EACvD,MAAMF,EAAgB,aAAc,CAAC,iBAAkB,QAASQ,EAAW,mBAAoBE,CAAc,CAAC,EAC9G,MAAMC,GAAoB,MAAMlB,EAAG,SAAS,QAAQiB,CAAc,GAAG,CAAC,EAChEE,EAAiBlB,EAAK,KAAKgB,EAAgBC,CAAgB,EAG7D,MAAMP,EAAqBD,CAAa,GAC1C,MAAMV,EAAG,SAAS,GAAGU,EAAe,CAAE,UAAW,GAAM,MAAO,EAAK,CAAC,EAItE,MAAMV,EAAG,SAAS,GAAGmB,EAAgBT,EAAe,CAAE,UAAW,EAAK,CAAC,EAGvE,MAAMU,EAAc,qEACdC,EAAoBpB,EAAK,KAAKQ,EAAgB,aAAa,EACjE,MAAMO,EAAcI,EAAaC,CAAiB,EAElD,MAAMC,EAAyBrB,EAAK,KAAKQ,EAAgB,cAAc,EACvE,MAAMF,EAAgB,aAAc,CAAC,iBAAkB,QAASc,EAAmB,mBAAoBC,CAAsB,CAAC,EAE9H,MAAMC,GAA4B,MAAMvB,EAAG,SAAS,QAAQsB,CAAsB,GAAG,CAAC,EAChFE,EAAmBvB,EAAK,KAAKqB,EAAwBC,EAA0B,MAAO,aAAa,EAEzG,MAAMvB,EAAG,SAAS,SAASwB,EAAkBvB,EAAK,KAAKS,EAAe,MAAO,aAAa,CAAC,EAG3F,MAAMV,EAAG,SAAS,OAAOe,CAAS,EAClC,MAAMf,EAAG,SAAS,OAAOqB,CAAiB,EAC1C,MAAMrB,EAAG,SAAS,GAAGiB,EAAgB,CAAE,UAAW,GAAM,MAAO,EAAK,CAAC,EACrE,MAAMjB,EAAG,SAAS,GAAGsB,EAAwB,CAAE,UAAW,GAAM,MAAO,EAAK,CAAC,EAE7E,QAAQ,OAAO,MAAM,oBAAoB,CAC3C,EAEMN,EAAgB,MAAOS,EAAKV,IAAc,CAC9C,MAAMW,EAAW,MAAM,MAAMD,CAAG,EAChC,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,uBAAuBA,EAAS,UAAU,EAAE,EAE9D,MAAMpB,EAAgBoB,EAAS,KAAM1B,EAAG,kBAAkBe,CAAS,CAAC,CACtE,EAEMJ,EAAuB,MAAOI,GAAc,CAChD,GAAI,CACF,aAAMf,EAAG,SAAS,OAAOe,CAAS,EAC3B,EACT,MAAQ,CACN,MAAO,EACT,CACF,EAEMH,EAAqB,MAAOH,EAAgBC,IAAkB,CAClE,MAAMV,EAAG,SAAS,MAAMS,EAAgB,CAAE,UAAW,EAAK,CAAC,EAC3D,MAAMT,EAAG,SAAS,MAAMU,EAAe,CAAE,UAAW,EAAK,CAAC,CAC5D,EAEA,IAAOiB,EAAQnB",
  "names": ["fs", "path", "os", "promisify", "pipeline", "execFile", "stream_pipeline", "exec_file_async", "download_mongodb_windows", "base_directory", "bin_directory", "check_if_file_exists", "create_directories", "download_url", "file_name", "file_path", "download_file", "temp_directory", "extracted_folder", "extracted_path", "mongosh_url", "mongosh_file_path", "mongosh_temp_directory", "mongosh_extracted_folder", "mongosh_bin_path", "url", "response", "windows_default"]
}
