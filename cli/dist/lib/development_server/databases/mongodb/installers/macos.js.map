{
  "version": 3,
  "sources": ["../../../../../../src/lib/development_server/databases/mongodb/installers/macos.js"],
  "sourcesContent": ["import fs from 'fs';\nimport path from 'path';\nimport os from 'os';\nimport { promisify } from 'util';\nimport { pipeline } from 'stream';\nimport { execFile } from 'child_process';\n\nconst streamPipeline = promisify(pipeline);\nconst execFileAsync = promisify(execFile);\n\nconst download_mongodb_macos = async (version_path = null) => {\n  const base_directory = path.join(os.homedir(), '.joystick', 'databases', 'mongodb');\n  const bin_directory = path.join(base_directory, 'bin');\n  const bin_bin_directory = path.join(bin_directory, 'bin');\n\n  if (await check_if_file_exists(base_directory)) {\n    return;\n  }\n\n  await create_directories(base_directory, bin_directory, bin_bin_directory);\n\n  const cpu_info = await get_cpu_info();\n  const is_arm = cpu_info.includes('ARM');\n  \n  const mongodb_url = is_arm\n    ? 'https://fastdl.mongodb.org/osx/mongodb-macos-arm64-7.0.2.tgz'\n    : 'https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-7.0.2.tgz';\n\n  const mongosh_url = is_arm\n    ? 'https://downloads.mongodb.com/compass/mongosh-2.2.12-darwin-arm64.zip'\n    : 'https://downloads.mongodb.com/compass/mongosh-2.2.12-darwin-x64.zip';\n\n  const mongodb_file_name = path.basename(new URL(mongodb_url).pathname);\n  const mongodb_file_path = path.join(base_directory, mongodb_file_name);\n\n  const mongosh_file_name = path.basename(new URL(mongosh_url).pathname);\n  const mongosh_file_path = path.join(base_directory, mongosh_file_name);\n\n  process.loader.print('MongoDB not found. Downloading... (this may take a few minutes)');\n  await download_file(mongodb_url, mongodb_file_path);\n  await download_file(mongosh_url, mongosh_file_path);\n\n  process.loader.print('Installing MongoDB...');\n  \n  // Extract MongoDB\n  await execFileAsync('tar', ['-xzf', mongodb_file_path, '-C', bin_directory, '--strip-components=1']);\n  \n  // Extract mongosh\n  const mongosh_temp_directory = path.join(base_directory, 'mongosh_temp');\n  await fs.promises.mkdir(mongosh_temp_directory, { recursive: true });\n  await execFileAsync('unzip', ['-q', mongosh_file_path, '-d', mongosh_temp_directory]);\n  \n  // Find and copy mongosh executable\n  const mongosh_contents = await fs.promises.readdir(mongosh_temp_directory);\n  const mongosh_dir = mongosh_contents.find(item => item.startsWith('mongosh-'));\n  if (!mongosh_dir) {\n    throw new Error('Could not find mongosh directory in extracted contents');\n  }\n  \n  const mongosh_bin_path = path.join(mongosh_temp_directory, mongosh_dir, 'bin', 'mongosh');\n  const final_mongosh_path = path.join(bin_bin_directory, 'mongosh');\n  await fs.promises.copyFile(mongosh_bin_path, final_mongosh_path);\n\n  // Clean up\n  await fs.promises.unlink(mongodb_file_path);\n  await fs.promises.unlink(mongosh_file_path);\n  await fs.promises.rm(mongosh_temp_directory, { recursive: true, force: true });\n\n  await make_file_executable(bin_directory);\n  await make_file_executable(bin_bin_directory);\n  process.loader.print('MongoDB installed!');\n};\n\nconst download_file = async (url, file_path) => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`Failed to download: ${response.statusText}`);\n  }\n  await streamPipeline(response.body, fs.createWriteStream(file_path));\n};\n\nconst check_if_file_exists = async (file_path) => {\n  try {\n    await fs.promises.access(file_path);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nconst get_cpu_info = async () => {\n  const { stdout } = await execFileAsync('sysctl', ['-n', 'machdep.cpu.brand_string']);\n  return stdout.trim();\n};\n\nconst create_directories = async (base_directory, bin_directory, bin_bin_directory) => {\n  await fs.promises.mkdir(base_directory, { recursive: true });\n  await fs.promises.mkdir(bin_directory, { recursive: true });\n  await fs.promises.mkdir(bin_bin_directory, { recursive: true });\n};\n\nconst make_file_executable = async (directory) => {\n  const files = await fs.promises.readdir(directory);\n  for (const file of files) {\n    await fs.promises.chmod(path.join(directory, file), '755');\n  }\n};\n\nexport default download_mongodb_macos;"],
  "mappings": "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",
  "names": ["fs", "path", "os", "promisify", "pipeline", "execFile", "streamPipeline", "execFileAsync", "download_mongodb_macos", "version_path", "base_directory", "bin_directory", "bin_bin_directory", "check_if_file_exists", "create_directories", "is_arm", "get_cpu_info", "mongodb_url", "mongosh_url", "mongodb_file_name", "mongodb_file_path", "mongosh_file_name", "mongosh_file_path", "download_file", "mongosh_temp_directory", "mongosh_dir", "item", "mongosh_bin_path", "final_mongosh_path", "make_file_executable", "url", "file_path", "response", "stdout", "directory", "files", "file", "macos_default"]
}
