{
  "version": 3,
  "sources": ["../../../../../../src/lib/development_server/databases/mongodb/installers/linux.js"],
  "sourcesContent": ["import fs from 'fs';\nimport path from 'path';\nimport os from 'os';\nimport { promisify } from 'util';\nimport { pipeline } from 'stream';\nimport { execFile } from 'child_process';\n\nconst streamPipeline = promisify(pipeline);\nconst execFileAsync = promisify(execFile);\n\nconst download_mongodb_linux = async (version_path = null) => {\n  const base_directory = path.join(os.homedir(), '.joystick', 'databases', 'mongodb');\n  const bin_directory = path.join(base_directory, 'bin');\n  const bin_bin_directory = path.join(bin_directory, 'bin');\n\n  if (await check_if_file_exists(base_directory)) {\n    return;\n  }\n\n  await create_directories(base_directory, bin_directory, bin_bin_directory);\n\n  const mongodb_url = 'https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2204-7.0.2.tgz';\n  const mongosh_url = 'https://downloads.mongodb.com/compass/mongosh-2.2.12-linux-x64.tgz';\n\n  const mongodb_file_name = path.basename(new URL(mongodb_url).pathname);\n  const mongodb_file_path = path.join(base_directory, mongodb_file_name);\n\n  const mongosh_file_name = path.basename(new URL(mongosh_url).pathname);\n  const mongosh_file_path = path.join(base_directory, mongosh_file_name);\n\n  process.loader.print('MongoDB not found. Downloading... (this may take a few minutes)');\n  await download_file(mongodb_url, mongodb_file_path);\n  await download_file(mongosh_url, mongosh_file_path);\n\n  process.loader.print('Installing MongoDB...');\n  \n  // Extract MongoDB\n  await execFileAsync('tar', ['-xzf', mongodb_file_path, '-C', base_directory]);\n  const mongodb_extracted_dir = (await fs.promises.readdir(base_directory)).find(dir => dir.startsWith('mongodb-'));\n  if (!mongodb_extracted_dir) {\n    throw new Error('Could not find extracted MongoDB directory');\n  }\n  const mongodb_bin_path = path.join(base_directory, mongodb_extracted_dir, 'bin');\n  \n  // Move MongoDB binaries to bin/bin\n  const mongodb_binaries = await fs.promises.readdir(mongodb_bin_path);\n  for (const binary of mongodb_binaries) {\n    await fs.promises.rename(path.join(mongodb_bin_path, binary), path.join(bin_bin_directory, binary));\n  }\n  \n  // Extract mongosh\n  const mongosh_temp_directory = path.join(base_directory, 'mongosh_temp');\n  await fs.promises.mkdir(mongosh_temp_directory, { recursive: true });\n  await execFileAsync('tar', ['-xzf', mongosh_file_path, '-C', mongosh_temp_directory]);\n  \n  // Find and copy mongosh executable\n  const mongosh_contents = await fs.promises.readdir(mongosh_temp_directory);\n  const mongosh_dir = mongosh_contents.find(item => item.startsWith('mongosh-'));\n  if (!mongosh_dir) {\n    throw new Error('Could not find mongosh directory in extracted contents');\n  }\n  \n  const mongosh_bin_path = path.join(mongosh_temp_directory, mongosh_dir, 'bin', 'mongosh');\n  const final_mongosh_path = path.join(bin_bin_directory, 'mongosh');\n  await fs.promises.copyFile(mongosh_bin_path, final_mongosh_path);\n\n  // Clean up\n  await fs.promises.unlink(mongodb_file_path);\n  await fs.promises.unlink(mongosh_file_path);\n  await fs.promises.rm(mongosh_temp_directory, { recursive: true, force: true });\n  await fs.promises.rm(path.join(base_directory, mongodb_extracted_dir), { recursive: true, force: true });\n\n  await make_file_executable(bin_bin_directory);\n  process.loader.print('MongoDB installed!');\n};\n\nconst download_file = async (url, file_path) => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`Failed to download: ${response.statusText}`);\n  }\n  await streamPipeline(response.body, fs.createWriteStream(file_path));\n};\n\nconst check_if_file_exists = async (file_path) => {\n  try {\n    await fs.promises.access(file_path);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nconst create_directories = async (base_directory, bin_directory, bin_bin_directory) => {\n  await fs.promises.mkdir(base_directory, { recursive: true });\n  await fs.promises.mkdir(bin_directory, { recursive: true });\n  await fs.promises.mkdir(bin_bin_directory, { recursive: true });\n};\n\nconst make_file_executable = async (directory) => {\n  const files = await fs.promises.readdir(directory);\n  for (const file of files) {\n    await fs.promises.chmod(path.join(directory, file), '755');\n  }\n};\n\nexport default download_mongodb_linux;"],
  "mappings": "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",
  "names": ["fs", "path", "os", "promisify", "pipeline", "execFile", "streamPipeline", "execFileAsync", "download_mongodb_linux", "version_path", "base_directory", "bin_directory", "bin_bin_directory", "check_if_file_exists", "create_directories", "mongodb_url", "mongosh_url", "mongodb_file_name", "mongodb_file_path", "mongosh_file_name", "mongosh_file_path", "download_file", "mongodb_extracted_dir", "dir", "mongodb_bin_path", "mongodb_binaries", "binary", "mongosh_temp_directory", "mongosh_dir", "item", "mongosh_bin_path", "final_mongosh_path", "make_file_executable", "url", "file_path", "response", "directory", "files", "file", "linux_default"]
}
