import i from"child_process";import f from"fs";import c from"os";import y from"../../../get_platform_safe_path.js";import u from"../../../get_process_id_from_port.js";import h from"../../../kill_port_process.js";import d from"../../../path_exists.js";const{rename:k,mkdir:w}=f.promises,b=()=>process.platform==="win32"?"mongosh.exe":"mongosh",j=()=>process.platform==="win32"?"mongod.exe":"mongod",$=(o=2610)=>new Promise(t=>{const s=j(),m=`${c.homedir()}/.joystick/databases/mongodb/bin/bin/${s}`,_=["--port",o,"--dbpath",y(`./.joystick/data/mongodb_${o}`),"--replSet",`joystick_${o}`],r=i.spawn(m,_.filter(a=>!!a));r.stdout.on("data",async a=>{const e=a?.toString();if(console.log(e),e.includes("Waiting for connections")){const p=b(),l=`${c.homedir()}/.joystick/databases/mongodb/bin/bin/${p}`;i.exec(`${l} --eval "rs.initiate()" --verbose --port ${o}`,async(n,S,z)=>{n&&!n?.message?.includes("already initialized")&&console.log(n);const g=await u(o);return t(parseInt(g,10))})}}),r.stderr.on("data",async a=>{const e=a.toString();console.log(e)})}),x=async(o=2610)=>{const t=await d(".joystick/data/mongodb"),s=await d(`.joystick/data/mongodb_${o}`);return t&&!s&&await k(".joystick/data/mongodb",`.joystick/data/mongodb_${o}`),s||await w(`.joystick/data/mongodb_${o}`,{recursive:!0}),s},v=async(o=2610)=>{await x(o);try{return await h(o),await $(o)}catch(t){console.warn(t),process.exit(1)}};var D=v;export{D as default};
