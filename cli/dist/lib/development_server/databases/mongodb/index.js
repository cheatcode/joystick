import m from"child_process";import u from"fs";import h from"os";import r from"path";import j from"../../../get_platform_safe_path.js";import k from"../../../get_process_id_from_port.js";import w from"../../../kill_port_process.js";import _ from"../../../path_exists.js";import b from"../../../get_architecture.js";const{rename:x,mkdir:$}=u.promises,v=()=>process.platform==="win32"?"mongosh.exe":"mongosh",S=()=>process.platform==="win32"?"mongod.exe":"mongod",q=(t=2610)=>new Promise(o=>{const s=S(),d=b(),n=r.join(h.homedir(),".joystick","databases","mongodb",d),p=r.join(n,"bin",s),g=["--port",t,"--dbpath",j(`./.joystick/data/mongodb_${t}`),"--quiet","--replSet",`joystick_${t}`],i=m.spawn(p,g.filter(e=>!!e));i.stdout.on("data",async e=>{if((e?.toString()).includes("Waiting for connections")){const l=v(),f=r.join(n,"bin",l);m.exec(`${f} --eval "rs.initiate()" --verbose --port ${t}`,async(a,P,W)=>{a&&!a?.message?.includes("already initialized")&&console.log(a);const y=await k(t);return o(parseInt(y,10))})}}),i.stderr.on("data",async e=>{const c=e.toString();console.log(c)})}),z=async(t=2610)=>{const o=await _(".joystick/data/mongodb"),s=await _(`.joystick/data/mongodb_${t}`);return o&&!s&&await x(".joystick/data/mongodb",`.joystick/data/mongodb_${t}`),s||await $(`.joystick/data/mongodb_${t}`,{recursive:!0}),s},I=async(t=2610)=>{await z(t);try{return await w(t),await q(t)}catch(o){console.warn(o),process.exit(1)}};var K=I;export{K as default};
//# sourceMappingURL=index.js.map
