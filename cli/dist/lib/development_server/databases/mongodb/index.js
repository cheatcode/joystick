import _ from"child_process";import l from"fs";import w from"os";import i from"path";import j from"../../../get_platform_safe_path.js";import k from"../../../get_process_id_from_port.js";import $ from"../../../kill_port_process.js";import p from"../../../path_exists.js";import b from"../../../get_architecture.js";const{rename:x,mkdir:B}=l.promises,v=()=>process.platform==="win32"?"mongosh.exe":"mongosh",D=()=>process.platform==="win32"?"mongod.exe":"mongod",M=(o=2610)=>new Promise((s,e)=>{const g=D(),f=b(),c=i.join(w.homedir(),".joystick","databases","mongodb",f),r=i.join(c,"bin",g),m=["--port",o,"--dbpath",j(`./.joystick/data/mongodb_${o}`),"--quiet","--replSet",`joystick_${o}`];if(!l.existsSync(r))return e(new Error(`MongoDB binary not found at ${r}. Please ensure MongoDB is properly installed.`));console.log(`Starting MongoDB with command: ${r}`),console.log("MongoDB arguments:",m);const n=_.spawn(r,m.filter(t=>!!t));n.on("error",t=>{console.error(`Failed to start MongoDB process: ${t.message}`),console.error(`Binary path: ${r}`),console.error(`Error code: ${t.code}`),e(t)}),n.stdout.on("data",async t=>{if((t?.toString()).includes("Waiting for connections")){const y=v(),u=i.join(c,"bin",y);_.exec(`${u} --eval "rs.initiate()" --verbose --port ${o}`,async(a,P,q)=>{a&&!a?.message?.includes("already initialized")&&console.log(a);const h=await k(o);return s(parseInt(h,10))})}}),n.stderr.on("data",async t=>{const d=t.toString();console.log(d)})}),S=async(o=2610)=>{const s=await p(".joystick/data/mongodb"),e=await p(`.joystick/data/mongodb_${o}`);return s&&!e&&await x(".joystick/data/mongodb",`.joystick/data/mongodb_${o}`),e||await B(`.joystick/data/mongodb_${o}`,{recursive:!0}),e},E=async(o=2610)=>{await S(o);try{return await $(o),await M(o)}catch(s){console.warn(s),process.exit(1)}};var K=E;export{K as default};
//# sourceMappingURL=index.js.map
