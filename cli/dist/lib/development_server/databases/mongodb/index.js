import i from"child_process";import f from"fs";import c from"os";import y from"../../../get_platform_safe_path.js";import u from"../../../get_process_id_from_port.js";import h from"../../../kill_port_process.js";import d from"../../../path_exists.js";const{rename:k,mkdir:w}=f.promises,j=()=>process.platform==="win32"?"mongosh.exe":"mongosh",$=()=>process.platform==="win32"?"mongod.exe":"mongod",x=(t=2610)=>new Promise(o=>{const s=$(),m=`${c.homedir()}/.joystick/databases/mongodb/${s}`,_=["--port",t,"--dbpath",y(`./.joystick/data/mongodb_${t}`),"--quiet","--replSet",`joystick_${t}`],r=i.spawn(m,_.filter(a=>!!a));r.stdout.on("data",async a=>{if((a?.toString()).includes("Waiting for connections")){const p=j(),l=`${c.homedir()}/.joystick/databases/mongodb/${p}`;i.exec(`${l} --eval "rs.initiate()" --verbose --port ${t}`,async(e,S,q)=>{e&&!e?.message?.includes("already initialized")&&console.log(e);const g=await u(t);return o(parseInt(g,10))})}}),r.stderr.on("data",async a=>{const n=a.toString();console.log(n)})}),b=async(t=2610)=>{const o=await d(".joystick/data/mongodb"),s=await d(`.joystick/data/mongodb_${t}`);return o&&!s&&await k(".joystick/data/mongodb",`.joystick/data/mongodb_${t}`),s||await w(`.joystick/data/mongodb_${t}`,{recursive:!0}),s},v=async(t=2610)=>{await b(t);try{return await h(t),await x(t)}catch(o){console.warn(o),process.exit(1)}};var D=v;export{D as default};
//# sourceMappingURL=index.js.map
