import i from"child_process";import l from"fs";import n from"os";import g from"../../../get_platform_safe_path.js";import f from"../../../get_process_id_from_port.js";import y from"../../../kill_port_process.js";import r from"../../../path_exists.js";const{rename:u,mkdir:h}=l.promises,b=()=>process.platform==="win32"?"mongosh.exe":"mongosh",k=()=>process.platform==="win32"?"mongod.exe":"mongod",w=(t=2610)=>new Promise(o=>{const s=k(),c=`${n.homedir()}/.joystick/databases/mongodb/bin/bin/${s}`,m=["--port",t,"--dbpath",g(`./.joystick/data/mongodb_${t}`),"--replSet",`joystick_${t}`];i.spawn(c,m.filter(a=>!!a)).stdout.on("data",async a=>{if((a?.toString()).includes("Waiting for connections")){const d=b(),_=`${n.homedir()}/.joystick/databases/mongodb/bin/bin/${d}`;i.exec(`${_} --eval "rs.initiate()" --verbose --port ${t}`,async(e,S,z)=>{e&&!e?.message?.includes("already initialized")&&console.log(e);const p=await f(t);return o(parseInt(p,10))})}})}),j=async(t=2610)=>{const o=await r(".joystick/data/mongodb"),s=await r(`.joystick/data/mongodb_${t}`);return o&&!s&&await u(".joystick/data/mongodb",`.joystick/data/mongodb_${t}`),s||await h(`.joystick/data/mongodb_${t}`,{recursive:!0}),s},$=async(t=2610)=>{await j(t);try{return await y(t),await w(t)}catch(o){console.warn(o),process.exit(1)}};var D=$;export{D as default};
