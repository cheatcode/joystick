import m from"child_process";import _ from"fs";import w from"os";import i from"path";import j from"../../../get_platform_safe_path.js";import k from"../../../get_process_id_from_port.js";import b from"../../../kill_port_process.js";import p from"../../../path_exists.js";import $ from"../../../get_architecture.js";const{rename:x,mkdir:v}=_.promises,B=()=>process.platform==="win32"?"mongosh.exe":"mongosh",S=()=>process.platform==="win32"?"mongod.exe":"mongod",D=(o=2610)=>new Promise((s,e)=>{const l=S(),g=$(),c=i.join(w.homedir(),".joystick","databases","mongodb",g),r=i.join(c,"bin",l),f=["--port",o,"--dbpath",j(`./.joystick/data/mongodb_${o}`),"--quiet","--replSet",`joystick_${o}`];if(!_.existsSync(r))return e(new Error(`MongoDB binary not found at ${r}. Please ensure MongoDB is properly installed.`));const a=m.spawn(r,f.filter(t=>!!t));a.on("error",t=>{console.error(`Failed to start MongoDB process: ${t.message}`),console.error(`Binary path: ${r}`),console.error(`Error code: ${t.code}`),e(t)}),a.stdout.on("data",async t=>{if((t?.toString()).includes("Waiting for connections")){const y=B(),u=i.join(c,"bin",y);m.exec(`${u} --eval "rs.initiate()" --verbose --port ${o}`,async(n,P,q)=>{n&&!n?.message?.includes("already initialized")&&console.log(n);const h=await k(o);return s(parseInt(h,10))})}}),a.stderr.on("data",async t=>{const d=t.toString();console.log(d)})}),M=async(o=2610)=>{const s=await p(".joystick/data/mongodb"),e=await p(`.joystick/data/mongodb_${o}`);return s&&!e&&await x(".joystick/data/mongodb",`.joystick/data/mongodb_${o}`),e||await v(`.joystick/data/mongodb_${o}`,{recursive:!0}),e},E=async(o=2610)=>{await M(o);try{return await b(o),await D(o)}catch(s){console.warn(s),process.exit(1)}};var K=E;export{K as default};
//# sourceMappingURL=index.js.map
