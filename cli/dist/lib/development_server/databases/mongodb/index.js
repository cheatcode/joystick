import g from"child_process";import c from"fs";import w from"os";import m from"path";import $ from"../../../get_platform_safe_path.js";import j from"../../../get_process_id_from_port.js";import k from"../../../kill_port_process.js";import f from"../../../path_exists.js";import x from"../../../get_architecture.js";const{rename:b,mkdir:B}=c.promises,S=()=>process.platform==="win32"?"mongosh.exe":"mongosh",D=()=>process.platform==="win32"?"mongod.exe":"mongod",v=(o=2610)=>new Promise((s,e)=>{const d=D(),l=x(),a=m.join(w.homedir(),".joystick","databases","mongodb",l),n=m.join(a,"bin",d),_=["--port",o,"--dbpath",$(`./.joystick/data/mongodb_${o}`),"--quiet","--replSet",`joystick_${o}`];if(!c.existsSync(n))return e(new Error(`MongoDB binary not found at ${n}. Please ensure MongoDB is properly installed.`));console.log(`Starting MongoDB with command: ${n}`),console.log("MongoDB arguments:",_),console.log(`Architecture: ${l}`),console.log(`Base path: ${a}`),console.log(`Command: ${d}`),console.log(`Full path exists: ${c.existsSync(n)}`);const r=g.spawn(n,_.filter(t=>!!t));console.log(`Spawned process with PID: ${r.pid}`),r.on("error",t=>{console.error(`Failed to start MongoDB process: ${t.message}`),console.error(`Binary path: ${n}`),console.error(`Error code: ${t.code}`),e(t)}),r.stdout.on("data",async t=>{if((t?.toString()).includes("Waiting for connections")){const u=S(),y=m.join(a,"bin",u);g.exec(`${y} --eval "rs.initiate()" --verbose --port ${o}`,async(i,E,F)=>{i&&!i?.message?.includes("already initialized")&&console.log(i);const h=await j(o);return s(parseInt(h,10))})}}),r.stderr.on("data",async t=>{const p=t.toString();console.log(p)})}),M=async(o=2610)=>{const s=await f(".joystick/data/mongodb"),e=await f(`.joystick/data/mongodb_${o}`);return s&&!e&&await b(".joystick/data/mongodb",`.joystick/data/mongodb_${o}`),e||await B(`.joystick/data/mongodb_${o}`,{recursive:!0}),e},P=async(o=2610)=>{await M(o);try{return await k(o),await v(o)}catch(s){console.warn(s),process.exit(1)}};var K=P;export{K as default};
//# sourceMappingURL=index.js.map
