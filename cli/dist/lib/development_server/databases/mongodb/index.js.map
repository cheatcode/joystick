{
  "version": 3,
  "sources": ["../../../../../src/lib/development_server/databases/mongodb/index.js"],
  "sourcesContent": ["import child_process from \"child_process\";\nimport fs from \"fs\";\nimport os from \"os\";\nimport path from \"path\";\nimport get_platform_safe_path from '../../../get_platform_safe_path.js';\nimport get_process_id_from_port from \"../../../get_process_id_from_port.js\";\nimport kill_port_process from \"../../../kill_port_process.js\";\nimport path_exists from \"../../../path_exists.js\";\nimport get_architecture from \"../../../get_architecture.js\";\n\nconst { rename, mkdir } = fs.promises;\n\nconst get_mongo_shell_command = () => {\n  if (process.platform === 'win32') {\n    return 'mongosh.exe';\n  }\n\n  return 'mongosh';\n};\n\nconst get_mongo_server_command = () => {\n  if (process.platform === 'win32') {\n    return 'mongod.exe';\n  }\n\n  return 'mongod';\n};\n\nconst start_mongodb_process = (mongodb_port = 2610) => {\n  return new Promise((resolve) => {\n    const mongo_server_command = get_mongo_server_command();\n    const architecture = get_architecture();\n    const joystick_mongodb_base_path = path.join(os.homedir(), '.joystick', 'databases', 'mongodb', architecture);\n    const joystick_mongod_path = path.join(joystick_mongodb_base_path, mongo_server_command);\n    const database_process_flags = [\n      '--port',\n      mongodb_port,\n      '--dbpath',\n      get_platform_safe_path(`./.joystick/data/mongodb_${mongodb_port}`),\n      '--quiet',\n      '--replSet',\n      `joystick_${mongodb_port}`,\n    ];\n\n    const database_process = child_process.spawn(\n      joystick_mongod_path,\n      database_process_flags.filter((command) => !!command),\n    );\n\n    database_process.stdout.on('data', async (data) => {\n      const stdout = data?.toString();\n\n      if (stdout.includes('Waiting for connections')) {\n        const mongo_shell_command = get_mongo_shell_command();\n        const joystick_mongo_shell_path = path.join(joystick_mongodb_base_path, mongo_shell_command);\n        child_process.exec(`${joystick_mongo_shell_path} --eval \"rs.initiate()\" --verbose --port ${mongodb_port}`, async (error, _stdout, _stderr) => {\n          if (error && !error?.message?.includes('already initialized')) {\n            console.log(error);\n          }\n\n          const process_id = await get_process_id_from_port(mongodb_port);\n          return resolve(parseInt(process_id, 10));\n        });\n      }\n    });\n\n    database_process.stderr.on('data', async (data) => {\n      const stderr = data.toString();\n      console.log(stderr);\n    });\n  });\n};\n\nconst setup_data_directory = async (mongodb_port = 2610) => {\n  // NOTE: MongoDB was originally started as a standalone server. To enable additional functionality,\n  // we moved to a replica set config which necessitated multiple data directories in order to support\n  // running the same app on multiple ports (a limitation of MongoDB).\n  const legacy_data_directory_exists = await path_exists(\".joystick/data/mongodb\");\n  const data_directory_exists = await path_exists(`.joystick/data/mongodb_${mongodb_port}`);\n\n  if (legacy_data_directory_exists && !data_directory_exists) {\n    await rename('.joystick/data/mongodb', `.joystick/data/mongodb_${mongodb_port}`);\n  }\n\n  if (!data_directory_exists) {\n    await mkdir(`.joystick/data/mongodb_${mongodb_port}`, { recursive: true });\n  }\n\n  return data_directory_exists;\n};\n\nconst start_mongodb = async (mongodb_port = 2610) => {\n  await setup_data_directory(mongodb_port);\n\n  try {\n    await kill_port_process(mongodb_port);\n    const mongo_process_id = await start_mongodb_process(mongodb_port);\n    return mongo_process_id;\n  } catch (exception) {\n    console.warn(exception);\n    process.exit(1);\n  }\n};\n\nexport default start_mongodb;\n"],
  "mappings": "AAAA,OAAOA,MAAmB,gBAC1B,OAAOC,MAAQ,KACf,OAAOC,MAAQ,KACf,OAAOC,MAAU,OACjB,OAAOC,MAA4B,qCACnC,OAAOC,MAA8B,uCACrC,OAAOC,MAAuB,gCAC9B,OAAOC,MAAiB,0BACxB,OAAOC,MAAsB,+BAE7B,KAAM,CAAE,OAAAC,EAAQ,MAAAC,CAAM,EAAIT,EAAG,SAEvBU,EAA0B,IAC1B,QAAQ,WAAa,QAChB,cAGF,UAGHC,EAA2B,IAC3B,QAAQ,WAAa,QAChB,aAGF,SAGHC,EAAwB,CAACC,EAAe,OACrC,IAAI,QAASC,GAAY,CAC9B,MAAMC,EAAuBJ,EAAyB,EAChDK,EAAeT,EAAiB,EAChCU,EAA6Bf,EAAK,KAAKD,EAAG,QAAQ,EAAG,YAAa,YAAa,UAAWe,CAAY,EACtGE,EAAuBhB,EAAK,KAAKe,EAA4BF,CAAoB,EACjFI,EAAyB,CAC7B,SACAN,EACA,WACAV,EAAuB,4BAA4BU,CAAY,EAAE,EACjE,UACA,YACA,YAAYA,CAAY,EAC1B,EAEMO,EAAmBrB,EAAc,MACrCmB,EACAC,EAAuB,OAAQE,GAAY,CAAC,CAACA,CAAO,CACtD,EAEAD,EAAiB,OAAO,GAAG,OAAQ,MAAOE,GAAS,CAGjD,IAFeA,GAAM,SAAS,GAEnB,SAAS,yBAAyB,EAAG,CAC9C,MAAMC,EAAsBb,EAAwB,EAC9Cc,EAA4BtB,EAAK,KAAKe,EAA4BM,CAAmB,EAC3FxB,EAAc,KAAK,GAAGyB,CAAyB,4CAA4CX,CAAY,GAAI,MAAOY,EAAOC,EAASC,IAAY,CACxIF,GAAS,CAACA,GAAO,SAAS,SAAS,qBAAqB,GAC1D,QAAQ,IAAIA,CAAK,EAGnB,MAAMG,EAAa,MAAMxB,EAAyBS,CAAY,EAC9D,OAAOC,EAAQ,SAASc,EAAY,EAAE,CAAC,CACzC,CAAC,CACH,CACF,CAAC,EAEDR,EAAiB,OAAO,GAAG,OAAQ,MAAOE,GAAS,CACjD,MAAMO,EAASP,EAAK,SAAS,EAC7B,QAAQ,IAAIO,CAAM,CACpB,CAAC,CACH,CAAC,EAGGC,EAAuB,MAAOjB,EAAe,OAAS,CAI1D,MAAMkB,EAA+B,MAAMzB,EAAY,wBAAwB,EACzE0B,EAAwB,MAAM1B,EAAY,0BAA0BO,CAAY,EAAE,EAExF,OAAIkB,GAAgC,CAACC,GACnC,MAAMxB,EAAO,yBAA0B,0BAA0BK,CAAY,EAAE,EAG5EmB,GACH,MAAMvB,EAAM,0BAA0BI,CAAY,GAAI,CAAE,UAAW,EAAK,CAAC,EAGpEmB,CACT,EAEMC,EAAgB,MAAOpB,EAAe,OAAS,CACnD,MAAMiB,EAAqBjB,CAAY,EAEvC,GAAI,CACF,aAAMR,EAAkBQ,CAAY,EACX,MAAMD,EAAsBC,CAAY,CAEnE,OAASqB,EAAW,CAClB,QAAQ,KAAKA,CAAS,EACtB,QAAQ,KAAK,CAAC,CAChB,CACF,EAEA,IAAOC,EAAQF",
  "names": ["child_process", "fs", "os", "path", "get_platform_safe_path", "get_process_id_from_port", "kill_port_process", "path_exists", "get_architecture", "rename", "mkdir", "get_mongo_shell_command", "get_mongo_server_command", "start_mongodb_process", "mongodb_port", "resolve", "mongo_server_command", "architecture", "joystick_mongodb_base_path", "joystick_mongod_path", "database_process_flags", "database_process", "command", "data", "mongo_shell_command", "joystick_mongo_shell_path", "error", "_stdout", "_stderr", "process_id", "stderr", "setup_data_directory", "legacy_data_directory_exists", "data_directory_exists", "start_mongodb", "exception", "index_default"]
}
