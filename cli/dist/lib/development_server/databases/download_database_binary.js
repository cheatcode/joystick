import s from"fs";import r from"path";import d from"os";import"https";import{promisify as f}from"util";import{pipeline as v}from"stream";import{execFile as z}from"child_process";const q=f(v),c=f(z),w={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},P=async o=>{if(d.platform()!=="win32"){const t=await s.promises.readdir(o);for(const e of t)await s.promises.chmod(r.join(o,e),"755")}},y=async(o,i,t,e)=>{const p=d.platform();if(o==="redis")if(p==="win32")await c("powershell",["Expand-Archive","-Path",i,"-DestinationPath",e]);else{await c("tar",["-xzf",i,"-C",t,"--strip-components=1"]),await s.promises.unlink(i);const a=r.join(t,"src");await c("make",["-C",a]);const n=r.join(a,"redis-server"),l=r.join(a,"redis-cli");await s.promises.copyFile(n,r.join(e,"redis-server")),await s.promises.copyFile(l,r.join(e,"redis-cli"))}else if(o==="postgresql"&&p==="linux"){await c("tar",["-xzf",i,"-C",t,"--strip-components=1"]),await s.promises.unlink(i);const a=async()=>{const n=["gcc","make","libreadline-dev","zlib1g-dev"];for(const l of n)try{await c("dpkg",["-s",l])}catch{throw console.error(`Required package '${l}' is not installed.`),console.error("Please install the necessary dependencies. For Ubuntu or Debian, run:"),console.error(`sudo apt-get update && sudo apt-get install ${n.join(" ")}`),new Error("Missing dependencies")}};try{await a();const n=r.join(t,"build");await s.promises.mkdir(n,{recursive:!0}),await c("./configure",["--prefix="+e,"--without-icu"],{cwd:t}),await c("make",[],{cwd:t}),await c("make",["install"],{cwd:t}),console.log("PostgreSQL has been successfully built and installed.")}catch(n){throw console.error("Error during PostgreSQL build process:",n),n}}else{if(p==="win32"){const a=r.join(t,"temp");await c("powershell",["Expand-Archive","-Path",i,"-DestinationPath",a]);const n=(await s.promises.readdir(a))[0],l=r.join(a,n);if(await s.promises.access(e).then(()=>!0).catch(()=>!1)&&await s.promises.rm(e,{recursive:!0,force:!0}),await s.promises.cp(l,e,{recursive:!0}),o==="mongodb"){const g=await k("mongodb",null,!0),u=r.join(t,"mongosh.zip");await h(g,u);const m=r.join(t,"mongosh_temp");await c("powershell",["Expand-Archive","-Path",u,"-DestinationPath",m]);const b=(await s.promises.readdir(m))[0],j=r.join(m,b,"bin","mongosh.exe");if(await s.promises.copyFile(j,r.join(e,"bin","mongosh.exe")),await s.promises.unlink(u),await s.promises.rm(m,{recursive:!0,force:!0}),!await s.promises.access(r.join(e,"bin","mongosh.exe")).then(()=>!0).catch(()=>!1))throw new Error("Required file mongosh.exe not found in the extracted MongoDB files.")}await s.promises.rm(a,{recursive:!0,force:!0})}else await c("tar",["-xzf",i,"-C",e,"--strip-components=1"]);await s.promises.unlink(i)}},h=async(o,i)=>{const t=await fetch(o);if(!t.ok)throw new Error(`Failed to download: ${t.statusText}`);await q(t.body,s.createWriteStream(i))},x=async o=>{try{return await s.promises.access(o),!0}catch{return!1}},D=async()=>{if(d.platform()==="darwin"){const{stdout:o}=await c("sysctl",["-n","machdep.cpu.brand_string"]);return o.trim()}return d.arch()},k=async(o,i,t=!1)=>{if(i){const n=await s.promises.readFile(i,"utf-8");return JSON.parse(n)[o].url}const e=d.platform(),p=await D(),a={mongodb:{win32:{main:"https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-7.0.2.zip",mongosh:"https://downloads.mongodb.com/compass/mongosh-2.0.2-win32-x64.zip"},darwin:p.includes("ARM")?"https://fastdl.mongodb.org/osx/mongodb-macos-arm64-7.0.2.tgz":"https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-7.0.2.tgz",linux:"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2204-7.0.2.tgz"},redis:{win32:"https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.zip",darwin:"https://download.redis.io/releases/redis-7.2.3.tar.gz",linux:"https://download.redis.io/releases/redis-7.2.3.tar.gz"},postgresql:{win32:"https://get.enterprisedb.com/postgresql/postgresql-16.0-1-windows-x64-binaries.zip",darwin:"https://get.enterprisedb.com/postgresql/postgresql-16.0-1-osx-binaries.zip",linux:"https://ftp.postgresql.org/pub/source/v16.0/postgresql-16.0.tar.gz"}};return e==="win32"&&o==="mongodb"?t?a.mongodb.win32.mongosh:a.mongodb.win32.main:a[o][e]},F=async(o,i)=>{await s.promises.mkdir(o,{recursive:!0}),await s.promises.mkdir(i,{recursive:!0})},E=async(o,i=null)=>{const t=r.join(d.homedir(),".joystick","databases",o),e=r.join(t,"bin");if(await x(t))return;await F(t,e);const p=await k(o,i),a=r.basename(new URL(p).pathname),n=r.join(t,a);await x(n)||(process.loader.print(`${w[o]} not found. Downloading... (patience is a virtue\u2014this may take a few minutes)`),await h(p,n),process.loader.print(`Installing ${w[o]}... (more patience\u2014a coffee, perhaps?)`),await y(o,n,t,e),await P(e),process.loader.print(`${w[o]} installed!`))};var B=E;export{B as default};
