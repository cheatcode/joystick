import t from"fs";import i from"path";import d from"os";import"https";import{promisify as h}from"util";import{pipeline as k}from"stream";import{execFile as q}from"child_process";const P=h(k),u=h(q),w={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},D=async o=>{if(d.platform()!=="win32"){const s=await t.promises.readdir(o);for(const e of s)await t.promises.chmod(i.join(o,e),"755")}},F=async(o,r,s,e)=>{const c=d.platform();if(o!=="redis"){if(c==="win32"){const n=i.join(s,"temp");await u("powershell",["Expand-Archive","-Path",r,"-DestinationPath",n]);const a=(await t.promises.readdir(n))[0],g=i.join(n,a);await t.promises.access(e).then(()=>!0).catch(()=>!1)&&await t.promises.rm(e,{recursive:!0,force:!0});const l=i.join(e,"bin");await t.promises.mkdir(l,{recursive:!0});const j=i.join(g,"bin");await t.promises.cp(j,l,{recursive:!0});const y=["share","lib"];for(const f of y){const p=i.join(g,f),m=i.join(s,f);await t.promises.access(p).then(()=>!0).catch(()=>!1)&&await t.promises.cp(p,m,{recursive:!0})}if(o==="mongodb"){const f=await _("mongodb",null,!0),p=i.join(s,"mongosh.zip");await x(f,p);const m=i.join(s,"mongosh_temp");await u("powershell",["Expand-Archive","-Path",p,"-DestinationPath",m]);const z=(await t.promises.readdir(m))[0],v=i.join(m,z,"bin","mongosh.exe");if(await t.promises.copyFile(v,i.join(l,"mongosh.exe")),await t.promises.unlink(p),await t.promises.rm(m,{recursive:!0,force:!0}),!await t.promises.access(i.join(l,"mongosh.exe")).then(()=>!0).catch(()=>!1))throw new Error("Required file mongosh.exe not found in the extracted MongoDB files.")}await t.promises.rm(n,{recursive:!0,force:!0})}else await u("tar",["-xzf",r,"-C",e,"--strip-components=1"]);await t.promises.unlink(r)}},x=async(o,r)=>{const s=await fetch(o);if(!s.ok)throw new Error(`Failed to download: ${s.statusText}`);await P(s.body,t.createWriteStream(r))},b=async o=>{try{return await t.promises.access(o),!0}catch{return!1}},R=async()=>{if(d.platform()==="darwin"){const{stdout:o}=await u("sysctl",["-n","machdep.cpu.brand_string"]);return o.trim()}return d.arch()},_=async(o,r,s=!1)=>{if(r){const a=await t.promises.readFile(r,"utf-8");return JSON.parse(a)[o].url}const e=d.platform(),c=await R(),n={mongodb:{win32:{main:"https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-6.0.5.zip",mongosh:"https://downloads.mongodb.com/compass/mongosh-1.8.0-win32-x64.zip"},darwin:c.includes("ARM")?"https://fastdl.mongodb.org/osx/mongodb-macos-arm64-6.0.5.tgz":"https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-6.0.5.tgz",linux:"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2004-6.0.5.tgz"},redis:{win32:"https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.zip",darwin:"https://download.redis.io/releases/redis-6.2.6.tar.gz",linux:"https://download.redis.io/releases/redis-6.2.6.tar.gz"},postgresql:{win32:"https://get.enterprisedb.com/postgresql/postgresql-14.7-1-windows-x64-binaries.zip",darwin:"https://get.enterprisedb.com/postgresql/postgresql-14.7-1-osx-binaries.zip",linux:"https://ftp.postgresql.org/pub/source/v14.7/postgresql-14.7.tar.gz"}};return e==="win32"&&o==="mongodb"?s?n.mongodb.win32.mongosh:n.mongodb.win32.main:n[o][e]},A=async(o,r)=>{await t.promises.mkdir(o,{recursive:!0}),await t.promises.mkdir(r,{recursive:!0})},E=async(o,r=null)=>{const s=i.join(d.homedir(),".joystick","databases",o),e=i.join(s,"bin");if(await b(s))return;await A(s,e);const c=await _(o,r),n=i.basename(new URL(c).pathname),a=i.join(s,n);await b(a)||(process.loader.print(`${w[o]} not found. Downloading... (patience is a)`),await x(c,a),process.loader.print(`Installing ${w[o]}...`),await F(o,a,s,e),await D(e),process.loader.print(`${w[o]} installed!`))};var N=E;export{N as default};
