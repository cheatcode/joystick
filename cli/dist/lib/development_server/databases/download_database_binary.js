import t from"fs";import i from"path";import m from"os";import"https";import{promisify as h}from"util";import{pipeline as y}from"stream";import{execFile as k}from"child_process";const q=h(y),c=h(k),g={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},F=async o=>{if(m.platform()!=="win32"){const s=await t.promises.readdir(o);for(const r of s)await t.promises.chmod(i.join(o,r),"755")}},P=async(o,e,s,r)=>{const p=m.platform();if(o==="redis")if(p==="win32")await c("powershell",["Expand-Archive","-Path",e,"-DestinationPath",r]);else{await c("tar",["-xzf",e,"-C",s,"--strip-components=1"]),await t.promises.unlink(e);const n=i.join(s,"src");await c("make",["-C",n]);const a=i.join(n,"redis-server"),d=i.join(n,"redis-cli");await t.promises.copyFile(a,i.join(r,"redis-server")),await t.promises.copyFile(d,i.join(r,"redis-cli"))}else{if(p==="win32"){const n=i.join(s,"temp");await c("powershell",["Expand-Archive","-Path",e,"-DestinationPath",n]);const a=(await t.promises.readdir(n))[0],d=i.join(n,a,"bin");await t.promises.access(r).then(()=>!0).catch(()=>!1)&&await t.promises.rm(r,{recursive:!0,force:!0});const l=i.join(r,"bin");await t.promises.mkdir(l,{recursive:!0});const _=await t.promises.readdir(d);for(const w of _)await t.promises.copyFile(i.join(d,w),i.join(l,w));if(o==="mongodb"){const w=await j("mongodb",null,!0),u=i.join(s,"mongosh.zip");await x(w,u);const f=i.join(s,"mongosh_temp");await c("powershell",["Expand-Archive","-Path",u,"-DestinationPath",f]);const z=(await t.promises.readdir(f))[0],v=i.join(f,z,"bin","mongosh.exe");if(await t.promises.copyFile(v,i.join(l,"mongosh.exe")),await t.promises.unlink(u),await t.promises.rm(f,{recursive:!0,force:!0}),!await t.promises.access(i.join(l,"mongosh.exe")).then(()=>!0).catch(()=>!1))throw new Error("Required file mongosh.exe not found in the extracted MongoDB files.")}await t.promises.rm(n,{recursive:!0,force:!0})}else await c("tar",["-xzf",e,"-C",r,"--strip-components=1"]);await t.promises.unlink(e)}},x=async(o,e)=>{const s=await fetch(o);if(!s.ok)throw new Error(`Failed to download: ${s.statusText}`);await q(s.body,t.createWriteStream(e))},b=async o=>{try{return await t.promises.access(o),!0}catch{return!1}},D=async()=>{if(m.platform()==="darwin"){const{stdout:o}=await c("sysctl",["-n","machdep.cpu.brand_string"]);return o.trim()}return m.arch()},j=async(o,e,s=!1)=>{if(e){const a=await t.promises.readFile(e,"utf-8");return JSON.parse(a)[o].url}const r=m.platform(),p=await D(),n={mongodb:{win32:{main:"https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-6.0.5.zip",mongosh:"https://downloads.mongodb.com/compass/mongosh-1.8.0-win32-x64.zip"},darwin:p.includes("ARM")?"https://fastdl.mongodb.org/osx/mongodb-macos-arm64-6.0.5.tgz":"https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-6.0.5.tgz",linux:"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2004-6.0.5.tgz"},redis:{win32:"https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.zip",darwin:"https://download.redis.io/releases/redis-6.2.6.tar.gz",linux:"https://download.redis.io/releases/redis-6.2.6.tar.gz"},postgresql:{win32:"https://get.enterprisedb.com/postgresql/postgresql-14.7-1-windows-x64-binaries.zip",darwin:"https://get.enterprisedb.com/postgresql/postgresql-14.7-1-osx-binaries.zip",linux:"https://ftp.postgresql.org/pub/source/v14.7/postgresql-14.7.tar.gz"}};return r==="win32"&&o==="mongodb"?s?n.mongodb.win32.mongosh:n.mongodb.win32.main:n[o][r]},A=async(o,e)=>{await t.promises.mkdir(o,{recursive:!0}),await t.promises.mkdir(e,{recursive:!0})},E=async(o,e=null)=>{const s=i.join(m.homedir(),".joystick","databases",o),r=i.join(s,"bin");if(await b(s))return;await A(s,r);const p=await j(o,e),n=i.basename(new URL(p).pathname),a=i.join(s,n);await b(a)||(process.loader.print(`${g[o]} not found. Downloading...`),await x(p,a),process.loader.print(`Installing ${g[o]}...`),await P(o,a,s,r),await F(r),process.loader.print(`${g[o]} installed!`))};var J=E;export{J as default};
