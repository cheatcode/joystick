import s from"fs";import o from"path";import l from"os";import"https";import{promisify as u}from"util";import{pipeline as h}from"stream";import{execFile as x}from"child_process";const j=u(h),p=u(x),f={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},b=async t=>{if(l.platform()!=="win32"){const r=await s.promises.readdir(t);for(const i of r)await s.promises.chmod(o.join(t,i),"755")}},v=async(t,e,r,i)=>{const c=l.platform();await s.promises.access(i).then(()=>!0).catch(()=>!1)&&await s.promises.rm(i,{recursive:!0,force:!0}),await s.promises.mkdir(i,{recursive:!0});const a=o.join(r,"temp");if(await s.promises.mkdir(a,{recursive:!0}),t==="redis")if(c==="win32")await p("powershell",["Expand-Archive","-Path",e,"-DestinationPath",i]);else{await p("tar",["-xzf",e,"-C",a,"--strip-components=1"]);const n=o.join(a,"src");await p("make",["-C",n]);const d=o.join(n,"redis-server"),w=o.join(n,"redis-cli");await s.promises.copyFile(d,o.join(i,"redis-server")),await s.promises.copyFile(w,o.join(i,"redis-cli"))}else if(t==="postgresql"){c==="win32"?await p("powershell",["Expand-Archive","-Path",e,"-DestinationPath",a]):await p("tar",["-xzf",e,"-C",a]);const n=(await s.promises.readdir(a))[0],d=o.join(a,n,"bin"),w=await s.promises.readdir(d);for(const m of w)await s.promises.copyFile(o.join(d,m),o.join(i,m));if(!await s.promises.access(o.join(i,"postmaster")).then(()=>!0).catch(()=>!1)){const m=o.join(i,"postgres");await s.promises.access(m).then(()=>!0).catch(()=>!1)&&await s.promises.symlink(m,o.join(i,"postmaster"))}}else if(c==="win32"){await p("powershell",["Expand-Archive","-Path",e,"-DestinationPath",a]);const n=(await s.promises.readdir(a))[0],d=o.join(a,n,"bin");await s.promises.cp(d,i,{recursive:!0})}else await p("tar",["-xzf",e,"-C",i,"--strip-components=1"]);await s.promises.rm(a,{recursive:!0,force:!0}),await s.promises.unlink(e)},z=async(t,e)=>{const r=await fetch(t);if(!r.ok)throw new Error(`Failed to download: ${r.statusText}`);await j(r.body,s.createWriteStream(e))},g=async t=>{try{return await s.promises.access(t),!0}catch{return!1}},k=async()=>{if(l.platform()==="darwin"){const{stdout:t}=await p("sysctl",["-n","machdep.cpu.brand_string"]);return t.trim()}return l.arch()},y=async(t,e)=>{if(e){const a=await s.promises.readFile(e,"utf-8");return JSON.parse(a)[t].url}const r=l.platform();return{mongodb:{win32:"https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-6.0.5.zip",darwin:(await k()).includes("ARM")?"https://fastdl.mongodb.org/osx/mongodb-macos-arm64-6.0.5.tgz":"https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-6.0.5.tgz",linux:"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2004-6.0.5.tgz"},redis:{win32:"https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.zip",darwin:"https://download.redis.io/releases/redis-6.2.6.tar.gz",linux:"https://download.redis.io/releases/redis-6.2.6.tar.gz"},postgresql:{win32:"https://get.enterprisedb.com/postgresql/postgresql-14.7-1-windows-x64-binaries.zip",darwin:"https://get.enterprisedb.com/postgresql/postgresql-14.7-1-osx-binaries.zip",linux:"https://ftp.postgresql.org/pub/source/v14.7/postgresql-14.7.tar.gz"}}[t][r]},_=async(t,e)=>{await s.promises.mkdir(t,{recursive:!0}),await s.promises.mkdir(e,{recursive:!0})},q=async(t,e=null)=>{const r=o.join(l.homedir(),".joystick","databases",t),i=o.join(r,"bin");if(await g(r))return;await _(r,i);const c=await y(t,e),a=o.basename(new URL(c).pathname),n=o.join(r,a);await g(n)||(process.loader.print(`${f[t]} not found. Downloading...`),await z(c,n),process.loader.print(`Installing ${f[t]}...`),await v(t,n,r,i),await b(i),process.loader.print(`${f[t]} installed!`))};var S=q;export{S as default};
