import t from"fs";import e from"path";import m from"os";import"https";import{promisify as u}from"util";import{pipeline as z}from"stream";import{execFile as k}from"child_process";const y=u(z),c=u(k),f={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},_=async o=>{if(m.platform()!=="win32"){const s=await t.promises.readdir(o);for(const i of s)await t.promises.chmod(e.join(o,i),"755")}},q=async(o,r,s,i)=>{const p=m.platform();if(o==="redis")if(p==="win32")await c("powershell",["Expand-Archive","-Path",r,"-DestinationPath",i]);else{await c("tar",["-xzf",r,"-C",s,"--strip-components=1"]),await t.promises.unlink(r);const n=e.join(s,"src");await c("make",["-C",n]);const a=e.join(n,"redis-server"),l=e.join(n,"redis-cli");await t.promises.copyFile(a,e.join(i,"redis-server")),await t.promises.copyFile(l,e.join(i,"redis-cli"))}else{if(p==="win32"){const n=e.join(s,"temp");await c("powershell",["Expand-Archive","-Path",r,"-DestinationPath",n]);const a=(await t.promises.readdir(n))[0],l=e.join(n,a);if(await t.promises.access(i).then(()=>!0).catch(()=>!1)&&await t.promises.rm(i,{recursive:!0,force:!0}),await t.promises.cp(l,i,{recursive:!0}),o==="mongodb"){const b=await x("mongodb",null,!0),w=e.join(s,"mongosh.zip");await g(b,w);const d=e.join(s,"mongosh_temp");await c("powershell",["Expand-Archive","-Path",w,"-DestinationPath",d]);const j=(await t.promises.readdir(d))[0],v=e.join(d,j,"bin","mongosh.exe");if(await t.promises.copyFile(v,e.join(i,"bin","mongosh.exe")),await t.promises.unlink(w),await t.promises.rm(d,{recursive:!0,force:!0}),!await t.promises.access(e.join(i,"bin","mongosh.exe")).then(()=>!0).catch(()=>!1))throw new Error("Required file mongosh.exe not found in the extracted MongoDB files.")}await t.promises.rm(n,{recursive:!0,force:!0})}else await c("tar",["-xzf",r,"-C",i,"--strip-components=1"]);await t.promises.unlink(r)}},g=async(o,r)=>{const s=await fetch(o);if(!s.ok)throw new Error(`Failed to download: ${s.statusText}`);await y(s.body,t.createWriteStream(r))},h=async o=>{try{return await t.promises.access(o),!0}catch{return!1}},P=async()=>{if(m.platform()==="darwin"){const{stdout:o}=await c("sysctl",["-n","machdep.cpu.brand_string"]);return o.trim()}return m.arch()},x=async(o,r,s=!1)=>{if(r){const a=await t.promises.readFile(r,"utf-8");return JSON.parse(a)[o].url}const i=m.platform(),p=await P(),n={mongodb:{win32:{main:"https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-6.0.5.zip",mongosh:"https://downloads.mongodb.com/compass/mongosh-1.8.0-win32-x64.zip"},darwin:p.includes("ARM")?"https://fastdl.mongodb.org/osx/mongodb-macos-arm64-6.0.5.tgz":"https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-6.0.5.tgz",linux:"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2004-6.0.5.tgz"},redis:{win32:"https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.zip",darwin:"https://download.redis.io/releases/redis-6.2.6.tar.gz",linux:"https://download.redis.io/releases/redis-6.2.6.tar.gz"},postgresql:{win32:"https://get.enterprisedb.com/postgresql/postgresql-14.7-1-windows-x64-binaries.zip",darwin:"https://get.enterprisedb.com/postgresql/postgresql-14.7-1-osx-binaries.zip",linux:"https://ftp.postgresql.org/pub/source/v14.7/postgresql-14.7.tar.gz"}};return i==="win32"&&o==="mongodb"?s?n.mongodb.win32.mongosh:n.mongodb.win32.main:n[o][i]},F=async(o,r)=>{await t.promises.mkdir(o,{recursive:!0}),await t.promises.mkdir(r,{recursive:!0})},D=async(o,r=null)=>{const s=e.join(m.homedir(),".joystick","databases",o),i=e.join(s,"bin");if(await h(s))return;await F(s,i);const p=await x(o,r),n=e.basename(new URL(p).pathname),a=e.join(s,n);await h(a)||(process.loader.print(`${f[o]} not found. Downloading... (patience is a virtue\u2014this may take a few minutes)`),await g(p,a),process.loader.print(`Installing ${f[o]}... (more patience\u2014a coffee, perhaps?)`),await q(o,a,s,i),await _(i),process.loader.print(`${f[o]} installed!`))};var L=D;export{L as default};
