import s from"fs";import n from"path";import p from"os";import"https";import{promisify as g}from"util";import{pipeline as v}from"stream";import{execFile as z}from"child_process";const q=g(v),a=g(z),w={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},P=async o=>{if(p.platform()!=="win32"){const t=await s.promises.readdir(o);for(const e of t)await s.promises.chmod(n.join(o,e),"755")}},y=async(o,r,t,e)=>{const l=p.platform();if(o==="redis")if(l==="win32")await a("powershell",["Expand-Archive","-Path",r,"-DestinationPath",e]);else{await a("tar",["-xzf",r,"-C",t,"--strip-components=1"]),await s.promises.unlink(r);const i=n.join(t,"src");await a("make",["-C",i]);const c=n.join(i,"redis-server"),d=n.join(i,"redis-cli");await s.promises.copyFile(c,n.join(e,"redis-server")),await s.promises.copyFile(d,n.join(e,"redis-cli"))}else if(o==="postgresql"&&l==="linux"){await a("tar",["-xzf",r,"-C",t,"--strip-components=1"]),await s.promises.unlink(r);try{await a("gcc",["--version"]),await a("make",["--version"])}catch(i){throw console.error("Error: Required build tools (gcc, make) are not available."),console.error("Please install build essentials. For example, on Ubuntu or Debian:"),console.error("sudo apt-get update && sudo apt-get install build-essential"),i}try{const i=n.join(t,"build");await s.promises.mkdir(i,{recursive:!0}),await a("./configure",["--prefix="+e],{cwd:t}),await a("make",[],{cwd:t}),await a("make",["install"],{cwd:t}),console.log("PostgreSQL has been successfully built and installed.")}catch(i){throw console.error("Error during PostgreSQL build process:",i),i}}else{if(l==="win32"){const i=n.join(t,"temp");await a("powershell",["Expand-Archive","-Path",r,"-DestinationPath",i]);const c=(await s.promises.readdir(i))[0],d=n.join(i,c);if(await s.promises.access(e).then(()=>!0).catch(()=>!1)&&await s.promises.rm(e,{recursive:!0,force:!0}),await s.promises.cp(d,e,{recursive:!0}),o==="mongodb"){const b=await x("mongodb",null,!0),u=n.join(t,"mongosh.zip");await f(b,u);const m=n.join(t,"mongosh_temp");await a("powershell",["Expand-Archive","-Path",u,"-DestinationPath",m]);const j=(await s.promises.readdir(m))[0],k=n.join(m,j,"bin","mongosh.exe");if(await s.promises.copyFile(k,n.join(e,"bin","mongosh.exe")),await s.promises.unlink(u),await s.promises.rm(m,{recursive:!0,force:!0}),!await s.promises.access(n.join(e,"bin","mongosh.exe")).then(()=>!0).catch(()=>!1))throw new Error("Required file mongosh.exe not found in the extracted MongoDB files.")}await s.promises.rm(i,{recursive:!0,force:!0})}else await a("tar",["-xzf",r,"-C",e,"--strip-components=1"]);await s.promises.unlink(r)}},f=async(o,r)=>{const t=await fetch(o);if(!t.ok)throw new Error(`Failed to download: ${t.statusText}`);await q(t.body,s.createWriteStream(r))},h=async o=>{try{return await s.promises.access(o),!0}catch{return!1}},F=async()=>{if(p.platform()==="darwin"){const{stdout:o}=await a("sysctl",["-n","machdep.cpu.brand_string"]);return o.trim()}return p.arch()},x=async(o,r,t=!1)=>{if(r){const c=await s.promises.readFile(r,"utf-8");return JSON.parse(c)[o].url}const e=p.platform(),l=await F(),i={mongodb:{win32:{main:"https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-7.0.2.zip",mongosh:"https://downloads.mongodb.com/compass/mongosh-2.0.2-win32-x64.zip"},darwin:l.includes("ARM")?"https://fastdl.mongodb.org/osx/mongodb-macos-arm64-7.0.2.tgz":"https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-7.0.2.tgz",linux:"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2204-7.0.2.tgz"},redis:{win32:"https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.zip",darwin:"https://download.redis.io/releases/redis-7.2.3.tar.gz",linux:"https://download.redis.io/releases/redis-7.2.3.tar.gz"},postgresql:{win32:"https://get.enterprisedb.com/postgresql/postgresql-16.0-1-windows-x64-binaries.zip",darwin:"https://get.enterprisedb.com/postgresql/postgresql-16.0-1-osx-binaries.zip",linux:"https://ftp.postgresql.org/pub/source/v16.0/postgresql-16.0.tar.gz"}};return e==="win32"&&o==="mongodb"?t?i.mongodb.win32.mongosh:i.mongodb.win32.main:i[o][e]},D=async(o,r)=>{await s.promises.mkdir(o,{recursive:!0}),await s.promises.mkdir(r,{recursive:!0})},E=async(o,r=null)=>{const t=n.join(p.homedir(),".joystick","databases",o),e=n.join(t,"bin");if(await h(t))return;await D(t,e);const l=await x(o,r),i=n.basename(new URL(l).pathname),c=n.join(t,i);await h(c)||(process.loader.print(`${w[o]} not found. Downloading... (patience is a virtue\u2014this may take a few minutes)`),await f(l,c),process.loader.print(`Installing ${w[o]}... (more patience\u2014a coffee, perhaps?)`),await y(o,c,t,e),await P(e),process.loader.print(`${w[o]} installed!`))};var B=E;export{B as default};
