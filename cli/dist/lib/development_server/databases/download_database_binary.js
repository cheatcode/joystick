import s from"fs";import a from"path";import l from"os";import"https";import{promisify as w}from"util";import{pipeline as g}from"stream";import{execFile as h}from"child_process";const x=w(g),c=w(h),m={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},b=async t=>{if(l.platform()!=="win32"){const o=await s.promises.readdir(t);for(const i of o)await s.promises.chmod(a.join(t,i),"755")}},v=async(t,r,o,i)=>{const p=l.platform();await s.promises.access(i).then(()=>!0).catch(()=>!1)&&await s.promises.rm(i,{recursive:!0,force:!0}),await s.promises.mkdir(i,{recursive:!0});const e=a.join(o,"temp");if(await s.promises.mkdir(e,{recursive:!0}),t==="redis")if(p==="win32")await c("powershell",["Expand-Archive","-Path",r,"-DestinationPath",i]);else{await c("tar",["-xzf",r,"-C",e,"--strip-components=1"]);const n=a.join(e,"src");await c("make",["-C",n]);const d=a.join(n,"redis-server"),f=a.join(n,"redis-cli");await s.promises.copyFile(d,a.join(i,"redis-server")),await s.promises.copyFile(f,a.join(i,"redis-cli"))}else if(t==="postgresql")if(p==="win32"){await c("powershell",["Expand-Archive","-Path",r,"-DestinationPath",e]);const n=(await s.promises.readdir(e))[0],d=a.join(e,n,"bin");await s.promises.cp(d,i,{recursive:!0})}else{await c("tar",["-xzf",r,"-C",e]);const n=(await s.promises.readdir(e))[0],d=a.join(e,n,"bin");await s.promises.cp(d,i,{recursive:!0})}else if(p==="win32"){await c("powershell",["Expand-Archive","-Path",r,"-DestinationPath",e]);const n=(await s.promises.readdir(e))[0],d=a.join(e,n,"bin");await s.promises.cp(d,i,{recursive:!0})}else await c("tar",["-xzf",r,"-C",i,"--strip-components=1"]);await s.promises.rm(e,{recursive:!0,force:!0}),await s.promises.unlink(r)},j=async(t,r)=>{const o=await fetch(t);if(!o.ok)throw new Error(`Failed to download: ${o.statusText}`);await x(o.body,s.createWriteStream(r))},u=async t=>{try{return await s.promises.access(t),!0}catch{return!1}},_=async()=>{if(l.platform()==="darwin"){const{stdout:t}=await c("sysctl",["-n","machdep.cpu.brand_string"]);return t.trim()}return l.arch()},z=async(t,r)=>{if(r){const e=await s.promises.readFile(r,"utf-8");return JSON.parse(e)[t].url}const o=l.platform();return{mongodb:{win32:"https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-6.0.5.zip",darwin:(await _()).includes("ARM")?"https://fastdl.mongodb.org/osx/mongodb-macos-arm64-6.0.5.tgz":"https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-6.0.5.tgz",linux:"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2004-6.0.5.tgz"},redis:{win32:"https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.zip",darwin:"https://download.redis.io/releases/redis-6.2.6.tar.gz",linux:"https://download.redis.io/releases/redis-6.2.6.tar.gz"},postgresql:{win32:"https://get.enterprisedb.com/postgresql/postgresql-14.7-1-windows-x64-binaries.zip",darwin:"https://get.enterprisedb.com/postgresql/postgresql-14.7-1-osx-binaries.zip",linux:"https://ftp.postgresql.org/pub/source/v14.7/postgresql-14.7.tar.gz"}}[t][o]},k=async(t,r)=>{await s.promises.mkdir(t,{recursive:!0}),await s.promises.mkdir(r,{recursive:!0})},y=async(t,r=null)=>{const o=a.join(l.homedir(),".joystick","databases",t),i=a.join(o,"bin");if(await u(o))return;await k(o,i);const p=await z(t,r),e=a.basename(new URL(p).pathname),n=a.join(o,e);await u(n)||(process.loader.print(`${m[t]} not found. Downloading...`),await j(p,n),process.loader.print(`Installing ${m[t]}...`),await v(t,n,o,i),await b(i),process.loader.print(`${m[t]} installed!`))};var $=y;export{$ as default};
