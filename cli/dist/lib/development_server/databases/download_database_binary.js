import o from"fs";import e from"path";import p from"os";import"https";import{promisify as u}from"util";import{pipeline as b}from"stream";import{execFile as j}from"child_process";const _=u(b),d=u(j),w={mongodb:"MongoDB",postgresql:"PostgreSQL",redis:"Redis"},y=async t=>{if(p.platform()!=="win32"){const s=await o.promises.readdir(t);for(const r of s)await o.promises.chmod(e.join(t,r),"755")}},z=async(t,i,s,r)=>{const c=p.platform();if(t==="redis")if(c==="win32")await d("powershell",["Expand-Archive","-Path",i,"-DestinationPath",r]);else{await d("tar",["-xzf",i,"-C",s,"--strip-components=1"]),await o.promises.unlink(i);const n=e.join(s,"src");await d("make",["-C",n]);const a=e.join(n,"redis-server"),m=e.join(n,"redis-cli");await o.promises.copyFile(a,e.join(r,"redis-server")),await o.promises.copyFile(m,e.join(r,"redis-cli"))}else{if(c==="win32"){const n=e.join(s,"temp");await d("powershell",["Expand-Archive","-Path",i,"-DestinationPath",n]);const a=(await o.promises.readdir(n))[0],m=e.join(n,a,"bin");await o.promises.access(r).then(()=>!0).catch(()=>!1)&&await o.promises.rm(r,{recursive:!0,force:!0});const f=e.join(r,"bin");await o.promises.mkdir(f,{recursive:!0});const h=await o.promises.readdir(m);for(const l of h)await o.promises.copyFile(e.join(m,l),e.join(f,l));const x=["mongod.exe","mongo.exe"];for(const l of x)if(!await o.promises.access(e.join(f,l)).then(()=>!0).catch(()=>!1))throw new Error(`Required file ${l} not found in the extracted MongoDB files.`);await o.promises.rm(n,{recursive:!0,force:!0})}else await d("tar",["-xzf",i,"-C",r,"--strip-components=1"]);await o.promises.unlink(i)}},k=async(t,i)=>{const s=await fetch(t);if(!s.ok)throw new Error(`Failed to download: ${s.statusText}`);await _(s.body,o.createWriteStream(i))},g=async t=>{try{return await o.promises.access(t),!0}catch{return!1}},v=async()=>{if(p.platform()==="darwin"){const{stdout:t}=await d("sysctl",["-n","machdep.cpu.brand_string"]);return t.trim()}return p.arch()},q=async(t,i)=>{if(i){const n=await o.promises.readFile(i,"utf-8");return JSON.parse(n)[t].url}const s=p.platform();return{mongodb:{win32:"https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-6.0.5.zip",darwin:(await v()).includes("ARM")?"https://fastdl.mongodb.org/osx/mongodb-macos-arm64-6.0.5.tgz":"https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-6.0.5.tgz",linux:"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2004-6.0.5.tgz"},redis:{win32:"https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.zip",darwin:"https://download.redis.io/releases/redis-6.2.6.tar.gz",linux:"https://download.redis.io/releases/redis-6.2.6.tar.gz"},postgresql:{win32:"https://get.enterprisedb.com/postgresql/postgresql-14.7-1-windows-x64-binaries.zip",darwin:"https://get.enterprisedb.com/postgresql/postgresql-14.7-1-osx-binaries.zip",linux:"https://ftp.postgresql.org/pub/source/v14.7/postgresql-14.7.tar.gz"}}[t][s]},F=async(t,i)=>{await o.promises.mkdir(t,{recursive:!0}),await o.promises.mkdir(i,{recursive:!0})},P=async(t,i=null)=>{const s=e.join(p.homedir(),".joystick","databases",t),r=e.join(s,"bin");if(await g(s))return;await F(s,r);const c=await q(t,i),n=e.basename(new URL(c).pathname),a=e.join(s,n);await g(a)||(process.loader.print(`${w[t]} not found. Downloading...`),await k(c,a),process.loader.print(`Installing ${w[t]}...`),await z(t,a,s,r),await y(r),process.loader.print(`${w[t]} installed!`))};var B=P;export{B as default};
