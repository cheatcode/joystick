{
  "version": 3,
  "sources": ["../../../src/lib/development_server/start_databases.js"],
  "sourcesContent": ["/* eslint-disable consistent-return */\n\nimport cli_log from \"../cli_log.js\";\nimport provider_map from \"./databases/provider_map.js\";\nimport types from '../types.js';\n\nconst start_database_provider = async (\n  environment = 'development',\n  database = {},\n  port = 2610,\n  has_multiple_of_provider = false\n) => {\n  const provider = provider_map[database?.provider];\n\n  if (provider) {\n    if (environment !== 'test') {\n      process.loader.print(`Starting ${provider?.name}${database?.name ? ` (${database?.name})`: ''}...`);\n    }\n\n    process._databases = {\n      ...(process._databases || {}),\n      [database.provider]: !has_multiple_of_provider ? await provider.connect(database, port, environment) : {\n        ...((process._databases && process._databases[database.provider]) || {}),\n        [database?.name || `${database.provider}_${port}`]: await provider.connect(database, port, environment)\n      },\n    };\n  }\n};\n\nconst start_database_providers = async (databases = [], database_port = 2610, environment = '') => {\n  for (let i = 0; i < databases?.length; i += 1) {\n    const database = databases[i];\n    const has_multiple_of_provider = (databases?.filter((database) => database?.provider === database?.provider))?.length > 1;\n\n    await start_database_provider(\n      environment,\n      database,\n      // NOTE: Increment each database port using index in the databases array from settings if no port\n      // is assigned in the settings.\n      database?.port || database_port + i,\n      has_multiple_of_provider,\n    );\n  }\n};\n\nconst validate_databases_from_settings = (databases = []) => {\n  const databases_not_as_objects = databases.filter(\n    (database) => !types.is_object(database)\n  );\n\n  const user_databases = databases.filter((database) => !!database.users);\n  const queue_databases = databases.filter((database) => !!database.queues);\n  const redis_user_databases = user_databases.filter((database) => database.provider === 'redis');\n\n  if (databases_not_as_objects && databases_not_as_objects.length > 0) {\n    cli_log(`Please ensure that each database in the config.databases array in your settings.${process.env.NODE_ENV}.json is an object. Correct the array and restart your app.`, {\n      level: 'danger',\n      docs: 'https://cheatcode.co/docs/joystick/cli/databases',\n    });\n\n    process.exit(1);\n  }\n\n  if (redis_user_databases && redis_user_databases.length > 0) {\n    cli_log(`Redis cannot be used for user accounts. Please use MongoDB or PostgreSQL for users and restart your app.`, {\n      level: 'danger',\n      docs: 'https://cheatcode.co/docs/joystick/cli/databases#users',\n    });\n\n    process.exit(1);\n  }\n\n  if (user_databases && user_databases.length > 1) {\n    cli_log(`Please select a single database for your user accounts and restart your app.`, {\n      level: 'danger',\n      docs: 'https://cheatcode.co/docs/joystick/cli/databases#users',\n    });\n\n    process.exit(1);\n  }\n\n  if (queue_databases && queue_databases.length > 1) {\n    cli_log(`Please select a single database for your queues and restart your app. If you need to spread queues across databases, use the database object on the queue definition instead (see documentation link below).`, {\n      level: 'danger',\n      docs: 'https://cheatcode.co/docs/joystick/cli/databases#queues',\n    });\n\n    process.exit(1);\n  }\n\n  return true;\n};\n\nconst start_databases = async (options = {}) => {\n  const databases = options?.settings?.config?.databases || [];\n\n  if (databases?.length > 0) {\n    validate_databases_from_settings(databases);\n\n    await start_database_providers(\n      databases,\n      options?.port + 10,\n      options?.environment,\n    );\n  }\n};\n\nexport default start_databases;\n"],
  "mappings": "AAEA,OAAOA,MAAa,gBACpB,OAAOC,MAAkB,8BACzB,OAAOC,MAAW,cAElB,MAAMC,EAA0B,MAC9BC,EAAc,cACdC,EAAW,CAAC,EACZC,EAAO,KACPC,EAA2B,KACxB,CACH,MAAMC,EAAWP,EAAaI,GAAU,QAAQ,EAE5CG,IACEJ,IAAgB,QAClB,QAAQ,OAAO,MAAM,YAAYI,GAAU,IAAI,GAAGH,GAAU,KAAO,KAAKA,GAAU,IAAI,IAAK,EAAE,KAAK,EAGpG,QAAQ,WAAa,CACnB,GAAI,QAAQ,YAAc,CAAC,EAC3B,CAACA,EAAS,QAAQ,EAAIE,EAAiF,CACrG,GAAK,QAAQ,YAAc,QAAQ,WAAWF,EAAS,QAAQ,GAAM,CAAC,EACtE,CAACA,GAAU,MAAQ,GAAGA,EAAS,QAAQ,IAAIC,CAAI,EAAE,EAAG,MAAME,EAAS,QAAQH,EAAUC,EAAMF,CAAW,CACxG,EAHiD,MAAMI,EAAS,QAAQH,EAAUC,EAAMF,CAAW,CAIrG,EAEJ,EAEMK,EAA2B,MAAOC,EAAY,CAAC,EAAGC,EAAgB,KAAMP,EAAc,KAAO,CACjG,QAASQ,EAAI,EAAGA,EAAIF,GAAW,OAAQE,GAAK,EAAG,CAC7C,MAAMP,EAAWK,EAAUE,CAAC,EACtBL,EAA4BG,GAAW,OAAQL,GAAaA,GAAU,WAAaA,GAAU,QAAQ,GAAI,OAAS,EAExH,MAAMF,EACJC,EACAC,EAGAA,GAAU,MAAQM,EAAgBC,EAClCL,CACF,CACF,CACF,EAEMM,EAAmC,CAACH,EAAY,CAAC,IAAM,CAC3D,MAAMI,EAA2BJ,EAAU,OACxCL,GAAa,CAACH,EAAM,UAAUG,CAAQ,CACzC,EAEMU,EAAiBL,EAAU,OAAQL,GAAa,CAAC,CAACA,EAAS,KAAK,EAChEW,EAAkBN,EAAU,OAAQL,GAAa,CAAC,CAACA,EAAS,MAAM,EAClEY,EAAuBF,EAAe,OAAQV,GAAaA,EAAS,WAAa,OAAO,EAE9F,OAAIS,GAA4BA,EAAyB,OAAS,IAChEd,EAAQ,mFAAmF,QAAQ,IAAI,QAAQ,8DAA+D,CAC5K,MAAO,SACP,KAAM,kDACR,CAAC,EAED,QAAQ,KAAK,CAAC,GAGZiB,GAAwBA,EAAqB,OAAS,IACxDjB,EAAQ,2GAA4G,CAClH,MAAO,SACP,KAAM,wDACR,CAAC,EAED,QAAQ,KAAK,CAAC,GAGZe,GAAkBA,EAAe,OAAS,IAC5Cf,EAAQ,+EAAgF,CACtF,MAAO,SACP,KAAM,wDACR,CAAC,EAED,QAAQ,KAAK,CAAC,GAGZgB,GAAmBA,EAAgB,OAAS,IAC9ChB,EAAQ,+MAAgN,CACtN,MAAO,SACP,KAAM,yDACR,CAAC,EAED,QAAQ,KAAK,CAAC,GAGT,EACT,EAEMkB,EAAkB,MAAOC,EAAU,CAAC,IAAM,CAC9C,MAAMT,EAAYS,GAAS,UAAU,QAAQ,WAAa,CAAC,EAEvDT,GAAW,OAAS,IACtBG,EAAiCH,CAAS,EAE1C,MAAMD,EACJC,EACAS,GAAS,KAAO,GAChBA,GAAS,WACX,EAEJ,EAEA,IAAOC,EAAQF",
  "names": ["cli_log", "provider_map", "types", "start_database_provider", "environment", "database", "port", "has_multiple_of_provider", "provider", "start_database_providers", "databases", "database_port", "i", "validate_databases_from_settings", "databases_not_as_objects", "user_databases", "queue_databases", "redis_user_databases", "start_databases", "options", "start_databases_default"]
}
