{
  "version": 3,
  "sources": ["../../../src/lib/development_server/get_translations.js"],
  "sourcesContent": ["import fs from 'fs';\nimport load_settings from \"../load_settings.js\";\nimport types from '../types.js';\nimport dynamic_import from '../dynamic_import.js';\n\nconst settings = await load_settings(process.env.NODE_ENV);\n\nconst get_translations_file = async (language_file_path = '', joystick_build_path = '', render_component_path = '') => {\n  const language_file = await dynamic_import(`${process.cwd()}/${joystick_build_path}/i18n/${language_file_path}?v=${new Date().getTime()}`);\n  const is_valid_language_file = language_file && types.is_object(language_file);\n\n  if (is_valid_language_file) {\n    const translations_for_page = language_file[render_component_path];\n    return translations_for_page ? translations_for_page : language_file;\n  }\n\n  return {};\n};\n\nconst get_language_preference_regexes = (user_language = '', browser_languages = []) => {\n  let language_preferences = [];\n\n  if (user_language) {\n    language_preferences.push(user_language);\n  }\n\n  const filtered_browser_languages = browser_languages?.filter((language) => {\n    return !language?.includes('*');\n  });\n\n  language_preferences.push(...filtered_browser_languages);\n  language_preferences.push(settings?.config?.i18n?.defaultLanguage);\n\n  return language_preferences?.flatMap((language) => {\n    const variants = [language];\n\n    if (language?.length === 2) {\n      variants.push(`${language.substring(0, 2)}-`);\n    }\n\n    if (language?.length > 2) {\n      variants.push(`${language?.split('-')[0]}`);\n      variants.push(`${language?.split('-')[0]}-`);\n    }\n\n    return variants;\n  })?.map((language_string) => {\n    const last_character = language_string[language_string?.length - 1];\n\n    if (last_character === '-') {\n      return new RegExp(`^${language_string}[A-Z]+.js`, 'g');\n    }\n\n    return new RegExp(`^${language_string}.js`, 'g');\n  });\n};\n\nconst parse_browser_languages = (languages = '') => {\n  const raw_languages = languages.split(',');\n  return raw_languages?.map((raw_language) => raw_language.split(';')[0]);\n};\n\nconst get_translations = async (joystick_build_path = '', render_component_path = '', req = {}) => {\n  const language_files = fs.readdirSync(`${joystick_build_path}/i18n`);\n  const browser_languages = parse_browser_languages(req?.headers['accept-language']);\n  const language_preferences = get_language_preference_regexes(req?.context?.user?.language, browser_languages);\n\n  let matching_file = null;\n\n  for (let i = 0; i < language_preferences.length; i += 1) {\n    const language_regex = language_preferences[i];\n    const match = language_files.find((language_file) => !!language_file.match(language_regex));\n\n    if (match) {\n      matching_file = match;\n      break;\n    }\n  }\n\n  const translations_file = await get_translations_file(matching_file, joystick_build_path, render_component_path);\n\n  return translations_file;\n};\n\nexport default get_translations;\n"],
  "mappings": "AAAA,OAAOA,MAAQ,KACf,OAAOC,MAAmB,sBAC1B,OAAOC,MAAW,cAClB,OAAOC,MAAoB,uBAE3B,MAAMC,EAAW,MAAMH,EAAc,QAAQ,IAAI,QAAQ,EAEnDI,EAAwB,MAAOC,EAAqB,GAAIC,EAAsB,GAAIC,EAAwB,KAAO,CACrH,MAAMC,EAAgB,MAAMN,EAAe,GAAG,QAAQ,IAAI,CAAC,IAAII,CAAmB,SAASD,CAAkB,MAAM,IAAI,KAAK,EAAE,QAAQ,CAAC,EAAE,EAGzI,GAF+BG,GAAiBP,EAAM,UAAUO,CAAa,EAEjD,CAC1B,MAAMC,EAAwBD,EAAcD,CAAqB,EACjE,OAAOE,GAAgDD,CACzD,CAEA,MAAO,CAAC,CACV,EAEME,EAAkC,CAACC,EAAgB,GAAIC,EAAoB,CAAC,IAAM,CACtF,IAAIC,EAAuB,CAAC,EAExBF,GACFE,EAAqB,KAAKF,CAAa,EAGzC,MAAMG,EAA6BF,GAAmB,OAAQG,GACrD,CAACA,GAAU,SAAS,GAAG,CAC/B,EAED,OAAAF,EAAqB,KAAK,GAAGC,CAA0B,EACvDD,EAAqB,KAAKV,GAAU,QAAQ,MAAM,eAAe,EAE1DU,GAAsB,QAASE,GAAa,CACjD,MAAMC,EAAW,CAACD,CAAQ,EAE1B,OAAIA,GAAU,SAAW,GACvBC,EAAS,KAAK,GAAGD,EAAS,UAAU,EAAG,CAAC,CAAC,GAAG,EAG1CA,GAAU,OAAS,IACrBC,EAAS,KAAK,GAAGD,GAAU,MAAM,GAAG,EAAE,CAAC,CAAC,EAAE,EAC1CC,EAAS,KAAK,GAAGD,GAAU,MAAM,GAAG,EAAE,CAAC,CAAC,GAAG,GAGtCC,CACT,CAAC,GAAG,IAAKC,GACgBA,EAAgBA,GAAiB,OAAS,CAAC,IAE3C,IACd,IAAI,OAAO,IAAIA,CAAe,YAAa,GAAG,EAGhD,IAAI,OAAO,IAAIA,CAAe,MAAO,GAAG,CAChD,CACH,EAEMC,EAA0B,CAACC,EAAY,KACrBA,EAAU,MAAM,GAAG,GACnB,IAAKC,GAAiBA,EAAa,MAAM,GAAG,EAAE,CAAC,CAAC,EAGlEC,EAAmB,MAAOf,EAAsB,GAAIC,EAAwB,GAAIe,EAAM,CAAC,IAAM,CACjG,MAAMC,EAAiBxB,EAAG,YAAY,GAAGO,CAAmB,OAAO,EAC7DM,EAAoBM,EAAwBI,GAAK,QAAQ,iBAAiB,CAAC,EAC3ET,EAAuBH,EAAgCY,GAAK,SAAS,MAAM,SAAUV,CAAiB,EAE5G,IAAIY,EAAgB,KAEpB,QAAS,EAAI,EAAG,EAAIX,EAAqB,OAAQ,GAAK,EAAG,CACvD,MAAMY,EAAiBZ,EAAqB,CAAC,EACvCa,EAAQH,EAAe,KAAMf,GAAkB,CAAC,CAACA,EAAc,MAAMiB,CAAc,CAAC,EAE1F,GAAIC,EAAO,CACTF,EAAgBE,EAChB,KACF,CACF,CAIA,OAF0B,MAAMtB,EAAsBoB,EAAelB,EAAqBC,CAAqB,CAGjH,EAEA,IAAOoB,EAAQN",
  "names": ["fs", "load_settings", "types", "dynamic_import", "settings", "get_translations_file", "language_file_path", "joystick_build_path", "render_component_path", "language_file", "translations_for_page", "get_language_preference_regexes", "user_language", "browser_languages", "language_preferences", "filtered_browser_languages", "language", "variants", "language_string", "parse_browser_languages", "languages", "raw_language", "get_translations", "req", "language_files", "matching_file", "language_regex", "match", "get_translations_default"]
}
