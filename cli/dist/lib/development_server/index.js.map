{
  "version": 3,
  "sources": ["../../../src/lib/development_server/index.js"],
  "sourcesContent": ["import chalk from 'chalk';\nimport child_process from 'child_process';\nimport fs from 'fs';\nimport os from 'os';\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport util from 'util';\nimport check_if_port_occupied from './check_if_port_occupied.js';\nimport cli_log from '../cli_log.js';\nimport get_database_process_ids from './get_database_process_ids.js';\n import get_platform_safe_path from '../get_platform_safe_path.js';\nimport kill_port_process from '../kill_port_process.js';\nimport load_settings from '../load_settings.js';\nimport Loader from '../loader.js';\nimport path_exists from '../path_exists.js';\nimport required_files from '../required_files.js';\nimport start_app_server from './start_app_server.js';\nimport start_databases from './start_databases.js';\nimport start_hmr_server from './start_hmr_server.js';\nimport watch_for_changes from './watch_for_changes/index.js';\nimport constants from '../constants.js';\nimport kill_process_ids from './kill_process_ids.js';\nimport run_tests, { run_tests_integrated } from './run_tests.js';\nimport debounce from '../debounce.js';\nimport download_database_binary from './databases/download_database_binary.js';\n\nconst { stat } = fs.promises;\nconst exec = util.promisify(child_process.exec);\n\nconst node_major_version = parseInt(\n  process?.version?.split(\".\")[0]?.replace(\"v\", \"\"),\n  10\n);\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst process_ids = [];\n\n// NOTE: Global test server process tracking and server readiness state\nlet test_server_process = null;\nlet main_server_ready = false;\nlet test_server_ready = false;\n\nconst check_and_run_tests = async () => {\n  if (main_server_ready && test_server_ready) {\n    // NOTE: Add 2s delay to ensure both servers are fully ready\n    setTimeout(async () => {\n      console.log('Running tests...');\n      try {\n        await run_tests_integrated({\n          __dirname,\n        });\n      } catch (error) {\n        console.error('Error running integrated tests:', error);\n      }\n    }, 2000);\n  }\n};\n\nconst start_test_server = async (development_server_options = {}) => {\n  const test_port_occupied = await check_if_port_occupied(1977);\n  if (test_port_occupied) {\n    await kill_port_process(1977);\n  }\n\n  console.log('Starting test server...');\n  \n  // NOTE: Start test server using the same development_server function\n  // but with different options to avoid recursion and environment conflicts\n  setTimeout(async () => {\n    try {\n      await development_server({\n        environment: 'test',\n        port: 1977,\n        watch: false, // No file watching for test server\n        imports: development_server_options?.imports || [],\n        _is_test_server: true, // Internal flag to prevent infinite recursion\n      });\n    } catch (error) {\n      console.error('Error starting test server:', error);\n    }\n  }, 100); // Small delay to let main server start first\n};\n\nconst stop_test_server = () => {\n  if (test_server_process) {\n    test_server_process.kill();\n    test_server_process = null;\n  }\n  test_server_ready = false;\n};\n\nconst reset_server_readiness = () => {\n  main_server_ready = false;\n  test_server_ready = false;\n};\n\nconst handle_run_tests = async (watch = false) => {\n  const database_process_ids = get_database_process_ids();\n  await run_tests({\n    watch,\n    __dirname,\n    process_ids: [\n      ...process_ids,\n      ...database_process_ids,\n    ],\n    cleanup_process: process.cleanup_process,\n  });\n};\n\nconst handle_signal_events = (process_ids = [], node_major_version = 0, __dirname = '') => {\n  const exec_argv = [\"--no-warnings\"];\n\n  if (node_major_version < 19) {\n    exec_argv.push(\"--experimental-specifier-resolution=node\");\n  }\n\n  const cleanup_process = child_process.fork(\n    path.resolve(`${__dirname}/cleanup.js`),\n    [],\n    {\n      // NOTE: Run in detached mode so when parent process dies, the child still runs\n      // and cleanup completes. Keep silent as we don't wan't/expect any messages.\n      detached: true,\n      silent: true,\n    }\n  );\n\n  process.cleanup_process = cleanup_process;\n\n  process.on(\"SIGINT\", async () => {\n    const database_process_ids = get_database_process_ids();\n    cleanup_process.send(JSON.stringify(({ process_ids: [...process_ids, ...database_process_ids] })));\n    process.exit();\n  });\n\n  process.on(\"SIGTERM\", async () => {\n    const database_process_ids = get_database_process_ids();\n    cleanup_process.send(JSON.stringify(({ process_ids: [...process_ids, ...database_process_ids] })));\n    process.exit();\n  });\n};\n\nconst handle_signal_hmr_update = async (jobs = []) => {\n  const has_settings_change = jobs?.find((job) => (job?.path?.match(constants.SETTINGS_FILE_NAME_REGEX))?.length > 0);\n  const has_i18n_change = jobs?.find((job) => job?.path?.includes('i18n'));\n  const has_index_html_change = jobs?.find((job) => job?.path?.includes('index.html'));\n  const has_index_css_change = jobs?.find((job) => {\n    return job?.path?.includes('index.css') || job?.path?.includes('css/');\n  });\n  const has_index_client_change = jobs?.find((job) => job?.path?.includes('index.client.js'));\n\n  process.hmr_server_process.send(JSON.stringify({\n    type: 'FILE_CHANGE',\n    settings: has_settings_change ? await load_settings(process.env.NODE_ENV) : null,\n    i18n_change: !!has_i18n_change,\n    index_html_change: !!has_index_html_change,\n    index_css_change: !!has_index_css_change,\n    index_client_change: !!has_index_client_change,\n  }));\n};\n\nconst handle_hmr_server_process_messages = (node_major_version = 0, watch = false, old_settings = {}, imports = [], run_integrated_tests = false) => {\n  process.hmr_server_process.on(\"message\", async (message) => {\n    const process_messages = [\n      \"HAS_HMR_CONNECTIONS\",\n      \"HAS_NO_HMR_CONNECTIONS\",\n      \"HMR_UPDATE_COMPLETE\",\n    ];\n\n    if (!process_messages.includes(message?.type)) {\n      process.loader.print(message);\n    }\n\n    if (message?.type === \"HAS_HMR_CONNECTIONS\") {\n      process.hmr_server_process.has_connections = true;\n    }\n\n    if (message?.type === \"HAS_NO_HMR_CONNECTIONS\") {\n      process.hmr_server_process.has_connections = false;\n    }\n\n    if (message?.type === \"HMR_UPDATE_COMPLETE\") {\n      if (process.app_server_process && !process.app_server_restarting) {\n        process.app_server_restarting = true;\n        handle_restart_app_server(node_major_version, watch, old_settings, imports, run_integrated_tests);\n      }\n    }\n  });\n};\n\nconst handle_hmr_server_process_stdio = () => {\n  process.hmr_server_process.on(\"error\", (error) => {\n    cli_log(error.toString(), {\n      level: \"danger\",\n      docs: \"https://github.com/cheatcode/joystick\",\n    });\n  });\n\n  process.hmr_server_process.stdout.on(\"data\", (data) => {\n    console.log(data.toString());\n  });\n\n  process.hmr_server_process.stderr.on(\"data\", (data) => {\n    cli_log(data.toString(), {\n      level: \"danger\",\n      docs: \"https://github.com/cheatcode/joystick\",\n    });\n  });\n};\n\nconst handle_start_hmr_server = (node_major_version = 0, __dirname = '', watch = false, old_settings = {}, imports = [], run_integrated_tests = false) => {\n\tprocess.hmr_server_process = start_hmr_server(node_major_version, __dirname);\n  process_ids.push(process.hmr_server_process?.pid);\n  handle_hmr_server_process_stdio();\n  handle_hmr_server_process_messages(node_major_version, watch, old_settings, imports, run_integrated_tests);\n};\n\nconst check_if_database_changes = async (old_settings = {}) => {\n  const new_settings = await load_settings(process.env.NODE_ENV);\n  const new_databse_settings = new_settings?.config?.databases ? JSON.stringify(new_settings?.config?.databases) : '';\n  const old_database_settings = old_settings?.config?.databases ? JSON.stringify(old_settings?.config?.databases) : '';\n  return new_databse_settings !== old_database_settings;\n};\n\nconst handle_restart_app_server = async (node_major_version = 0, watch = false, old_settings = null, imports = [], run_integrated_tests = false) => {\n  debounce(async () => {\n    const has_database_changes = await check_if_database_changes(old_settings);\n\n    if (has_database_changes) {\n      const database_process_ids = get_database_process_ids();\n\n      cli_log(`Database configuration has changed in settings.${process.env.NODE_ENV}.json. Please restart your app to add, change, or remove databases.`, {\n        level: \"danger\",\n        docs: \"https://cheatcode.co/docs/joystick/structure\",\n      });\n\n      kill_process_ids([\n        process.hmr_server_process?.pid,\n        process.app_server_process?.pid,\n        ...database_process_ids,\n      ]);\n\n      process.exit(0);\n    } else {\n      // NOTE: Reset server readiness states when restarting\n      if (run_integrated_tests) {\n        reset_server_readiness();\n        stop_test_server();\n      }\n\n      kill_process_ids([\n        ...(process.app_server_process.external_process_ids || []),\n      ]);\n\n      await kill_port_process(process.env.PORT);\n      handle_start_app_server(node_major_version, watch, imports, run_integrated_tests);\n\n      // NOTE: Restart test server if tests are enabled\n      if (run_integrated_tests) {\n        await start_test_server({\n          imports: imports || [],\n        });\n      }\n    }\n  }, 300);\n};\n\nconst handle_app_server_process_stdio = (watch = false, run_integrated_tests = false, is_test_server = false) => {\n  // NOTE: Default this in case we never get any external process IDs.\n  process.app_server_process.external_process_ids = [];\n\n  process.app_server_process.on('message', (message_from_child) => {\n    if (message_from_child?.external_process_id) {\n      process.app_server_process.external_process_ids = [\n        ...(process.app_server_process.external_process_ids || []),\n        message_from_child?.external_process_id,\n      ];\n    }\n  });\n\n  process.app_server_process.on('error', (error) => {\n    if (!is_test_server) {\n      cli_log(error.toString(), {\n        level: \"danger\",\n        docs: \"https://github.com/cheatcode/joystick\",\n      });\n    }\n  });\n\n  process.app_server_process.stdout.on(\"data\", async (data) => {\n  \tconst stdout = data.toString();\n    const is_startup_notification = stdout.includes(\"App running at:\");\n\n    // NOTE: Suppress all test server output\n    if (is_test_server) {\n      return;\n    }\n\n    // NOTE: Main server output handling\n  \tif (stdout && is_startup_notification && process.env.NODE_ENV !== 'test') {\n  \t\tprocess.loader.print(stdout);\n  \t}\n\n    if (stdout && !is_startup_notification && !stdout.includes(\"BUILD_ERROR\")) {\n      console.log(stdout);\n    }\n\n    // NOTE: Run tests here so we can guarantee app server is running. Do a slight delay\n    // to ensure that test routes are registered.\n    if (stdout && is_startup_notification && process.env.NODE_ENV === 'test') {\n      handle_run_tests(watch);\n    }\n\n    // NOTE: Mark main server as ready when --tests flag is used\n    if (stdout && is_startup_notification && run_integrated_tests && process.env.NODE_ENV !== 'test') {\n      main_server_ready = true;\n      check_and_run_tests();\n    }\n\n    // NOTE: Mark test server as ready when it starts up\n    if (stdout && is_startup_notification && process.env.NODE_ENV === 'test') {\n      test_server_ready = true;\n      check_and_run_tests();\n    }\n  });\n\n  process.app_server_process.stderr.on(\"data\", (data) => {\n    if (!is_test_server) {\n      cli_log(data.toString(), {\n        level: \"danger\",\n        docs: \"https://cheatcode.co/docs/joystick\",\n      });\n    }\n  });\n};\n\nconst handle_start_app_server = (node_major_version = 0, watch = false, imports = [], run_integrated_tests = false, is_test_server = false) => {\n\tprocess.app_server_process = start_app_server(node_major_version, watch, imports);\n  process_ids.push(process.app_server_process?.pid);\n  handle_app_server_process_stdio(watch, run_integrated_tests, is_test_server);\n  process.app_server_restarting = false;\n};\n\nconst install_missing_databases = async (settings = {}) => {\n  const required_databases = settings?.config?.databases?.map((database = {}) => {\n    return database?.provider;\n  });\n\n  for (let i = 0; i < required_databases?.length; i += 1) {\n    const provider_name = required_databases[i];\n    await download_database_binary(provider_name);\n  }\n};\n\nconst set_process_variables = (development_server_options = {}, port = 2600) => {\n  process.title = development_server_options?.environment === 'test' ? \"joystick_test\" : 'joystick';\n  process.project_folder = path.basename(process.cwd());\n  process.loader = new Loader();\n\n  if (development_server_options?.environment === 'test') {\n    console.log(''); // NOTE: Silly, but gives us better styling.\n    process.loader.print(\"Initializing test environment...\\n\");\n  }\n\n  process.env.LOGS_PATH = development_server_options?.logs || null;\n  process.env.NODE_ENV = development_server_options?.environment || \"development\";\n  process.env.PORT = port;\n  process.env.IS_DEBUG_MODE = development_server_options?.debug;\n};\n\nconst warn_app_port_occupied = (port = 2600) => {\n  cli_log(`Port ${port} is already occupied. To start Joystick on this port, clear it and try again.`, {\n    level: 'danger',\n  });\n\n  process.exit(0);\n};\n\nconst get_port = (port = 2600) => {\n\treturn parseInt(port || 2600, 10);\n};\n\nconst clean_up_existing_build = async () => {\n\tconst build_path = get_platform_safe_path(`${process.cwd()}/.joystick/build`);\n\n\tif (await path_exists(build_path)) {\n\t\tawait exec(`${process.platform === 'win32' ? 'rmdir /s /q' : 'rm -rf'} ${build_path}`);\n\t}\n};\n\nconst check_for_required_files = async () => {\n  const missing_files = [];\n\n  for (let i = 0; i < required_files?.length; i += 1) {\n    const required_file = required_files[i];\n    const exists = await path_exists(`${process.cwd()}/${required_file.path}`);\n    const stats = exists && await stat(`${process.cwd()}/${required_file.path}`);\n\n    if (required_file && required_file.type === \"file\" && (!exists || (exists && !stats.isFile()))) {\n      missing_files.push({ type: 'file', path: required_file.path });\n    }\n\n    if (required_file && required_file.type === \"directory\" && (!exists || (exists && !stats.isDirectory()))) {\n      missing_files.push({ type: 'directory', path: required_file.path });\n    }\n  }\n\n  if (missing_files?.length > 0) {\n    const files = missing_files?.filter((path) => path.type === 'file');\n    const directories = missing_files?.filter((path) => path.type === 'directory');\n\n    let error = `The following paths are missing and required in a Joystick project:\\n\\n`;\n\n    if (files?.length > 0) {\n      error += `  ${chalk.yellow('>')} Required Files:\\n\\n`;\n\n      for (let i = 0; i < files?.length; i += 1) {\n        const file = files[i];\n        const is_last_file = i +1 === files?.length;\n        error += `  ${chalk.red(`/${file.path}\\n${is_last_file && directories?.length > 0 ? '\\n' : ''}`)}`;\n      }\n    }\n\n    if (directories?.length > 0) {\n      error += `  ${chalk.yellow('>')} Required Directories:\\n\\n`;\n\n      for (let i = 0; i < directories?.length; i += 1) {\n        const file = directories[i];\n        error += `  ${chalk.red(`/${file.path}\\n`)}`;\n      }\n    }\n\n    cli_log(error, {\n      level: \"danger\",\n      docs: \"https://cheatcode.co/docs/joystick/structure\",\n    });\n\n    process.exit(0);\n  }\n};\n\nconst warn_invalid_joystick_environment = async () => {\n  const has_joystick_folder = await path_exists(`${process.cwd()}/.joystick`);\n  const has_tests_folder = await path_exists(`${process.cwd()}/tests`);\n\n  if (process.env.NODE_ENV === 'test' && (!has_joystick_folder || !has_tests_folder)) {\n    cli_log(\n      \"joystick test must be run in a directory with a .joystick folder and tests folder.\",\n      {\n        level: \"danger\",\n        docs: \"https://cheatcode.co/docs/joystick/cli/test\",\n      }\n    );\n\n    process.exit(0);\n  }\n\n  if (process.env.NODE_ENV !== 'test' && !has_joystick_folder) {\n    cli_log(\n      \"joystick start must be run in a directory with a .joystick folder.\",\n      {\n        level: \"danger\",\n        docs: \"https://cheatcode.co/docs/joystick/cli/start\",\n      }\n    );\n\n    process.exit(0);\n  }\n};\n\nconst development_server = async (development_server_options = {}) => {\n  await warn_invalid_joystick_environment();\n  await check_for_required_files();\n\n\tawait clean_up_existing_build();\n\n\tconst port = get_port(development_server_options?.port);\n\tconst app_port_occupied = await check_if_port_occupied(port);\n  const hmr_port_occupied = await check_if_port_occupied(port + 1);\n\n  if (app_port_occupied) {\n  \twarn_app_port_occupied(port);\n  }\n\n  if (hmr_port_occupied) {\n  \tkill_port_process(port);\n  }\n\n  set_process_variables(development_server_options, port);\n\n  const settings = await load_settings(process.env.NODE_ENV);\n\n  await install_missing_databases(settings);\n\n  await start_databases({\n    environment: process.env.NODE_ENV,\n    port,\n    settings\n  });\n\n  // NOTE: Start test server if tests flag is enabled and this is not already a test server\n  if (development_server_options?.tests && development_server_options?.environment !== 'test' && !development_server_options?._is_test_server) {\n    await start_test_server({\n      imports: development_server_options?.imports || [],\n    });\n  }\n\n\n  // NOTE: Only set up file watching for non-test servers\n  if (!development_server_options?._is_test_server) {\n    watch_for_changes({\n      hot_module_reload: (jobs = []) => handle_signal_hmr_update(jobs),\n      restart_app_server: () => handle_restart_app_server(\n        node_major_version,\n        development_server_options?.watch,\n        settings,\n        development_server_options?.imports,\n        development_server_options?.tests,\n      ),\n      start_app_server: () => handle_start_app_server(\n        node_major_version,\n        development_server_options?.watch,\n        development_server_options?.imports,\n        development_server_options?.tests,\n        development_server_options?._is_test_server,\n      ),\n      start_hmr_server: development_server_options?.environment !== 'test' ? () => handle_start_hmr_server(\n        node_major_version,\n        __dirname,\n        development_server_options?.watch,\n        settings,\n        development_server_options?.imports,\n        development_server_options?.tests,\n      ) : null,\n      run_tests: development_server_options?.tests ? async () => {\n        // NOTE: Add delay to avoid jarring UX when test files change\n        setTimeout(async () => {\n          try {\n            await run_tests_integrated({\n              __dirname,\n            });\n          } catch (error) {\n            console.error('Error running tests after file change:', error);\n          }\n        }, 1000);\n      } : null,\n    }, {\n      excluded_paths: settings?.config?.build?.excluded_paths,\n      custom_copy_paths: settings?.config?.build?.copy_paths?.map((path) => {\n        return { path };\n      }) || [],\n    });\n  } else {\n    // NOTE: For test server, just start the app server without file watching\n    handle_start_app_server(\n      node_major_version,\n      false, // No file watching for test server\n      development_server_options?.imports || [],\n      false, // No integrated tests for test server\n      true, // This is a test server\n    );\n  }\n\n  handle_signal_events(process_ids, node_major_version, __dirname);\n};\n\nexport default development_server;\n"],
  "mappings": "AAAA,OAAOA,MAAW,QAClB,OAAOC,MAAmB,gBAC1B,OAAOC,MAAQ,KACf,MAAe,KACf,OAAOC,GAAQ,WAAAC,MAAe,OAC9B,OAAS,iBAAAC,MAAqB,MAC9B,OAAOC,MAAU,OACjB,OAAOC,MAA4B,8BACnC,OAAOC,MAAa,gBACpB,OAAOC,MAA8B,gCACpC,OAAOC,MAA4B,+BACpC,OAAOC,MAAuB,0BAC9B,OAAOC,MAAmB,sBAC1B,OAAOC,MAAY,eACnB,OAAOC,MAAiB,oBACxB,OAAOC,MAAoB,uBAC3B,OAAOC,MAAsB,wBAC7B,OAAOC,MAAqB,uBAC5B,OAAOC,MAAsB,wBAC7B,OAAOC,MAAuB,+BAC9B,OAAOC,MAAe,kBACtB,OAAOC,MAAsB,wBAC7B,OAAOC,GAAa,wBAAAC,MAA4B,iBAChD,OAAOC,MAAc,iBACrB,OAAOC,MAA8B,0CAErC,KAAM,CAAE,KAAAC,CAAK,EAAIxB,EAAG,SACdyB,EAAOrB,EAAK,UAAUL,EAAc,IAAI,EAExC2B,EAAqB,SACzB,SAAS,SAAS,MAAM,GAAG,EAAE,CAAC,GAAG,QAAQ,IAAK,EAAE,EAChD,EACF,EAEMC,EAAaxB,EAAc,YAAY,GAAG,EAC1CyB,EAAY1B,EAAQyB,CAAU,EAE9BE,EAAc,CAAC,EAGrB,IAAIC,EAAsB,KACtBC,EAAoB,GACpBC,EAAoB,GAExB,MAAMC,EAAsB,SAAY,CAClCF,GAAqBC,GAEvB,WAAW,SAAY,CACrB,QAAQ,IAAI,kBAAkB,EAC9B,GAAI,CACF,MAAMX,EAAqB,CACzB,UAAAO,CACF,CAAC,CACH,OAASM,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,CACxD,CACF,EAAG,GAAI,CAEX,EAEMC,EAAoB,MAAOC,EAA6B,CAAC,IAAM,CACxC,MAAM/B,EAAuB,IAAI,GAE1D,MAAMI,EAAkB,IAAI,EAG9B,QAAQ,IAAI,yBAAyB,EAIrC,WAAW,SAAY,CACrB,GAAI,CACF,MAAM4B,EAAmB,CACvB,YAAa,OACb,KAAM,KACN,MAAO,GACP,QAASD,GAA4B,SAAW,CAAC,EACjD,gBAAiB,EACnB,CAAC,CACH,OAASF,EAAO,CACd,QAAQ,MAAM,8BAA+BA,CAAK,CACpD,CACF,EAAG,GAAG,CACR,EAEMI,EAAmB,IAAM,CACzBR,IACFA,EAAoB,KAAK,EACzBA,EAAsB,MAExBE,EAAoB,EACtB,EAEMO,EAAyB,IAAM,CACnCR,EAAoB,GACpBC,EAAoB,EACtB,EAEMQ,EAAmB,MAAOC,EAAQ,KAAU,CAChD,MAAMC,EAAuBnC,EAAyB,EACtD,MAAMa,EAAU,CACd,MAAAqB,EACA,UAAAb,EACA,YAAa,CACX,GAAGC,EACH,GAAGa,CACL,EACA,gBAAiB,QAAQ,eAC3B,CAAC,CACH,EAEMC,EAAuB,CAACd,EAAc,CAAC,EAAGH,EAAqB,EAAGE,EAAY,KAAO,CACzF,MAAMgB,EAAY,CAAC,eAAe,EAE9BlB,EAAqB,IACvBkB,EAAU,KAAK,0CAA0C,EAG3D,MAAMC,EAAkB9C,EAAc,KACpCE,EAAK,QAAQ,GAAG2B,CAAS,aAAa,EACtC,CAAC,EACD,CAGE,SAAU,GACV,OAAQ,EACV,CACF,EAEA,QAAQ,gBAAkBiB,EAE1B,QAAQ,GAAG,SAAU,SAAY,CAC/B,MAAMH,EAAuBnC,EAAyB,EACtDsC,EAAgB,KAAK,KAAK,UAAW,CAAE,YAAa,CAAC,GAAGhB,EAAa,GAAGa,CAAoB,CAAE,CAAE,CAAC,EACjG,QAAQ,KAAK,CACf,CAAC,EAED,QAAQ,GAAG,UAAW,SAAY,CAChC,MAAMA,EAAuBnC,EAAyB,EACtDsC,EAAgB,KAAK,KAAK,UAAW,CAAE,YAAa,CAAC,GAAGhB,EAAa,GAAGa,CAAoB,CAAE,CAAE,CAAC,EACjG,QAAQ,KAAK,CACf,CAAC,CACH,EAEMI,EAA2B,MAAOC,EAAO,CAAC,IAAM,CACpD,MAAMC,EAAsBD,GAAM,KAAME,GAASA,GAAK,MAAM,MAAM/B,EAAU,wBAAwB,GAAI,OAAS,CAAC,EAC5GgC,EAAkBH,GAAM,KAAME,GAAQA,GAAK,MAAM,SAAS,MAAM,CAAC,EACjEE,EAAwBJ,GAAM,KAAME,GAAQA,GAAK,MAAM,SAAS,YAAY,CAAC,EAC7EG,EAAuBL,GAAM,KAAME,GAChCA,GAAK,MAAM,SAAS,WAAW,GAAKA,GAAK,MAAM,SAAS,MAAM,CACtE,EACKI,EAA0BN,GAAM,KAAME,GAAQA,GAAK,MAAM,SAAS,iBAAiB,CAAC,EAE1F,QAAQ,mBAAmB,KAAK,KAAK,UAAU,CAC7C,KAAM,cACN,SAAUD,EAAsB,MAAMtC,EAAc,QAAQ,IAAI,QAAQ,EAAI,KAC5E,YAAa,CAAC,CAACwC,EACf,kBAAmB,CAAC,CAACC,EACrB,iBAAkB,CAAC,CAACC,EACpB,oBAAqB,CAAC,CAACC,CACzB,CAAC,CAAC,CACJ,EAEMC,EAAqC,CAAC5B,EAAqB,EAAGe,EAAQ,GAAOc,EAAe,CAAC,EAAGC,EAAU,CAAC,EAAGC,EAAuB,KAAU,CACnJ,QAAQ,mBAAmB,GAAG,UAAW,MAAOC,GAAY,CACjC,CACvB,sBACA,yBACA,qBACF,EAEsB,SAASA,GAAS,IAAI,GAC1C,QAAQ,OAAO,MAAMA,CAAO,EAG1BA,GAAS,OAAS,wBACpB,QAAQ,mBAAmB,gBAAkB,IAG3CA,GAAS,OAAS,2BACpB,QAAQ,mBAAmB,gBAAkB,IAG3CA,GAAS,OAAS,uBAChB,QAAQ,oBAAsB,CAAC,QAAQ,wBACzC,QAAQ,sBAAwB,GAChCC,EAA0BjC,EAAoBe,EAAOc,EAAcC,EAASC,CAAoB,EAGtG,CAAC,CACH,EAEMG,EAAkC,IAAM,CAC5C,QAAQ,mBAAmB,GAAG,QAAU1B,GAAU,CAChD5B,EAAQ4B,EAAM,SAAS,EAAG,CACxB,MAAO,SACP,KAAM,uCACR,CAAC,CACH,CAAC,EAED,QAAQ,mBAAmB,OAAO,GAAG,OAAS2B,GAAS,CACrD,QAAQ,IAAIA,EAAK,SAAS,CAAC,CAC7B,CAAC,EAED,QAAQ,mBAAmB,OAAO,GAAG,OAASA,GAAS,CACrDvD,EAAQuD,EAAK,SAAS,EAAG,CACvB,MAAO,SACP,KAAM,uCACR,CAAC,CACH,CAAC,CACH,EAEMC,GAA0B,CAACpC,EAAqB,EAAGE,EAAY,GAAIa,EAAQ,GAAOc,EAAe,CAAC,EAAGC,EAAU,CAAC,EAAGC,EAAuB,KAAU,CACzJ,QAAQ,mBAAqBzC,EAAiBU,EAAoBE,CAAS,EAC1EC,EAAY,KAAK,QAAQ,oBAAoB,GAAG,EAChD+B,EAAgC,EAChCN,EAAmC5B,EAAoBe,EAAOc,EAAcC,EAASC,CAAoB,CAC3G,EAEMM,GAA4B,MAAOR,EAAe,CAAC,IAAM,CAC7D,MAAMS,EAAe,MAAMtD,EAAc,QAAQ,IAAI,QAAQ,EACvDuD,EAAuBD,GAAc,QAAQ,UAAY,KAAK,UAAUA,GAAc,QAAQ,SAAS,EAAI,GAC3GE,EAAwBX,GAAc,QAAQ,UAAY,KAAK,UAAUA,GAAc,QAAQ,SAAS,EAAI,GAClH,OAAOU,IAAyBC,CAClC,EAEMP,EAA4B,MAAOjC,EAAqB,EAAGe,EAAQ,GAAOc,EAAe,KAAMC,EAAU,CAAC,EAAGC,EAAuB,KAAU,CAClJnC,EAAS,SAAY,CAGnB,GAF6B,MAAMyC,GAA0BR,CAAY,EAE/C,CACxB,MAAMb,EAAuBnC,EAAyB,EAEtDD,EAAQ,kDAAkD,QAAQ,IAAI,QAAQ,sEAAuE,CACnJ,MAAO,SACP,KAAM,8CACR,CAAC,EAEDa,EAAiB,CACf,QAAQ,oBAAoB,IAC5B,QAAQ,oBAAoB,IAC5B,GAAGuB,CACL,CAAC,EAED,QAAQ,KAAK,CAAC,CAChB,MAEMe,IACFlB,EAAuB,EACvBD,EAAiB,GAGnBnB,EAAiB,CACf,GAAI,QAAQ,mBAAmB,sBAAwB,CAAC,CAC1D,CAAC,EAED,MAAMV,EAAkB,QAAQ,IAAI,IAAI,EACxC0D,EAAwBzC,EAAoBe,EAAOe,EAASC,CAAoB,EAG5EA,GACF,MAAMtB,EAAkB,CACtB,QAASqB,GAAW,CAAC,CACvB,CAAC,CAGP,EAAG,GAAG,CACR,EAEMY,GAAkC,CAAC3B,EAAQ,GAAOgB,EAAuB,GAAOY,EAAiB,KAAU,CAE/G,QAAQ,mBAAmB,qBAAuB,CAAC,EAEnD,QAAQ,mBAAmB,GAAG,UAAYC,GAAuB,CAC3DA,GAAoB,sBACtB,QAAQ,mBAAmB,qBAAuB,CAChD,GAAI,QAAQ,mBAAmB,sBAAwB,CAAC,EACxDA,GAAoB,mBACtB,EAEJ,CAAC,EAED,QAAQ,mBAAmB,GAAG,QAAUpC,GAAU,CAC3CmC,GACH/D,EAAQ4B,EAAM,SAAS,EAAG,CACxB,MAAO,SACP,KAAM,uCACR,CAAC,CAEL,CAAC,EAED,QAAQ,mBAAmB,OAAO,GAAG,OAAQ,MAAO2B,GAAS,CAC5D,MAAMU,EAASV,EAAK,SAAS,EACtBW,EAA0BD,EAAO,SAAS,iBAAiB,EAG7DF,IAKDE,GAAUC,GAA2B,QAAQ,IAAI,WAAa,QACjE,QAAQ,OAAO,MAAMD,CAAM,EAGvBA,GAAU,CAACC,GAA2B,CAACD,EAAO,SAAS,aAAa,GACtE,QAAQ,IAAIA,CAAM,EAKhBA,GAAUC,GAA2B,QAAQ,IAAI,WAAa,QAChEhC,EAAiBC,CAAK,EAIpB8B,GAAUC,GAA2Bf,GAAwB,QAAQ,IAAI,WAAa,SACxF1B,EAAoB,GACpBE,EAAoB,GAIlBsC,GAAUC,GAA2B,QAAQ,IAAI,WAAa,SAChExC,EAAoB,GACpBC,EAAoB,GAExB,CAAC,EAED,QAAQ,mBAAmB,OAAO,GAAG,OAAS4B,GAAS,CAChDQ,GACH/D,EAAQuD,EAAK,SAAS,EAAG,CACvB,MAAO,SACP,KAAM,oCACR,CAAC,CAEL,CAAC,CACH,EAEMM,EAA0B,CAACzC,EAAqB,EAAGe,EAAQ,GAAOe,EAAU,CAAC,EAAGC,EAAuB,GAAOY,EAAiB,KAAU,CAC9I,QAAQ,mBAAqBvD,EAAiBY,EAAoBe,EAAOe,CAAO,EAC/E3B,EAAY,KAAK,QAAQ,oBAAoB,GAAG,EAChDuC,GAAgC3B,EAAOgB,EAAsBY,CAAc,EAC3E,QAAQ,sBAAwB,EAClC,EAEMI,GAA4B,MAAOC,EAAW,CAAC,IAAM,CACzD,MAAMC,EAAqBD,GAAU,QAAQ,WAAW,IAAI,CAACE,EAAW,CAAC,IAChEA,GAAU,QAClB,EAED,QAASC,EAAI,EAAGA,EAAIF,GAAoB,OAAQE,GAAK,EAAG,CACtD,MAAMC,EAAgBH,EAAmBE,CAAC,EAC1C,MAAMtD,EAAyBuD,CAAa,CAC9C,CACF,EAEMC,GAAwB,CAAC3C,EAA6B,CAAC,EAAG4C,EAAO,OAAS,CAC9E,QAAQ,MAAQ5C,GAA4B,cAAgB,OAAS,gBAAkB,WACvF,QAAQ,eAAiBnC,EAAK,SAAS,QAAQ,IAAI,CAAC,EACpD,QAAQ,OAAS,IAAIU,EAEjByB,GAA4B,cAAgB,SAC9C,QAAQ,IAAI,EAAE,EACd,QAAQ,OAAO,MAAM;AAAA,CAAoC,GAG3D,QAAQ,IAAI,UAAYA,GAA4B,MAAQ,KAC5D,QAAQ,IAAI,SAAWA,GAA4B,aAAe,cAClE,QAAQ,IAAI,KAAO4C,EACnB,QAAQ,IAAI,cAAgB5C,GAA4B,KAC1D,EAEM6C,GAAyB,CAACD,EAAO,OAAS,CAC9C1E,EAAQ,QAAQ0E,CAAI,gFAAiF,CACnG,MAAO,QACT,CAAC,EAED,QAAQ,KAAK,CAAC,CAChB,EAEME,GAAW,CAACF,EAAO,OACjB,SAASA,GAAQ,KAAM,EAAE,EAG3BG,GAA0B,SAAY,CAC3C,MAAMC,EAAa5E,EAAuB,GAAG,QAAQ,IAAI,CAAC,kBAAkB,EAExE,MAAMI,EAAYwE,CAAU,GAC/B,MAAM3D,EAAK,GAAG,QAAQ,WAAa,QAAU,cAAgB,QAAQ,IAAI2D,CAAU,EAAE,CAEvF,EAEMC,GAA2B,SAAY,CAC3C,MAAMC,EAAgB,CAAC,EAEvB,QAAST,EAAI,EAAGA,EAAIhE,GAAgB,OAAQgE,GAAK,EAAG,CAClD,MAAMU,EAAgB1E,EAAegE,CAAC,EAChCW,EAAS,MAAM5E,EAAY,GAAG,QAAQ,IAAI,CAAC,IAAI2E,EAAc,IAAI,EAAE,EACnEE,EAAQD,GAAU,MAAMhE,EAAK,GAAG,QAAQ,IAAI,CAAC,IAAI+D,EAAc,IAAI,EAAE,EAEvEA,GAAiBA,EAAc,OAAS,SAAW,CAACC,GAAWA,GAAU,CAACC,EAAM,OAAO,IACzFH,EAAc,KAAK,CAAE,KAAM,OAAQ,KAAMC,EAAc,IAAK,CAAC,EAG3DA,GAAiBA,EAAc,OAAS,cAAgB,CAACC,GAAWA,GAAU,CAACC,EAAM,YAAY,IACnGH,EAAc,KAAK,CAAE,KAAM,YAAa,KAAMC,EAAc,IAAK,CAAC,CAEtE,CAEA,GAAID,GAAe,OAAS,EAAG,CAC7B,MAAMI,EAAQJ,GAAe,OAAQrF,GAASA,EAAK,OAAS,MAAM,EAC5D0F,EAAcL,GAAe,OAAQrF,GAASA,EAAK,OAAS,WAAW,EAE7E,IAAIiC,EAAQ;AAAA;AAAA,EAEZ,GAAIwD,GAAO,OAAS,EAAG,CACrBxD,GAAS,KAAKpC,EAAM,OAAO,GAAG,CAAC;AAAA;AAAA,EAE/B,QAAS+E,EAAI,EAAGA,EAAIa,GAAO,OAAQb,GAAK,EAAG,CACzC,MAAMe,EAAOF,EAAMb,CAAC,EACdgB,EAAehB,EAAG,IAAMa,GAAO,OACrCxD,GAAS,KAAKpC,EAAM,IAAI,IAAI8F,EAAK,IAAI;AAAA,EAAKC,GAAgBF,GAAa,OAAS,EAAI;AAAA,EAAO,EAAE,EAAE,CAAC,EAClG,CACF,CAEA,GAAIA,GAAa,OAAS,EAAG,CAC3BzD,GAAS,KAAKpC,EAAM,OAAO,GAAG,CAAC;AAAA;AAAA,EAE/B,QAAS+E,EAAI,EAAGA,EAAIc,GAAa,OAAQd,GAAK,EAAG,CAC/C,MAAMe,EAAOD,EAAYd,CAAC,EAC1B3C,GAAS,KAAKpC,EAAM,IAAI,IAAI8F,EAAK,IAAI;AAAA,CAAI,CAAC,EAC5C,CACF,CAEAtF,EAAQ4B,EAAO,CACb,MAAO,SACP,KAAM,8CACR,CAAC,EAED,QAAQ,KAAK,CAAC,CAChB,CACF,EAEM4D,GAAoC,SAAY,CACpD,MAAMC,EAAsB,MAAMnF,EAAY,GAAG,QAAQ,IAAI,CAAC,YAAY,EACpEoF,EAAmB,MAAMpF,EAAY,GAAG,QAAQ,IAAI,CAAC,QAAQ,EAE/D,QAAQ,IAAI,WAAa,SAAW,CAACmF,GAAuB,CAACC,KAC/D1F,EACE,qFACA,CACE,MAAO,SACP,KAAM,6CACR,CACF,EAEA,QAAQ,KAAK,CAAC,GAGZ,QAAQ,IAAI,WAAa,QAAU,CAACyF,IACtCzF,EACE,qEACA,CACE,MAAO,SACP,KAAM,8CACR,CACF,EAEA,QAAQ,KAAK,CAAC,EAElB,EAEM+B,EAAqB,MAAOD,EAA6B,CAAC,IAAM,CACpE,MAAM0D,GAAkC,EACxC,MAAMT,GAAyB,EAEhC,MAAMF,GAAwB,EAE9B,MAAMH,EAAOE,GAAS9C,GAA4B,IAAI,EAChD6D,EAAoB,MAAM5F,EAAuB2E,CAAI,EACpDkB,EAAoB,MAAM7F,EAAuB2E,EAAO,CAAC,EAE3DiB,GACHhB,GAAuBD,CAAI,EAGxBkB,GACHzF,EAAkBuE,CAAI,EAGvBD,GAAsB3C,EAA4B4C,CAAI,EAEtD,MAAMN,EAAW,MAAMhE,EAAc,QAAQ,IAAI,QAAQ,EAEzD,MAAM+D,GAA0BC,CAAQ,EAExC,MAAM3D,EAAgB,CACpB,YAAa,QAAQ,IAAI,SACzB,KAAAiE,EACA,SAAAN,CACF,CAAC,EAGGtC,GAA4B,OAASA,GAA4B,cAAgB,QAAU,CAACA,GAA4B,iBAC1H,MAAMD,EAAkB,CACtB,QAASC,GAA4B,SAAW,CAAC,CACnD,CAAC,EAKEA,GAA4B,gBA6C/B+B,EACEzC,EACA,GACAU,GAA4B,SAAW,CAAC,EACxC,GACA,EACF,EAlDAnB,EAAkB,CAChB,kBAAmB,CAAC8B,EAAO,CAAC,IAAMD,EAAyBC,CAAI,EAC/D,mBAAoB,IAAMY,EACxBjC,EACAU,GAA4B,MAC5BsC,EACAtC,GAA4B,QAC5BA,GAA4B,KAC9B,EACA,iBAAkB,IAAM+B,EACtBzC,EACAU,GAA4B,MAC5BA,GAA4B,QAC5BA,GAA4B,MAC5BA,GAA4B,eAC9B,EACA,iBAAkBA,GAA4B,cAAgB,OAAS,IAAM0B,GAC3EpC,EACAE,EACAQ,GAA4B,MAC5BsC,EACAtC,GAA4B,QAC5BA,GAA4B,KAC9B,EAAI,KACJ,UAAWA,GAA4B,MAAQ,SAAY,CAEzD,WAAW,SAAY,CACrB,GAAI,CACF,MAAMf,EAAqB,CACzB,UAAAO,CACF,CAAC,CACH,OAASM,EAAO,CACd,QAAQ,MAAM,yCAA0CA,CAAK,CAC/D,CACF,EAAG,GAAI,CACT,EAAI,IACN,EAAG,CACD,eAAgBwC,GAAU,QAAQ,OAAO,eACzC,kBAAmBA,GAAU,QAAQ,OAAO,YAAY,IAAKzE,IACpD,CAAE,KAAAA,CAAK,EACf,GAAK,CAAC,CACT,CAAC,EAYH0C,EAAqBd,EAAaH,EAAoBE,CAAS,CACjE,EAEA,IAAOuE,GAAQ9D",
  "names": ["chalk", "child_process", "fs", "path", "dirname", "fileURLToPath", "util", "check_if_port_occupied", "cli_log", "get_database_process_ids", "get_platform_safe_path", "kill_port_process", "load_settings", "Loader", "path_exists", "required_files", "start_app_server", "start_databases", "start_hmr_server", "watch_for_changes", "constants", "kill_process_ids", "run_tests", "run_tests_integrated", "debounce", "download_database_binary", "stat", "exec", "node_major_version", "__filename", "__dirname", "process_ids", "test_server_process", "main_server_ready", "test_server_ready", "check_and_run_tests", "error", "start_test_server", "development_server_options", "development_server", "stop_test_server", "reset_server_readiness", "handle_run_tests", "watch", "database_process_ids", "handle_signal_events", "exec_argv", "cleanup_process", "handle_signal_hmr_update", "jobs", "has_settings_change", "job", "has_i18n_change", "has_index_html_change", "has_index_css_change", "has_index_client_change", "handle_hmr_server_process_messages", "old_settings", "imports", "run_integrated_tests", "message", "handle_restart_app_server", "handle_hmr_server_process_stdio", "data", "handle_start_hmr_server", "check_if_database_changes", "new_settings", "new_databse_settings", "old_database_settings", "handle_start_app_server", "handle_app_server_process_stdio", "is_test_server", "message_from_child", "stdout", "is_startup_notification", "install_missing_databases", "settings", "required_databases", "database", "i", "provider_name", "set_process_variables", "port", "warn_app_port_occupied", "get_port", "clean_up_existing_build", "build_path", "check_for_required_files", "missing_files", "required_file", "exists", "stats", "files", "directories", "file", "is_last_file", "warn_invalid_joystick_environment", "has_joystick_folder", "has_tests_folder", "app_port_occupied", "hmr_port_occupied", "index_default"]
}
