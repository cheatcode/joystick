{
  "version": 3,
  "sources": ["../../src/lib/get_architecture.js"],
  "sourcesContent": ["import os from 'os';\nimport { execSync } from 'child_process';\n\nconst get_architecture = () => {\n  // Check if running under Rosetta emulation on macOS\n  if (os.platform() === 'darwin') {\n    // Check if explicitly running under x86_64 architecture\n    if (process.env.ARCHPREFERENCE === 'i386' || \n        process.env.ARCHPREFERENCE === 'x86_64' ||\n        process.arch === 'x64') {\n      return 'x86_64';\n    }\n    \n    // Check if process was started with arch command\n    try {\n      const result = execSync('sysctl -n sysctl.proc_translated 2>/dev/null || echo 0', { encoding: 'utf8' }).trim();\n      if (result === '1') {\n        return 'x86_64';\n      }\n    } catch (error) {\n      // Ignore errors, fall back to os.arch()\n    }\n    \n    // Additional check: try to detect if we're running under arch command\n    try {\n      const uname_result = execSync('uname -m', { encoding: 'utf8' }).trim();\n      \n      // Check if the system reports x86_64 but Node.js reports arm64 (Rosetta case)\n      if (uname_result === 'x86_64' && os.arch() === 'arm64') {\n        return 'x86_64';\n      }\n    } catch (error) {\n      // Ignore errors, fall back to os.arch()\n    }\n  }\n\n  const arch = os.arch();\n  if (arch === 'arm64') return 'arm64';\n  if (arch === 'x64') return 'x86_64';\n  throw new Error(`Unsupported architecture: ${arch}`);\n};\n\nexport default get_architecture;\n"],
  "mappings": "AAAA,OAAOA,MAAQ,KACf,OAAS,YAAAC,MAAgB,gBAEzB,MAAMC,EAAmB,IAAM,CAE7B,GAAIF,EAAG,SAAS,IAAM,SAAU,CAE9B,GAAI,QAAQ,IAAI,iBAAmB,QAC/B,QAAQ,IAAI,iBAAmB,UAC/B,QAAQ,OAAS,MACnB,MAAO,SAIT,GAAI,CAEF,GADeC,EAAS,yDAA0D,CAAE,SAAU,MAAO,CAAC,EAAE,KAAK,IAC9F,IACb,MAAO,QAEX,MAAgB,CAEhB,CAGA,GAAI,CAIF,GAHqBA,EAAS,WAAY,CAAE,SAAU,MAAO,CAAC,EAAE,KAAK,IAGhD,UAAYD,EAAG,KAAK,IAAM,QAC7C,MAAO,QAEX,MAAgB,CAEhB,CACF,CAEA,MAAMG,EAAOH,EAAG,KAAK,EACrB,GAAIG,IAAS,QAAS,MAAO,QAC7B,GAAIA,IAAS,MAAO,MAAO,SAC3B,MAAM,IAAI,MAAM,6BAA6BA,CAAI,EAAE,CACrD,EAEA,IAAOC,EAAQF",
  "names": ["os", "execSync", "get_architecture", "arch", "get_architecture_default"]
}
