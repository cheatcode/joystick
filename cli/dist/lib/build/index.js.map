{
  "version": 3,
  "sources": ["../../../src/lib/build/index.js"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport child_process from \"child_process\";\nimport fs from 'fs';\nimport { dirname } from 'path';\nimport util from 'util';\nimport build_files from \"./build_files.js\";\nimport get_files_to_build from \"./get_files_to_build.js\";\nimport get_file_operation from \"./get_file_operation.js\";\nimport get_path_platform from \"./get_path_platform.js\";\nimport get_tar_ignore_list from \"./get_tar_ignore_list.js\";\nimport load_settings from \"../load_settings.js\";\nimport Loader from \"../loader.js\";\nimport path_exists from \"../path_exists.js\";\nimport encrypt_buffer from '../../lib/encrypt_buffer.js';\n\nconst { mkdir, copyFile, readFile, writeFile, readdir } = fs.promises;\nconst exec = util.promisify(child_process.exec);\n\nconst get_custom_copy_paths = async (copy_paths_from_settings = []) => {\n  const custom_copy_paths = [];\n\n  for (let i = 0; i < copy_paths_from_settings?.length; i += 1) {\n    const custom_copy_path = copy_paths_from_settings[i];\n\n    if (fs.existsSync(custom_copy_path)) {\n      const stat = fs.lstatSync(custom_copy_path);\n\n      if (stat.isDirectory()) {\n        const paths = await readdir(custom_copy_path, { recursive: true });\n        custom_copy_paths.push(\n          ...(paths || [])?.map((path) => {\n            return `${custom_copy_path}/${path}`;\n          })\n        );\n      } else {\n        custom_copy_paths.push(custom_copy_path);\n      }\n    }\n  }\n\n  return custom_copy_paths;\n};\n\nconst get_files_to_build_with_operation_and_platform = (files = []) => {\n  return files?.map((file) => {\n    return {\n      path: file,\n      operation: get_file_operation(file),\n      platform: get_path_platform(file),\n    }\n  });\n};\n\nconst build = async (options = {}) => {\n  const loader = new Loader();\n\n  const build_type = options?.type || 'tar';\n  const environment = options?.environment || \"production\";\n\n  loader.print(`Building app to ${build_type} for ${environment}...`);\n\n  const settings = await load_settings(environment);\n  const excluded_paths = settings?.config?.build?.excluded_paths || settings?.config?.build?.excludedPaths;\n  const custom_copy_paths = await get_custom_copy_paths(settings?.config?.build?.copy_paths);\n\n  const files_for_build = await get_files_to_build(excluded_paths, custom_copy_paths);\n  const output_path = build_type === 'tar' ? '.build/.tar' : '.build';\n  const files_to_build_with_operation_and_platform = get_files_to_build_with_operation_and_platform(files_for_build);\n\n  if (await path_exists('.build')) {\n    await exec(`rm -rf .build`);\n  }\n\n  const files_to_copy = [\n    ...files_to_build_with_operation_and_platform?.filter((file) => {\n      return file?.operation === 'copy_file';\n    }),\n    ...(custom_copy_paths || [])?.map((custom_copy_path) => {\n      return { path: custom_copy_path };\n    }),\n  ];\n\n  const files_to_build = files_to_build_with_operation_and_platform?.filter((file) => {\n    return file?.operation === 'build_file';\n  });\n\n  for (let i = 0; i < files_to_copy?.length; i += 1) {\n    const file_to_copy = files_to_copy[i];\n    const stat = fs.lstatSync(file_to_copy?.path);\n\n    if (stat.isFile()) {\n      await mkdir(dirname(`${output_path}/${file_to_copy?.path}`), { recursive: true });\n      await copyFile(file_to_copy?.path, `${output_path}/${file_to_copy?.path}`);\n    }\n  }\n\n  await build_files({\n    files: files_to_build,\n    environment,\n    output_path,\n  }).catch((error) => {\n    console.warn(error);\n  });\n\n  if (build_type === \"tar\") {\n    const ignore_list = get_tar_ignore_list(settings?.config?.build?.excludedPaths);\n\n    await exec(\n      `cd ${output_path} && tar --exclude=${ignore_list} -czf ../build.tar.gz .`\n    );\n\n    await exec(`rm -rf ${output_path}`);\n  }\n\n  if (build_type === \"tar\" && options?.encrypt_build) {\n    const build_path = output_path?.replace('/.tar', '/build.tar.gz');\n\n    const encrypted_build = encrypt_buffer(\n      await readFile(build_path),\n      options?.encryption_key,\n    );\n\n    await writeFile(`.build/build.encrypted.tar.gz`, encrypted_build);\n  }\n\n  if (!options?.silence_confirmation) {\n    console.log(\n      chalk.greenBright(`\\n\u2714 App built as ${build_type} to ${build_type === 'tar' ? output_path?.replace('/.tar', '/build.tar.gz') : output_path}!\\n`)\n    );\n  }\n\n  if (await path_exists('.build/component_id_cache.json')) {\n    await exec(`rm -rf .build/component_id_cache.json`);\n  }\n};\n\nexport default build;\n"],
  "mappings": "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",
  "names": ["chalk", "child_process", "fs", "dirname", "util", "build_files", "get_files_to_build", "get_file_operation", "get_path_platform", "get_tar_ignore_list", "load_settings", "Loader", "path_exists", "encrypt_buffer", "mkdir", "copyFile", "readFile", "writeFile", "readdir", "exec", "get_custom_copy_paths", "copy_paths_from_settings", "custom_copy_paths", "i", "custom_copy_path", "paths", "path", "get_files_to_build_with_operation_and_platform", "files", "file", "build", "options", "loader", "build_type", "environment", "settings", "excluded_paths", "files_for_build", "output_path", "files_to_build_with_operation_and_platform", "files_to_copy", "files_to_build", "file_to_copy", "error", "ignore_list", "build_path", "encrypted_build", "index_default"]
}
