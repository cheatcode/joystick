import i from"fs";import l,{dirname as u}from"path";import*as d from"acorn";import f from"../../path_exists.js";const{readFile:S,writeFile:D}=i.promises,y=(r="",t={})=>(t?.body?.filter(e=>{const s=e&&e.type,n=e&&e.declarations||[],o=s==="VariableDeclaration",p=n.some(c=>{const _=c.type==="VariableDeclarator",m=c?.init?.callee?.name;return _&&m==="require"});return o&&p})).map(e=>{const s=e.declarations,n=s&&s[0],o=n?.init?.arguments[0]&&n.init.arguments[0]?.value;return{absolute_path:o?l.resolve(u(r),o):null}}),b=(r="",t={})=>(t?.body?.filter(({type:e})=>e==="ImportDeclaration")||[]).map(e=>({path:e?.source?.value,absolute_path:l.resolve(u(r),e?.source?.value)})),v=(r="",t={})=>{const a=b(r,t),e=y(r,t);return{imports:a,requires:e}},q=(r="")=>d.parse(r,{ecmaVersion:"latest",sourceType:"module"}),g=async()=>{const r=".joystick/build/file_map.json";if(await f(r)){const t=i.readFileSync(r,"utf-8");return t?JSON.parse(t):{}}return{}},h=async(r="",t="")=>{try{const a=await g(),e=q(t),s=e?v(r,e):[];a[r]=s,i.writeFileSync(".joystick/build/file_map.json",JSON.stringify(a,null,2))}catch{}};var V=h;export{V as default};
//# sourceMappingURL=update_file_map.js.map
