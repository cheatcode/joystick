{
  "version": 3,
  "sources": ["../../../src/lib/build/build_files.js"],
  "sourcesContent": ["import esbuild from \"esbuild\";\nimport svg from \"esbuild-plugin-svg\";\nimport build_plugins from \"./plugins/index.js\";\nimport get_code_frame from \"./get_code_frame.js\";\nimport minify_file from \"../build/minify_file.js\";\nimport on_warn from \"./on_warn.js\";\nimport path_exists from '../path_exists.js';\n\nconst handle_build_exception = async (exception = {}, file = '') => {\n  const error = exception?.errors && exception?.errors[0];\n  const snippet = await path_exists(file) ? await get_code_frame(file, {\n    line: error?.location?.line,\n    column: error?.location?.column,\n  }) : null;\n\n  await on_warn({\n    file,\n    stack: exception?.stack,\n    line: error?.location?.line,\n    column: error?.location?.column,\n    snippet,\n    lineWithError: error?.location?.lineText?.trim(),\n    message: error?.text,\n  });\n\n  return snippet;\n};\n\nconst handle_parse_file_path_from_exception = (exception = {}) => {\n  const raw_error_message = exception?.message?.split(':');\n\n  // NOTE: If the build error pertains to a file that esbuild CANNOT build, the\n  // structure of the error is slightly different, placing the file(s) w/ errors\n  // after the string \"files:\" (which lands at index 3 in the split array).\n  if (raw_error_message[2] && raw_error_message[2]?.includes('No loader')) {\n    return raw_error_message[3] && raw_error_message[3]?.replace('\\n', '') || '';\n  }\n\n  // NOTE: IF the build error is just a syntax error, the offending file will be\n  // palced at index 1.\n  return raw_error_message[1] && raw_error_message[1]?.replace('\\n', '') || '';\n};\n\nconst handle_build_failure = async (exception = {}) => {\n  const file = handle_parse_file_path_from_exception(exception);\n  const snippet = await handle_build_exception(exception, file);\n  \n  return {\n    success: false,\n    path: file,\n    error: {\n      stack: exception?.stack,\n      snippet,\n    },\n  };\n};\n\nconst handle_build_for_node = (node_paths = [], options = {}) => {\n  return esbuild.build({\n    allowOverwrite: true,\n    platform: \"node\",\n    format: \"esm\",\n    bundle: false,\n    sourcemap: true,\n    entryPoints: node_paths?.map((file) => file.path),\n    entryNames: '[dir]/[name]',\n    outdir: options?.output_path || \"./.joystick/build\",\n    outbase: './',\n    define: {\n      \"process.env.NODE_ENV\": `'${options?.environment || 'development'}'`,\n    },\n    logLevel: \"silent\",\n    plugins: [\n      build_plugins.warn_node_environment,\n      build_plugins.generate_file_dependency_map\n    ],\n  }).catch((error) => {\n    console.warn('NODE', error);\n  });\n};\n\nconst handle_build_for_browser = (browser_paths = [], options = {}) => {\n  return esbuild.build({\n    allowOverwrite: true,\n    target: \"es2022\",\n    platform: \"browser\",\n    format: \"esm\",\n    bundle: true,\n    sourcemap: true,\n    entryPoints: browser_paths?.map((file) => file.path),\n    entryNames: '[dir]/[name]',\n    outbase: './',\n    outdir: options?.output_path || \"./.joystick/build\",\n    define: {\n      \"process.env.NODE_ENV\": `'${options?.environment || 'development'}'`,\n    },\n    logLevel: 'silent',\n    loader: {\n      '.svg': 'text',\n    },\n    plugins: [\n      build_plugins.warn_node_environment,\n      build_plugins.generate_file_dependency_map,\n      build_plugins.bootstrap_component,\n      svg(),\n    ]\n  }).catch((error) => {\n    console.warn('BROWSER', error);\n  });\n};\n\nconst build_files = async (options) => {\n  const dirty_files = ['.DS_Store'];\n  \n  const node_files = options?.files?.filter((file) => {\n    return !dirty_files?.some((dirty_file) => {\n      return file?.path?.includes(dirty_file);\n    });\n  })?.filter((file) => file?.platform === 'node');\n\n  const browser_files = options?.files?.filter((file) => {\n    return !dirty_files?.some((dirty_file) => {\n      return file?.path?.includes(dirty_file);\n    });\n  })?.filter((file) => file?.platform === 'browser');\n  \n  let node_file_results = [];\n  let browser_file_results = [];\n\n  if (node_files?.length > 0) {\n    node_file_results = [await handle_build_for_node(node_files, options)\n      .then(() => {\n        return { success: true };\n      }).catch((exception) => handle_build_failure(exception))];\n  }\n\n  if (browser_files?.length > 0) {\n    browser_file_results = [await handle_build_for_browser(browser_files, options)\n      .then(() => {\n        return { success: true };\n      }).catch((exception) => handle_build_failure(exception))];\n  }\n\n  const node_files_have_errors = node_file_results?.some((node_file_result) => !node_file_result?.success);\n  const browser_files_have_errors = browser_file_results?.some((browser_file_result) => !browser_file_result?.success);\n\n  if (node_files_have_errors || browser_files_have_errors) {\n    return Promise.reject([\n      ...node_file_results,\n      ...browser_file_results,\n    ]);\n  }\n  \n  if (options?.environment && options?.environment !== 'development') {\n    await Promise.all([...browser_files, ...node_files].map((file) => {\n      return minify_file(`${options?.output_path || \"./.joystick/build\"}/${file.path}`);\n    })); \n  }\n  \n  return [\n    ...node_file_results,\n    ...browser_file_results,\n  ];\n};\n\nexport default build_files;\n"],
  "mappings": "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",
  "names": ["esbuild", "svg", "build_plugins", "get_code_frame", "minify_file", "on_warn", "path_exists", "handle_build_exception", "exception", "file", "error", "snippet", "handle_parse_file_path_from_exception", "raw_error_message", "handle_build_failure", "handle_build_for_node", "node_paths", "options", "handle_build_for_browser", "browser_paths", "build_files", "dirty_files", "node_files", "dirty_file", "browser_files", "node_file_results", "browser_file_results", "node_files_have_errors", "node_file_result", "browser_files_have_errors", "browser_file_result", "build_files_default"]
}
