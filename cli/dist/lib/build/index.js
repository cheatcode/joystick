import g from"chalk";import y from"child_process";import s from"fs";import{dirname as w}from"path";import $ from"util";import x from"./build_files.js";import z from"./get_files_to_build.js";import v from"./get_file_operation.js";import k from"./get_path_platform.js";import F from"./get_tar_ignore_list.js";import j from"../load_settings.js";import B from"../loader.js";import f from"../path_exists.js";import P from"../../lib/encrypt_buffer.js";const{mkdir:S,copyFile:A,readFile:D,writeFile:L,readdir:q}=s.promises,c=$.promisify(y.exec),C=(r=[])=>r?.map(n=>({path:n,operation:v(n),platform:k(n)})),E=async(r={})=>{const n=new B,e=r?.type||"tar",l=r?.environment||"production";n.print(`Building app to ${e} for ${l}...`);const a=await j(l),u=a?.config?.build?.excluded_paths||a?.config?.build?.excludedPaths,m=await z(u),o=e==="tar"?".build/.tar":".build",_=C(m);await f(".build")&&await c("rm -rf .build"),console.log(a?.config?.build?.copy_paths);const p=[];for(let t=0;t<a?.config?.build?.copy_paths?.length;t+=1){const i=a?.config?.build?.copy_paths[t];if(s.existsSync(i)){const h=s.lstatSync(i).isDirectory()?await q(i,{recursive:!0}):[i];p.push(...h||[])}}console.log(p);const d=[..._?.filter(t=>t?.operation==="copy_file"),...(p||[])?.map(t=>({path:t}))],b=_?.filter(t=>t?.operation==="build_file");for(let t=0;t<d?.length;t+=1){const i=d[t];await S(w(`${o}/${i?.path}`),{recursive:!0}),await A(i?.path,`${o}/${i?.path}`)}if(await x({files:b,environment:l,output_path:o}).catch(t=>{console.warn(t)}),e==="tar"){const t=F(a?.config?.build?.excludedPaths);await c(`cd ${o} && tar --exclude=${t} -czf ../build.tar.gz .`),await c(`rm -rf ${o}`)}if(e==="tar"&&r?.encrypt_build){const t=o?.replace("/.tar","/build.tar.gz"),i=P(await D(t),r?.encryption_key);await L(".build/build.encrypted.tar.gz",i)}r?.silence_confirmation||console.log(g.greenBright(`
\u2714 App built as ${e} to ${e==="tar"?o?.replace("/.tar","/build.tar.gz"):o}!
`)),await f(".build/component_id_cache.json")&&await c("rm -rf .build/component_id_cache.json")};var Y=E;export{Y as default};
