import w from"chalk";import $ from"child_process";import l from"fs";import{dirname as x}from"path";import z from"util";import v from"./build_files.js";import F from"./get_files_to_build.js";import k from"./get_file_operation.js";import S from"./get_path_platform.js";import j from"./get_tar_ignore_list.js";import B from"../load_settings.js";import P from"../loader.js";import d from"../path_exists.js";import A from"../../lib/encrypt_buffer.js";const{mkdir:D,copyFile:L,readFile:q,writeFile:C,readdir:E}=l.promises,s=z.promisify($.exec),G=(r=[])=>r?.map(a=>({path:a,operation:k(a),platform:S(a)})),H=async(r={})=>{const a=new P,e=r?.type||"tar",p=r?.environment||"production";a.print(`Building app to ${e} for ${p}...`);const n=await B(p),u=n?.config?.build?.excluded_paths||n?.config?.build?.excludedPaths,c=[];for(let t=0;t<n?.config?.build?.copy_paths?.length;t+=1){const i=n?.config?.build?.copy_paths[t];if(l.existsSync(i))if(l.lstatSync(i).isDirectory()){const g=await E(i,{recursive:!0});c.push(...(g||[])?.map(y=>`${i}/${y}`))}else c.push(i)}console.log(c);const m=await F(u,c),o=e==="tar"?".build/.tar":".build",_=G(m);await d(".build")&&await s("rm -rf .build");const f=[..._?.filter(t=>t?.operation==="copy_file"),...(c||[])?.map(t=>({path:t}))],h=_?.filter(t=>t?.operation==="build_file");for(let t=0;t<f?.length;t+=1){const i=f[t];l.lstatSync(i?.path).isFile()&&(await D(x(`${o}/${i?.path}`),{recursive:!0}),await L(i?.path,`${o}/${i?.path}`))}if(await v({files:h,environment:p,output_path:o}).catch(t=>{console.warn(t)}),e==="tar"){const t=j(n?.config?.build?.excludedPaths);await s(`cd ${o} && tar --exclude=${t} -czf ../build.tar.gz .`),await s(`rm -rf ${o}`)}if(e==="tar"&&r?.encrypt_build){const t=o?.replace("/.tar","/build.tar.gz"),i=A(await q(t),r?.encryption_key);await C(".build/build.encrypted.tar.gz",i)}r?.silence_confirmation||console.log(w.greenBright(`
\u2714 App built as ${e} to ${e==="tar"?o?.replace("/.tar","/build.tar.gz"):o}!
`)),await d(".build/component_id_cache.json")&&await s("rm -rf .build/component_id_cache.json")};var Z=H;export{Z as default};
