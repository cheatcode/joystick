import b from"chalk";import g from"child_process";import l from"fs";import{dirname as y}from"path";import w from"util";import $ from"./build_files.js";import x from"./get_files_to_build.js";import z from"./get_file_operation.js";import v from"./get_path_platform.js";import F from"./get_tar_ignore_list.js";import k from"../load_settings.js";import S from"../loader.js";import f from"../path_exists.js";import j from"../../lib/encrypt_buffer.js";const{mkdir:B,copyFile:P,readFile:A,writeFile:D,readdir:L}=l.promises,p=w.promisify(g.exec),q=async(i=[])=>{const r=[];for(let o=0;o<i?.length;o+=1){const e=i[o];if(l.existsSync(e))if(l.lstatSync(e).isDirectory()){const _=await L(e,{recursive:!0});r.push(...(_||[])?.map(s=>`${e}/${s}`))}else r.push(e)}return r},C=(i=[])=>i?.map(r=>({path:r,operation:z(r),platform:v(r)})),E=async(i={})=>{const r=new S,o=i?.type||"tar",e=i?.environment||"production";r.print(`Building app to ${o} for ${e}...`);const c=await k(e),_=c?.config?.build?.excluded_paths||c?.config?.build?.excludedPaths,s=await q(c?.config?.build?.copy_paths),m=await x(_,s),a=o==="tar"?".build/.tar":".build",u=C(m);await f(".build")&&await p("rm -rf .build");const d=[...u?.filter(t=>t?.operation==="copy_file"),...(s||[])?.map(t=>({path:t}))],h=u?.filter(t=>t?.operation==="build_file");for(let t=0;t<d?.length;t+=1){const n=d[t];l.lstatSync(n?.path).isFile()&&(await B(y(`${a}/${n?.path}`),{recursive:!0}),await P(n?.path,`${a}/${n?.path}`))}if(await $({files:h,environment:e,output_path:a}).catch(t=>{console.warn(t)}),o==="tar"){const t=F(c?.config?.build?.excludedPaths);await p(`cd ${a} && tar --exclude=${t} -czf ../build.tar.gz .`),await p(`rm -rf ${a}`)}if(o==="tar"&&i?.encrypt_build){const t=a?.replace("/.tar","/build.tar.gz"),n=j(await A(t),i?.encryption_key);await D(".build/build.encrypted.tar.gz",n)}i?.silence_confirmation||console.log(b.greenBright(`
\u2714 App built as ${o} to ${o==="tar"?a?.replace("/.tar","/build.tar.gz"):a}!
`)),await f(".build/component_id_cache.json")&&await p("rm -rf .build/component_id_cache.json")};var Y=E;export{Y as default};
