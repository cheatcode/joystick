import e from"os";import{execSync as c}from"child_process";const s=()=>{if(console.log("DEBUG: os.platform():",e.platform()),console.log("DEBUG: os.arch():",e.arch()),console.log("DEBUG: process.arch:",process.arch),console.log("DEBUG: process.env.ARCHPREFERENCE:",process.env.ARCHPREFERENCE),e.platform()==="darwin"){if(process.env.ARCHPREFERENCE==="i386"||process.env.ARCHPREFERENCE==="x86_64"||process.arch==="x64")return console.log("DEBUG: Detected x86_64 via environment/process.arch"),"x86_64";try{const o=c("sysctl -n sysctl.proc_translated 2>/dev/null || echo 0",{encoding:"utf8"}).trim();if(console.log("DEBUG: sysctl.proc_translated result:",o),o==="1")return console.log("DEBUG: Detected x86_64 via Rosetta translation"),"x86_64"}catch(o){console.log("DEBUG: sysctl command failed:",o.message)}try{const o=c("uname -m",{encoding:"utf8"}).trim();if(console.log("DEBUG: uname -m result:",o),o==="x86_64"&&e.arch()==="arm64")return console.log("DEBUG: Detected x86_64 via uname mismatch with os.arch()"),"x86_64"}catch(o){console.log("DEBUG: uname command failed:",o.message)}}const r=e.arch();if(console.log("DEBUG: Falling back to os.arch():",r),r==="arm64")return"arm64";if(r==="x64")return"x86_64";throw new Error(`Unsupported architecture: ${r}`)};var a=s;export{a as default};
//# sourceMappingURL=get_architecture.js.map
