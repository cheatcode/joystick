{
  "version": 3,
  "sources": ["../../../../src/commands/push_v2/prompts/confirm_deployment.js"],
  "sourcesContent": ["import AsciiTable from 'ascii-table';\nimport chalk from 'chalk';\n\nconst render_instance_row = (table, [continent_name = '', continent_instances = []]) => {\n\ttable.addRow(`${chalk.magenta(continent_name)}\\n`);\n\n\tfor (let i = 0; i < continent_instances?.length; i += 1) {\n\t\tconst instance = continent_instances[i];\n\t\ttable.addRow(\n\t\t\t`${chalk.yellow(instance?.provider)} (${chalk.green(instance?.region)})`,\n\t\t\t`${chalk.white(instance?.size)}  $${chalk.green(instance?.pricePerMonth)}/mo.  x${chalk.blue(instance?.quantity)}  ${chalk.white('=')}  $${chalk.green((instance?.quantity * instance?.pricePerMonth))}/mo.${i + 1 === continent_instances?.length ? '\\n' : ''}`,\n\t\t);\n\t}\n};\n\nconst get_total_monthly_cost_for_instances = (instances = []) => {\n\tconst instances_by_continent = Object.values(instances)?.flatMap((instances_for_continent) => instances_for_continent);\n\treturn instances_by_continent?.reduce((total = 0, instance = {}) => {\n\t\ttotal += instance?.pricePerMonth * instance?.quantity;\n\t\treturn total;\n\t}, 0);\n};\n\nconst confirm_deployment = (instances = {}) => {\n\tconst load_balancer_total_per_month = get_total_monthly_cost_for_instances(instances?.load_balancer);\n\tconst app_total_per_month = get_total_monthly_cost_for_instances(instances?.app);\n\tconst total_monthly_cost = load_balancer_total_per_month + app_total_per_month;\n\n\tconst table = new AsciiTable();\n\n\ttable.removeBorder();\n\ttable.addRow(`${chalk.blue('Load Balancer')}\\n`);\n\n\tconst load_balancer_continents = Object.entries(instances?.load_balancer);\n\tconst app_continents = Object.entries(instances?.app);\n\n\tfor (let i = 0; i < load_balancer_continents?.length; i += 1) {\n\t\trender_instance_row(table, load_balancer_continents[i]);\n\t}\n\n\ttable.addRow(`\\n  ${chalk.blue('App')}\\n`);\n\n\tfor (let i = 0; i < app_continents?.length; i += 1) {\n\t\trender_instance_row(table, app_continents[i]);\n\t}\n\t\n\ttable.addRow(chalk.white('\\n  ---\\n'));\n\t\n\ttable.addRow(\n\t\tchalk.green('Monthly Cost'),\n\t\tchalk.white(`$${chalk.green(total_monthly_cost)}/mo.`)\n\t);\n\n\ttable.addRow(\n\t\tchalk.green('Annual Cost'),\n\t\tchalk.white(`$${chalk.green(total_monthly_cost * 12)}/yr.`)\n\t);\n\n\tconst is_abnormal = total_monthly_cost > 100;\n\n\treturn [{\n\t  name: 'confirm_deployment',\n\t  type: 'confirm',\n\t  prefix: '',\n\t  message: `\\n ${chalk.greenBright('>')} Start deployment and provision these instances?`,\n\t  suffix: `\n\t  \\n${table.toString()}\n\t  ${is_abnormal ? `\\n\\n  ${chalk.yellowBright(`!!! >>> These costs are ${chalk.magenta('high')}. Be absolutely ${chalk.magenta('CERTAIN')} you want to run this deployment. <<< !!!`)}\n\t  \\n ` : '\\n'}`,\n\t}];\n};\n\nexport default confirm_deployment;\n"],
  "mappings": "AAAA,OAAOA,MAAgB,cACvB,OAAOC,MAAW,QAElB,MAAMC,EAAsB,CAACC,EAAO,CAACC,EAAiB,GAAIC,EAAsB,CAAC,CAAC,IAAM,CACvFF,EAAM,OAAO,GAAGF,EAAM,QAAQG,CAAc,CAAC;AAAA,CAAI,EAEjD,QAASE,EAAI,EAAGA,EAAID,GAAqB,OAAQC,GAAK,EAAG,CACxD,MAAMC,EAAWF,EAAoBC,CAAC,EACtCH,EAAM,OACL,GAAGF,EAAM,OAAOM,GAAU,QAAQ,CAAC,KAAKN,EAAM,MAAMM,GAAU,MAAM,CAAC,IACrE,GAAGN,EAAM,MAAMM,GAAU,IAAI,CAAC,MAAMN,EAAM,MAAMM,GAAU,aAAa,CAAC,UAAUN,EAAM,KAAKM,GAAU,QAAQ,CAAC,KAAKN,EAAM,MAAM,GAAG,CAAC,MAAMA,EAAM,MAAOM,GAAU,SAAWA,GAAU,aAAc,CAAC,OAAOD,EAAI,IAAMD,GAAqB,OAAS;AAAA,EAAO,EAAE,EAC/P,CACD,CACD,EAEMG,EAAuC,CAACC,EAAY,CAAC,IAC3B,OAAO,OAAOA,CAAS,GAAG,QAASC,GAA4BA,CAAuB,GACtF,OAAO,CAACC,EAAQ,EAAGJ,EAAW,CAAC,KAC7DI,GAASJ,GAAU,cAAgBA,GAAU,SACtCI,GACL,CAAC,EAGCC,EAAqB,CAACH,EAAY,CAAC,IAAM,CAC9C,MAAMI,EAAgCL,EAAqCC,GAAW,aAAa,EAC7FK,EAAsBN,EAAqCC,GAAW,GAAG,EACzEM,EAAqBF,EAAgCC,EAErDX,EAAQ,IAAIH,EAElBG,EAAM,aAAa,EACnBA,EAAM,OAAO,GAAGF,EAAM,KAAK,eAAe,CAAC;AAAA,CAAI,EAE/C,MAAMe,EAA2B,OAAO,QAAQP,GAAW,aAAa,EAClEQ,EAAiB,OAAO,QAAQR,GAAW,GAAG,EAEpD,QAASH,EAAI,EAAGA,EAAIU,GAA0B,OAAQV,GAAK,EAC1DJ,EAAoBC,EAAOa,EAAyBV,CAAC,CAAC,EAGvDH,EAAM,OAAO;AAAA,IAAOF,EAAM,KAAK,KAAK,CAAC;AAAA,CAAI,EAEzC,QAASK,EAAI,EAAGA,EAAIW,GAAgB,OAAQX,GAAK,EAChDJ,EAAoBC,EAAOc,EAAeX,CAAC,CAAC,EAG7CH,EAAM,OAAOF,EAAM,MAAM;AAAA;AAAA,CAAW,CAAC,EAErCE,EAAM,OACLF,EAAM,MAAM,cAAc,EAC1BA,EAAM,MAAM,IAAIA,EAAM,MAAMc,CAAkB,CAAC,MAAM,CACtD,EAEAZ,EAAM,OACLF,EAAM,MAAM,aAAa,EACzBA,EAAM,MAAM,IAAIA,EAAM,MAAMc,EAAqB,EAAE,CAAC,MAAM,CAC3D,EAEA,MAAMG,EAAcH,EAAqB,IAEzC,MAAO,CAAC,CACN,KAAM,qBACN,KAAM,UACN,OAAQ,GACR,QAAS;AAAA,GAAMd,EAAM,YAAY,GAAG,CAAC,mDACrC,OAAQ;AAAA;AAAA,EACJE,EAAM,SAAS,CAAC;AAAA,KAClBe,EAAc;AAAA;AAAA,IAASjB,EAAM,aAAa,2BAA2BA,EAAM,QAAQ,MAAM,CAAC,mBAAmBA,EAAM,QAAQ,SAAS,CAAC,2CAA2C,CAAC;AAAA;AAAA,GAC5K;AAAA,CAAI,EACb,CAAC,CACF,EAEA,IAAOkB,EAAQP",
  "names": ["AsciiTable", "chalk", "render_instance_row", "table", "continent_name", "continent_instances", "i", "instance", "get_total_monthly_cost_for_instances", "instances", "instances_for_continent", "total", "confirm_deployment", "load_balancer_total_per_month", "app_total_per_month", "total_monthly_cost", "load_balancer_continents", "app_continents", "is_abnormal", "confirm_deployment_default"]
}
