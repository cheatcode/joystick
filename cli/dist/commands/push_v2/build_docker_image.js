import{exec as f,execSync as k}from"child_process";import n from"path";import{fileURLToPath as _}from"url";import g from"fs";const $=_(import.meta.url),c=n.dirname($),D=()=>{try{return k("docker --version",{stdio:"ignore"}),!0}catch{return!1}},P=(r="",s="",{apt_deps:l=[],snap_deps:d=[],npm_deps:a=[]}={})=>new Promise((u,i)=>{if(!D()){console.log(`
`),process.loader.print("Push requires Docker to deploy your app. Please visit https://docs.docker.com/get-started/get-docker/ to download Docker for your OS."),console.log(`
`),process.exit();return}process.loader.print("Building Docker image for deployment...");const e=n.join(c,"Dockerfile");if(!g.existsSync(e)){i(new Error(`Dockerfile not found at ${e}`));return}const p=`docker build ${[`CUSTOM_APT_DEPS=${l.join(" ")}`,`CUSTOM_SNAP_DEPS=${d.join(" ")}`,`GLOBAL_NPM_PACKAGES=${a.join(" ")}`].map(o=>`--build-arg ${o}`).join(" ")} -t ${r} -f "${e}" "${s||c}"`;f(p,(o,m,t)=>{if(o){console.error(`Error building Docker image: ${o.message}`),i(o);return}t&&console.error(`Docker build stderr: ${t}`),process.loader.print(m),process.loader.print(`Successfully built Docker image: ${r}`),u()})});var A=P;export{A as default};
