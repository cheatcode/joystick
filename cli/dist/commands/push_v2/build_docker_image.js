import{exec as g,execSync as y}from"child_process";import l from"path";import{fileURLToPath as x}from"url";import a from"fs";import p from"os";import b from"tar";import D from"adm-zip";import{promisify as S}from"util";import{pipeline as E}from"stream";import P from"node-fetch";const z=S(E),j=x(import.meta.url),w=l.dirname(j),d=l.join(p.homedir(),".joystick","docker"),f=()=>l.join(d,p.platform()==="win32"?"docker.exe":"docker"),A=()=>{const r=f();try{return y(`"${r}" --version`,{stdio:"ignore"}),!0}catch{return console.warn("Warning: Docker is not installed or the binary is not accessible."),!1}},T=async()=>{const r=p.platform(),e=p.arch();let i,s;const t="27.1.2";if(r==="linux"&&e==="x64")i=`https://download.docker.com/linux/static/stable/x86_64/docker-${t}.tgz`,s=`docker-${t}.tgz`;else if(r==="win32"&&e==="x64")i=`https://download.docker.com/win/static/stable/x86_64/docker-${t}.zip`,s=`docker-${t}.zip`;else if(r==="darwin"){if(e==="arm64")i=`https://download.docker.com/mac/static/stable/aarch64/docker-${t}.tgz`;else if(e==="x64")i=`https://download.docker.com/mac/static/stable/x86_64/docker-${t}.tgz`;else throw new Error(`Unsupported architecture for macOS: ${e}`);s=`docker-${t}.tgz`}else throw new Error(`Unsupported platform or architecture: ${r} ${e}`);a.mkdirSync(d,{recursive:!0});const n=l.join(d,s);try{process.loader.print(`Downloading Docker binary from ${i}`);const o=await P(i);if(!o.ok)throw new Error(`Unexpected response ${o.statusText}`);await z(o.body,a.createWriteStream(n)),process.loader.print("Download completed"),r==="win32"?(process.loader.print("Extracting ZIP file"),new D(n).extractAllTo(d,!0)):(process.loader.print("Extracting TAR file"),await b.x({file:n,cwd:d,strip:1})),a.unlinkSync(n),r!=="win32"&&a.chmodSync(f(),"755"),process.loader.print(`Docker binaries downloaded and extracted to ${d}`)}catch(o){throw process.loader.print(`Error: ${o.message}`),a.existsSync(n)&&(process.loader.print("Cleaning up partial download"),a.unlinkSync(n)),new Error(`Failed to download or extract Docker binary: ${o.message}`)}},U=(r="",e="",{apt_deps:i=[],snap_deps:s=[],npm_deps:t=[]}={})=>new Promise(async(n,o)=>{if(!A()){process.loader.print("Push requires Docker to be installed on your machine. Downloading...");try{await T(),process.loader.print("Docker installed!")}catch(c){o(new Error(`Failed to download Docker binary: ${c.message}`));return}}process.loader.print("Building Docker image for deployment...");const k=f(),m=l.join(w,"Dockerfile");if(!a.existsSync(m)){o(new Error(`Dockerfile not found at ${m}`));return}const h=[`CUSTOM_APT_DEPS=${i.join(" ")}`,`CUSTOM_SNAP_DEPS=${s.join(" ")}`,`GLOBAL_NPM_PACKAGES=${t.join(" ")}`].map(c=>`--build-arg ${c}`).join(" "),_=`"${k}" build ${h} -t ${r} -f "${m}" "${e||w}"`;g(_,(c,$,u)=>{if(c){console.error(`Error building Docker image: ${c.message}`),o(c);return}u&&console.error(`Docker build stderr: ${u}`),process.loader.print($),process.loader.print(`Successfully built Docker image: ${r}`),n()})});var W=U;export{W as default};
