import{exec as g,execSync as $}from"child_process";import l from"path";import{fileURLToPath as b}from"url";import n from"fs";import p from"os";import D from"tar";import x from"adm-zip";import{promisify as S}from"util";import{pipeline as E}from"stream";import P from"node-fetch";const j=S(E),z=b(import.meta.url),u=l.dirname(z),a=l.join(p.homedir(),".joystick","docker"),f=()=>l.join(a,p.platform()==="win32"?"docker.exe":"docker"),A=()=>{const r=f();try{return $(`"${r}" --version`,{stdio:"ignore"}),!0}catch{return console.warn("Warning: Docker is not installed or the binary is not accessible."),!1}},T=async()=>{const r=p.platform(),s=p.arch();let t,c;if(r==="linux")t=`https://download.docker.com/linux/static/stable/${s}/docker-24.0.7.tgz`,c="docker.tgz";else if(r==="darwin")t=`https://download.docker.com/mac/static/stable/${s}/docker-24.0.7.tgz`,c="docker.tgz";else if(r==="win32")t="https://download.docker.com/win/static/stable/x86_64/docker-24.0.7.zip",c="docker.zip";else throw new Error("Unsupported operating system");n.mkdirSync(a,{recursive:!0});const o=l.join(a,c);try{process.loader.print(`Downloading Docker binary from ${t}`);const e=await P(t);if(!e.ok)throw new Error(`Unexpected response ${e.statusText}`);await j(e.body,n.createWriteStream(o)),process.loader.print("Download completed"),r==="win32"?(process.loader.print("Extracting ZIP file"),new x(o).extractAllTo(a,!0)):(process.loader.print("Extracting TAR file"),await D.x({file:o,cwd:a,strip:1})),n.unlinkSync(o),r!=="win32"&&n.chmodSync(f(),"755"),process.loader.print(`Docker binaries downloaded and extracted to ${a}`)}catch(e){throw process.loader.print(`Error: ${e.message}`),n.existsSync(o)&&(process.loader.print("Cleaning up partial download"),n.unlinkSync(o)),new Error(`Failed to download or extract Docker binary: ${e.message}`)}},U=(r="",s="",{apt_deps:t=[],snap_deps:c=[],npm_deps:o=[]}={})=>new Promise(async(e,d)=>{if(!A()){process.loader.print("Push requires Docker to be installed on your machine. Downloading...");try{await T(),process.loader.print("Docker installed!")}catch(i){d(new Error(`Failed to download Docker binary: ${i.message}`));return}}process.loader.print("Building Docker image for deployment...");const w=f(),m=l.join(u,"Dockerfile");if(!n.existsSync(m)){d(new Error(`Dockerfile not found at ${m}`));return}const h=[`CUSTOM_APT_DEPS=${t.join(" ")}`,`CUSTOM_SNAP_DEPS=${c.join(" ")}`,`GLOBAL_NPM_PACKAGES=${o.join(" ")}`].map(i=>`--build-arg ${i}`).join(" "),_=`"${w}" build ${h} -t ${r} -f "${m}" "${s||u}"`;g(_,(i,y,k)=>{if(i){console.error(`Error building Docker image: ${i.message}`),d(i);return}k&&console.error(`Docker build stderr: ${k}`),process.loader.print(y),process.loader.print(`Successfully built Docker image: ${r}`),e()})});var W=U;export{W as default};
