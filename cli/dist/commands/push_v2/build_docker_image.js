import{exec as y,execSync as $}from"child_process";import l from"path";import{fileURLToPath as b}from"url";import D from"https";import a from"fs";import d from"os";import S from"tar";import x from"adm-zip";const P=b(import.meta.url),u=l.dirname(P),s=l.join(d.homedir(),".joystick","docker"),k=()=>l.join(s,d.platform()==="win32"?"docker.exe":"docker"),j=()=>{const o=k();try{return $(`"${o}" --version`,{stdio:"ignore"}),!0}catch{return console.warn("Warning: Docker is not installed or the binary is not accessible."),!1}},z=(o,e)=>new Promise((t,i)=>{const r=a.createWriteStream(e);D.get(o,c=>{c.pipe(r),r.on("finish",()=>{r.close(t)})}).on("error",c=>{a.unlink(e,()=>i(c))})}),A=async()=>{const o=d.platform(),e=d.arch();let t,i;if(o==="linux")t=`https://download.docker.com/linux/static/stable/${e}/docker-24.0.7.tgz`,i="docker.tgz";else if(o==="darwin")t=`https://download.docker.com/mac/static/stable/${e}/docker-24.0.7.tgz`,i="docker.tgz";else if(o==="win32")t="https://download.docker.com/win/static/stable/x86_64/docker-24.0.7.zip",i="docker.zip";else throw new Error("Unsupported operating system");a.mkdirSync(s,{recursive:!0});const r=l.join(s,i);await z(t,r),o==="win32"?new x(r).extractAllTo(s,!0):await S.x({file:r,cwd:s,strip:1}),a.unlinkSync(r),o!=="win32"&&a.chmodSync(k(),"755"),process.loader.print(`Docker binaries downloaded and extracted to ${s}`)},E=(o="",e="",{apt_deps:t=[],snap_deps:i=[],npm_deps:r=[]}={})=>new Promise(async(c,p)=>{if(!j()){process.loader.print("Push requires Docker to be installed on your machine. Downloading...");try{await A(),process.loader.print("Docker installed!")}catch(n){p(new Error(`Failed to download Docker binary: ${n.message}`));return}}process.loader.print("Building Docker image for deployment...");const _=k(),m=l.join(u,"Dockerfile");if(!a.existsSync(m)){p(new Error(`Dockerfile not found at ${m}`));return}const h=[`CUSTOM_APT_DEPS=${t.join(" ")}`,`CUSTOM_SNAP_DEPS=${i.join(" ")}`,`GLOBAL_NPM_PACKAGES=${r.join(" ")}`].map(n=>`--build-arg ${n}`).join(" "),w=`"${_}" build ${h} -t ${o} -f "${m}" "${e||u}"`;y(w,(n,g,f)=>{if(n){console.error(`Error building Docker image: ${n.message}`),p(n);return}f&&console.error(`Docker build stderr: ${f}`),process.loader.print(g),process.loader.print(`Successfully built Docker image: ${o}`),c()})});var G=E;export{G as default};
