{
  "version": 3,
  "sources": ["../../../src/commands/push_v2/build_docker_image.js"],
  "sourcesContent": ["import { exec, execSync } from 'child_process';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport fs from 'fs';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst check_docker_installation = () => {\n  try {\n    execSync('docker --version', { stdio: 'ignore' });\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst build_docker_image = (\n  image_name = '',\n  context_path = '',\n  {\n    apt_deps = [],\n    npm_deps = []\n  } = {}\n) => {\n  return new Promise((resolve, reject) => {\n    if (!check_docker_installation()) {\n      process.loader.print(\"Push requires Docker to deploy your app. Please visit https://docs.docker.com/get-started/get-docker/ to download Docker for your OS.\");\n      reject(new Error(\"Docker is not installed or not in the PATH\"));\n      return;\n    }\n\n    process.loader.print('Building Docker image for deployment...');\n    \n    const dockerfile_path = path.join(__dirname, 'Dockerfile');\n    \n    if (!fs.existsSync(dockerfile_path)) {\n      reject(new Error(`Dockerfile not found at ${dockerfile_path}`));\n      return;\n    }\n\n    // Ensure context_path is set and contains the .build directory\n    if (!context_path || !fs.existsSync(path.join(context_path, '.build'))) {\n      reject(new Error('Invalid context path or .build directory not found'));\n      return;\n    }\n\n    // Prepare build arguments for dependencies\n    const build_args = [\n      `CUSTOM_APT_DEPS=${apt_deps.join(' ')}`,\n      `GLOBAL_NPM_PACKAGES=${npm_deps.join(' ')}`,\n      `CACHEBUST=${Date.now()}` // Add timestamp to invalidate cache\n    ].map(arg => `--build-arg ${arg}`).join(' ');\n\n    // Add --quiet flag to suppress verbose output\n    const command = `docker build --quiet ${build_args} -t ${image_name} -f \"${dockerfile_path}\" \"${context_path}\"`;\n\n    exec(command, { stdio: ['ignore', 'pipe', 'pipe'] }, (error, stdout, stderr) => {\n      if (error) {\n        console.error(`Error building Docker image: ${error.message}`);\n        reject(error);\n        return;\n      }\n      \n      // The --quiet flag will output only the image ID, which we can ignore\n      \n      // Check if stderr contains actual error messages\n      if (stderr.trim() && !stderr.includes(\"Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them\")) {\n        console.error(`Docker build stderr: ${stderr}`);\n      }\n      \n      process.loader.print(`Successfully built Docker image: ${image_name}`);\n      resolve();\n    });\n  });\n};\n\nexport default build_docker_image;"],
  "mappings": "AAAA,OAAS,QAAAA,EAAM,YAAAC,MAAgB,gBAC/B,OAAOC,MAAU,OACjB,OAAS,iBAAAC,MAAqB,MAC9B,OAAOC,MAAQ,KAEf,MAAMC,EAAaF,EAAc,YAAY,GAAG,EAC1CG,EAAYJ,EAAK,QAAQG,CAAU,EAEnCE,EAA4B,IAAM,CACtC,GAAI,CACF,OAAAN,EAAS,mBAAoB,CAAE,MAAO,QAAS,CAAC,EACzC,EACT,MAAgB,CACd,MAAO,EACT,CACF,EAEMO,EAAqB,CACzBC,EAAa,GACbC,EAAe,GACf,CACE,SAAAC,EAAW,CAAC,EACZ,SAAAC,EAAW,CAAC,CACd,EAAI,CAAC,IAEE,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,GAAI,CAACP,EAA0B,EAAG,CAChC,QAAQ,OAAO,MAAM,uIAAuI,EAC5JO,EAAO,IAAI,MAAM,4CAA4C,CAAC,EAC9D,MACF,CAEA,QAAQ,OAAO,MAAM,yCAAyC,EAE9D,MAAMC,EAAkBb,EAAK,KAAKI,EAAW,YAAY,EAEzD,GAAI,CAACF,EAAG,WAAWW,CAAe,EAAG,CACnCD,EAAO,IAAI,MAAM,2BAA2BC,CAAe,EAAE,CAAC,EAC9D,MACF,CAGA,GAAI,CAACL,GAAgB,CAACN,EAAG,WAAWF,EAAK,KAAKQ,EAAc,QAAQ,CAAC,EAAG,CACtEI,EAAO,IAAI,MAAM,oDAAoD,CAAC,EACtE,MACF,CAUA,MAAME,EAAU,wBAPG,CACjB,mBAAmBL,EAAS,KAAK,GAAG,CAAC,GACrC,uBAAuBC,EAAS,KAAK,GAAG,CAAC,GACzC,aAAa,KAAK,IAAI,CAAC,EACzB,EAAE,IAAIK,GAAO,eAAeA,CAAG,EAAE,EAAE,KAAK,GAAG,CAGO,OAAOR,CAAU,QAAQM,CAAe,MAAML,CAAY,IAE5GV,EAAKgB,EAAS,CAAE,MAAO,CAAC,SAAU,OAAQ,MAAM,CAAE,EAAG,CAACE,EAAOC,EAAQC,IAAW,CAC9E,GAAIF,EAAO,CACT,QAAQ,MAAM,gCAAgCA,EAAM,OAAO,EAAE,EAC7DJ,EAAOI,CAAK,EACZ,MACF,CAKIE,EAAO,KAAK,GAAK,CAACA,EAAO,SAAS,sGAAsG,GAC1I,QAAQ,MAAM,wBAAwBA,CAAM,EAAE,EAGhD,QAAQ,OAAO,MAAM,oCAAoCX,CAAU,EAAE,EACrEI,EAAQ,CACV,CAAC,CACH,CAAC,EAGH,IAAOQ,EAAQb",
  "names": ["exec", "execSync", "path", "fileURLToPath", "fs", "__filename", "__dirname", "check_docker_installation", "build_docker_image", "image_name", "context_path", "apt_deps", "npm_deps", "resolve", "reject", "dockerfile_path", "command", "arg", "error", "stdout", "stderr", "build_docker_image_default"]
}
