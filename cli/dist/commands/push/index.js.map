{
  "version": 3,
  "sources": ["../../../src/commands/push/index.js"],
  "sourcesContent": ["import chalk from 'chalk';\nimport inquirer from \"inquirer\";\nimport build from '../../lib/build/index.js';\nimport cli_log from '../../lib/cli_log.js';\nimport confirm_deployment_prompt from './prompts/confirm_deployment.js';\nimport create_version from './create_version.js';\nimport get_app_domain from './get_app_domain.js';\nimport get_deployment from './get_deployment.js';\nimport get_provision_domain from './get_provision_domain.js';\nimport get_settings_file from './get_settings_file.js';\nimport get_session_token from './get_session_token.js';\nimport handle_initial_deployment from './handle_initial_deployment.js';\nimport handle_version_deployment from './handle_version_deployment.js';\nimport Loader from '../../lib/loader.js';\nimport upload_build_to_cdn from './upload_build_to_cdn.js';\nimport validate_deployment from './validate_deployment.js';\nimport validate_push_config from './validate_push_config.js';\n\nconst log_validation_error_response = (validation_type = '', root_error = '', validation_response = {}) => {\n\tlet errors_list = ``;\n\n\tfor (let i = 0; i < validation_response?.errors?.length; i += 1) {\n\t\tconst validation_error = validation_response?.errors[i];\n\n\t\tif (validation_type === 'push_config') {\n\t\t\terrors_list += `${chalk.yellowBright(`> ${validation_error.field}`)}\\n`;\n\t\t}\n\n\t\terrors_list += `${validation_error?.error}\\n${i + 1 === validation_response?.errors?.length ? '' : '\\n'}`;\n\t}\n\n\tcli_log(\n    `${root_error ? `${chalk.yellowBright(root_error)}\\n\\n\\n` : ''}${errors_list}`,\n    {\n      level: \"danger\",\n      docs: {\n      \tpush_config: \"https://cheatcode.co/docs/push/config\",\n      \tdeployment: \"https://cheatcode.co/docs/push/subscription\",\n      }[validation_type],\n    }\n  );\n\n  process.exit(0);\n};\n\nconst get_session_for_deployment = async () => {\n\tconst session_token = await get_session_token();\n\n\tif (!session_token) {\n    cli_log(\n      data?.error?.message,\n      {\n        level: \"danger\",\n        docs: \"https://cheatcode.co/docs/push/cli#authentication\"\n      }\n    );\n\n    return process.exit(0);\n\t}\n\n\treturn session_token;\n};\n\nconst warn_no_push_config = (environment = '') => {\n  cli_log(\n    `settings.${environment}.json must contain a push config object. Add this following the docs link below and try again.`,\n    {\n      level: \"danger\",\n      docs: \"https://cheatcode.co/docs/push/config\"\n    }\n  );\n\n  return process.exit(0);\n};\n\nconst push = async (args = {}, options = {}) => {\n\tprocess.loader = new Loader();\n\tprocess.loader.print('Starting deployment...');\n\n\tconst session_token = await get_session_for_deployment();\n\tconst environment = options?.environment || 'production';\n  const settings = await get_settings_file({ environment });\n\n  if (!settings?.push) {\n    return warn_no_push_config(environment);\n  }\n\n  const push_provision_domain = get_provision_domain(options?.provision_server);\n\tconst push_app_domain = get_app_domain(options?.provision_server);\n\tconst deployment = await get_deployment({\n\t\tdomain: settings?.push?.domain,\n\t\tsession_token,\n\t\tpush_provision_domain,\n\t});\n\n\tlet push_config_validation_response;\n\n\tif (deployment?.status === 'undeployed') {\n\t\tpush_config_validation_response = await validate_push_config({\n\t\t\tpush_provision_domain,\n\t\t\tpush_config: settings?.push,\n\t\t});\n\n\t\tif (push_config_validation_response?.errors?.length > 0) {\n\t\t\tlog_validation_error_response(\n\t\t\t\t'push_config',\n\t\t\t\t`Push config in settings.${environment}.json failed validation with the following errors:`,\n\t\t\t\tpush_config_validation_response,\n\t\t\t);\n\t\t}\n\t}\n\n\tconst deployment_validation_response = await validate_deployment({\n\t\tsession_token,\n\t\tpush_provision_domain,\n\t\tpush_config: settings?.push,\n\t});\n\n\tif (deployment_validation_response?.errors?.length > 0) {\n\t\tlog_validation_error_response(\n\t\t\t'deployment',\n\t\t\t`Deployment failed validation with the following errors:`,\n\t\t\tdeployment_validation_response,\n\t\t);\n\t}\n\n\t// NOTE: A bit hacky but removes need for weird if {} statement nesting.\n\tconst { confirm_deployment } = deployment?.status === 'undeployed' ? await inquirer.prompt(\n\t\tconfirm_deployment_prompt(push_config_validation_response?.instances)\n\t) : { confirm_deployment: true };\n\n\tif (confirm_deployment) {\n\t\t// NOTE: Do this to create a gap between the confirmation text above (only applies if\n\t\t// the deployment is a first-run).\n\t\tif (deployment?.status === 'undeployed') {\n\t\t\tconsole.log('\\n');\n\t\t}\n\n\t\tconst build_timestamp = new Date().toISOString();\n\t\tawait build({\n\t\t\tenvironment,\n\t\t\tencrypt_build: true,\n\t\t\tencryption_key: deployment?.deployment_secret,\n\t\t\tsilence_confirmation: true,\n\t\t});\n\n\t\tprocess.loader.print('Uploading version...');\n\n\t\tawait upload_build_to_cdn(\n\t\t\tbuild_timestamp,\n\t\t\tdeployment,\n\t\t\tsession_token,\n\t\t);\n\n\t\tconst create_version_response = await create_version({\n\t\t\tpush_provision_domain,\n\t\t\tdomain: settings?.push?.domain,\n\t\t\tsession_token,\n\t\t\tbody: {\n\t\t\t\t// NOTE: Endpoint anticipates a stringified version of settings.\n\t\t\t\tsettings: JSON.stringify(settings),\n\t\t\t\tbuild_timestamp,\n\t\t\t},\n\t\t});\n\n\t\tprocess.loader.print('Deploying app...');\n\n\t\tif (deployment?.status === 'undeployed') {\n\t\t\treturn handle_initial_deployment({\n\t\t\t\tpush_provision_domain,\n\t\t\t\tpush_app_domain,\n\t\t\t\tsession_token,\n\t\t\t\tenvironment,\n\t\t\t\tbuild_timestamp,\n\t\t\t\tdeployment,\n\t\t\t});\n\t\t}\n\n\t\treturn handle_version_deployment({\n\t\t\tpush_provision_domain,\n\t\t\tpush_app_domain,\n\t\t\tsession_token,\n\t\t\tenvironment,\n\t\t\tbuild_timestamp,\n\t\t\tdeployment,\n\t\t});\n\t}\n};\n\nexport default push;\n"],
  "mappings": "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",
  "names": ["chalk", "inquirer", "build", "cli_log", "confirm_deployment_prompt", "create_version", "get_app_domain", "get_deployment", "get_provision_domain", "get_settings_file", "get_session_token", "handle_initial_deployment", "handle_version_deployment", "Loader", "upload_build_to_cdn", "validate_deployment", "validate_push_config", "log_validation_error_response", "validation_type", "root_error", "validation_response", "errors_list", "i", "validation_error", "get_session_for_deployment", "session_token", "warn_no_push_config", "environment", "push", "args", "options", "settings", "push_provision_domain", "push_app_domain", "deployment", "push_config_validation_response", "deployment_validation_response", "confirm_deployment", "build_timestamp", "create_version_response", "push_default"]
}
